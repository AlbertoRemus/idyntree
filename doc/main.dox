
/*
 * Copyright (C) 2015 Fondazione Istituto Italiano di Tecnologia
 * Authors: See AUTHORS file.
 * CopyPolicy: Released under the terms of the LGPLv2.1 or later, see LGPL.TXT
 *
 */

// Definition of doxygen groups
/**
 * \defgroup iDynTreeCore %iDynTree core data structures
 *
 * iDynTree provides basic data structures to implement kinemanics and dynamics
 * algorithms.
 *
 */

/**
 * \defgroup iDynTreeModel %iDynTree model data structures
 *
 * Data structures and algorithm to model and implement algorithm
 * on multibody articulated systems.
 *
 */

/**
 * \defgroup iDynTreeSensors %iDynTree sensors data structures
 *
 * Data structures and algorithm to model sensors distributed on
 * multibody articulated systems.
 *
 */

/**
 * \defgroup iDynTreeModelIO %iDynTree model data structures
 *
 * Functions to read and write iDynTree models and sensors
 * in external formats (URDF at the moment).
 *
 */


/**
 * \defgroup iDynTreeEstimation Algorithms related to whole-body estimation.
 */

 /**
 * \defgroup iDynTreeRegressors Algorithms related to whole-body dynamics identification.
 */

/**
 * \defgroup iDynTreeHighLevel High level interfaces to access algorithms contained in iDynTree.
 */

/**
 * \defgroup iDynTreeKDL Functions and classes for simplifying integration of %iDynTree and KDL.
 */

/**
 * \defgroup iDynTreeYARP Functions and classes for simplifying integration of %iDynTree and YARP.
 *
 * \warning This component is compiled only if iDynTree was compiled with the CMake flag
 *          IDYNTREE_USES_YARP set to ON .
 *
 * \note <b>SI units adopted</b>: meters for lengths and radiants
 *       for angles.
 *
 * \section dep_sec Dependencies
 * - KDL
 *
 * \section intro_sec Description
 *
 * iDynTree is designed to be an efficient, generic and easy to use library
 * to calculate joint torques and external wrenches given kinetic information
 * (linear acceleration, angular velocity and  angular acceleration of a link,
 * joint positions, velocities, acceleration) and embedded FT sensor measures,
 * implementing the techniques described in this two papers:
 *
 *     - [1] S. Ivaldi, M. Fumagalli, M. Randazzo, F. Nori, G. Metta, and G. Sandini
 *           Computing robot internal/external wrenches by means of inertial, tactile and f/t sensors: theory and implementation on the icub
 *           in Proc. of the 11th IEEE-RAS International Conference on Humanoid Robots, Bled, Slovenia, 2011.
 *           http://people.liralab.it/iron/Papers/conference/780_Ivaldi_etal2011.pdf
 *           http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=6100813
 *
 *     - [2] A. Del Prete, L. Natale, F. Nori, and G. Metta,
 *           Contact Force Estimations Using Tactile Sensors and Force / Torque Sensors
 *           in Human Robot Interaction, 2012, pp. 0–2,
 *           http://pasa.liralab.it/pasapdf/1113_DelPrete_etal2012.pdf
 *
 * Additional details (some not implemented, like multiple IMUs):
 *
 *     - [3] M. Fumagalli, S. Ivaldi, M. Randazzo, L. Natale, G. Metta, G. Sandini, and F. Nori,
 *           Force feedback exploiting tactile and proximal force/torque sensing
 *           in Autonomous Robots, vol. 33, no. 4, pp. 381–398, 2012.
 *           http://dx.doi.org/10.1007/s10514-012-9291-2
 *           http://people.liralab.it/iron/Papers/journal/IvaldiFumagallietAl.pdf
 *
 * \section tested_os_sec Tested OS
 *
 * Linux
 *
 * \section example_sec Example
 *
 * Exe
 *
 *
 * \author Silvio Traversaro
 *
 * Copyright (C) 2013 RobotCub Consortium
 * CopyPolicy: Released under the terms of the GNU LGPL v2.0.
 *
 *
 **/







/**
\mainpage Welcome to %iDynTree

%iDynTree is a library of robots dynamics algorithms for control, estimation and simulation.
%iDynTree is specifically designed for free-floating robots, but it is possible to use it also with fixed-base robots.

\li Source code: https://github.com/robotology/idyntree
\li File an issue: https://github.com/robotology/idyntree/issues/new
\li Installation and Tutorials: https://github.com/robotology/idyntree/blob/master/README.md

%iDynTree is written in C++ language, but thanks to SWIG it is possible to use the iDynTree algorithms in several other languages. Support and documentation is provided in particular for C++, Matlab, Python and Lua. If you are interested in using %iDynTree with another programming language, feel free to create a new issue requesting support for it.

This documentation is automatically generated from the C++ headers, and
can be used as a reference documentation for the classes and functions
contained in iDynTree .

%iDynTree is divided in several parts:
\li  \ref iDynTreeCore "Core" :  Basic data structures for kinematics and dynamics of rigid bodies.
\li  \ref iDynTreeModel "Model": Data structures and algorithms for modeling articulated body structures.
\li  \ref iDynTreeSensors "Sensors" : Data structures for modeling sensors distribude on articulated body structures.
\li  \ref iDynTreeModelIO "ModelIO" : Function to read and write %iDynTree models and sensors to external files (such as [URDF](http://wiki.ros.org/urdf) or [iKin DH parameters](http://wiki.icub.org/brain/classiCub_1_1iKin_1_1iKinLimb.html#a76c93aae76bb0f7ef9470b81d0da0e26) ).
\li  \ref iDynTreeEstimation "Estimation" : Algorithms related to whole-body estimation.
\li  \ref iDynTreeRegressors "Regressors" : Algorithms related to whole-body dynamics identification.
\li  \ref iDynTreeHighLevel "HighLevel"   : High level interfaces to access algorithms contained in %iDynTree.
\li  \ref iDynTreeKDL "KDL" : Function and classes for simplifying integration of %iDynTree with [KDL](https://github.com/orocos/orocos_kinematics_dynamics).
\li  \ref iDynTreeYARP "YARP" : Function and classes for simplifying integration of %iDynTree with [YARP](http://yarp.it/).
<br>

 *
 */
