/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGMATLAB
#define SWIG_name_d      "iDynTree"
#define SWIG_name        iDynTree

#define SWIG_op_prefix        "op_"
#define SWIG_pkg_name        "iDynTree"
#define SwigVar_mxArray mxArray*


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <mex.h>
#include <math.h> /* need this for floor() */
#include <string.h> /* need this for strcmp() */
#include <stdarg.h> /* need this for SWIG_Error below */

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Last error */
static int SWIG_lasterror_code = 0;
static char SWIG_lasterror_msg[1024];
SWIGRUNTIME void SWIG_Error(int code, const char *format, ...) {
  SWIG_lasterror_code = code;
  va_list arg;
  va_start(arg, format);
  vsnprintf(SWIG_lasterror_msg, sizeof(SWIG_lasterror_msg), format, arg);
  va_end(arg);
}

SWIGRUNTIME const char* SWIG_ErrorType(int code) {
  switch (code) {
  case SWIG_MemoryError:
    return "SWIG:MemoryError";
  case SWIG_IOError:
    return "SWIG:IOError";
  case SWIG_RuntimeError:
    return "SWIG:RuntimeError";
  case SWIG_IndexError:
    return "SWIG:IndexError";
  case SWIG_TypeError:
    return "SWIG:TypeError";
  case SWIG_DivisionByZero:
    return "SWIG:DivisionByZero";
  case SWIG_OverflowError:
    return "SWIG:OverflowError";
  case SWIG_SyntaxError:
    return "SWIG:SyntaxError";
  case SWIG_ValueError:
    return "SWIG:ValueError";
  case SWIG_SystemError:
    return "SWIG:SystemError";
  case SWIG_AttributeError:
    return "SWIG:AttributeError";
  }
  return "SWIG:UnknownError";
}

SWIGRUNTIME bool SWIG_check_num_args(const char *func_name, int num_args, int max_args, int min_args, int varargs) {
  if (num_args > max_args && !varargs) {
    SWIG_Error(SWIG_RuntimeError, "function %s takes at most %i arguments", func_name, max_args);
  } else if (num_args < min_args) {
    SWIG_Error(SWIG_RuntimeError, "function %s requires at least %i arguments", func_name, min_args);
  } else {
    return true;
  }
  return false;
}

#define SWIG_fail                                       goto fail

#define SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)  SWIG_Matlab_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Matlab_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Matlab_NewPointerObj(ptr, type, flags)
#define swig_owntype                                    int

#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Matlab_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Matlab_NewPackedObj(ptr, sz, type)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Matlab_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Matlab_NewPackedObj(ptr, sz, type)

#define SWIG_GetModule(clientdata)                      SWIG_Matlab_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Matlab_SetModule(pointer);
#define SWIG_MODULE_CLIENTDATA_TYPE void*

#define Matlab_Error_Occurred() 0
#define SWIG_Matlab_AddErrorMsg(msg) {;}

SWIGRUNTIME swig_module_info *SWIG_Matlab_GetModule(void *clientdata);
SWIGRUNTIME void SWIG_Matlab_SetModule(swig_module_info *pointer);

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      0

/* Pointer to C/C++ object, including type information and reference counters */
typedef struct SwigPtr {
  void *ptr;
  swig_type_info *type;
  int own;
  void *self;
  struct SwigPtr* next;
} SwigPtr;
static swig_module_info *saved_swig_module = 0;

/* Add new pointer object to the memory allocator
   Returns the location of the new element by reference and a return flag by value.
 */
int SWIG_Matlab_NewPointer(SwigPtr** swig_ptr, void *ptr, swig_type_info *type, int own) {
  /* Check input arguments */
  if (!swig_ptr || !type) return 1;

  /* Allocate memory */
  SwigPtr *obj=(SwigPtr *)malloc(sizeof(SwigPtr));
  if (!obj) return 1;

  /* Initialize object */
  obj->ptr = ptr;
  obj->type = type;
  obj->own = own;
  obj->self = obj;
  obj->next = 0;
  
  /* Return memory reference and successful return */
  *swig_ptr = obj;
  return 0;
}

/* Free pointer object
   Returns a void* with the object to be freed (if any)
 */
void* SWIG_Matlab_DeletePointer(SwigPtr* p) {
  /* Quick return if null pointer? */
  if (p==0) return 0;

  /* Clear and free */
  void* ret = p->own ? p->ptr : 0;
  p->ptr=0;
  p->type=0;
  p->own=0;
  p->self=0;
  p->next=0;
  free(p);
  return ret;
}

/* This should probably be moved somewhere else */
#ifdef __cplusplus
extern "C"
#endif /* cplusplus */
void SWIG_Matlab_ExitFcn(void) {
  /* Unused at the moment */
}

/* Runtime API implementation */
SWIGRUNTIME mxArray* SWIG_Matlab_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  /* Ownership? */
  int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;

  /* Allocate a pointer object */  
  SwigPtr* swig_ptr;
  if (SWIG_Matlab_NewPointer(&swig_ptr, ptr, type, own)) {
    mexErrMsgIdAndTxt("SWIG:NewPointerObj","Cannot allocate pointer");
  }

  /* Create a SwigRef instance */
  mxArray* pm = 0;
  mxArray* ex = mexCallMATLABWithTrap(1, &pm, 0, 0, "SwigRef");
  if(ex) mexErrMsgIdAndTxt("SWIG:NewPointerObj", "Cannot create SwigRef instance");

  /* Set pointer property */
  mxArray *pm_ptr = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
  *(uint64_T *)mxGetData(pm_ptr) = (uint64_T)swig_ptr;
  if(!pm_ptr) mexErrMsgIdAndTxt("SWIG:NewPointerObj", "mxCreateNumericMatrix failed");
  mxSetProperty(pm, 0, "swigPtr", pm_ptr);
  mxDestroyArray(pm_ptr);

  /* Create a proxy class of the desired type */
  if (type->clientdata) {
    const char* matlab_classname = (const char *)type->clientdata;
    mxArray* pm_test = 0;
    ex = mexCallMATLABWithTrap(1, &pm_test, 1, &pm, matlab_classname);
    if (ex) {
      mexWarnMsgIdAndTxt("SWIG:NewPointerObj",
                         "NewPointerObj problem. creating SwigRef as opposed to %s", matlab_classname);
      mxDestroyArray(ex);
    } else {
      mxDestroyArray(pm);
      pm = pm_test;
    }
  }
  
  return pm;
}

SWIGRUNTIME int SWIG_Matlab_isOwned(mxArray* pm) {
/* Get index, represented as a uint64_T scalar */
  mxArray *pm_ptr = mxGetProperty(pm, 0, "swigPtr");
  if(!pm_ptr || mxGetNumberOfElements(pm_ptr) != 1 ||
     mxGetClassID(pm_ptr) != mxUINT64_CLASS || mxIsComplex(pm_ptr)) {
    if(pm_ptr) mxDestroyArray(pm_ptr);
    return SWIG_ERROR;
  }
  SwigPtr* p = (SwigPtr*)(*(uint64_T*)mxGetData(pm_ptr));
  mxDestroyArray(pm_ptr);

  return p ? p->own : 0;
}

SWIGRUNTIME SwigPtr* SWIG_Matlab_getSwigPtr(mxArray* pm) {
/* Get index, represented as a uint64_T scalar */
  mxArray *pm_ptr = mxGetProperty(pm, 0, "swigPtr");
  if(!pm_ptr || mxGetNumberOfElements(pm_ptr) != 1 ||
     mxGetClassID(pm_ptr) != mxUINT64_CLASS || mxIsComplex(pm_ptr)) {
    if(pm_ptr) mxDestroyArray(pm_ptr);
    return 0;
  }
  SwigPtr* p = (SwigPtr*)(*(uint64_T*)mxGetData(pm_ptr));
  mxDestroyArray(pm_ptr);

  /* Consistency check */
  if (p->self != p) return 0;

  /* Get pointer object */
  return p;
}

SWIGRUNTIME int SWIG_Matlab_ConvertPtrAndOwn(mxArray* pm, void **ptr, swig_type_info *type, int flags, int *own) {
  /* Get index, represented as a uint64_T scalar */
  mxArray *pm_ptr = mxGetProperty(pm, 0, "swigPtr");
  if(!pm_ptr || mxGetNumberOfElements(pm_ptr) != 1 ||
     mxGetClassID(pm_ptr) != mxUINT64_CLASS || mxIsComplex(pm_ptr)){
    if(pm_ptr) mxDestroyArray(pm_ptr);
    return SWIG_ERROR;
  }
  SwigPtr* swig_ptr = (SwigPtr*)(*(uint64_T*)mxGetData(pm_ptr));
  mxDestroyArray(pm_ptr);

  /* Get pointer object */
  if (!swig_ptr) return SWIG_ERROR;

  swig_cast_info *tc;
  bool same_type = false;
  SwigPtr* p=swig_ptr;
  while (p) {
    /* Loop over types */
    swig_type_info *p_type = p->type;

    /* No type cast needed */
    if (p_type==type || !type) {
      same_type = true;
      break;
    }

    /* Check if type conversion is possible */
    tc = SWIG_TypeCheck(p_type->name, type);
    if (tc) break;

    /* Check next type */
    p = p->next;
  }

  /* Conversion not possible */
  if (!same_type && !tc) return SWIG_ERROR;

  /* Get data */
  if (ptr) *ptr = p->ptr;
  if (own) *own = p->own;
    
  /* Set ownership marker to false? */
  if(flags & SWIG_POINTER_DISOWN){
    SWIG_Matlab_DeletePointer(swig_ptr);
  }

  /* No type cast needed */
  if (same_type || !ptr) {
    return SWIG_OK;
  }

  /* Do type-cast */
  int newmemory = 0;
  *ptr = SWIG_TypeCast(tc, *ptr, &newmemory);
  if (newmemory == SWIG_CAST_NEW_MEMORY) {
    if (own) {
      *own = *own | SWIG_CAST_NEW_MEMORY;
    } else {
      /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
      mexErrMsgIdAndTxt("SWIG:ConvertPointerObj","SWIG error in converting pointer for type %s. Bad typemap?",type->name);
      return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}

SWIGRUNTIME swig_module_info *SWIG_Matlab_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  if (!saved_swig_module) {
    /* First call for this module, fetch pointer from MATLAB */
    mxArray* mem = 0;
    int flag = mexCallMATLAB(1, &mem, 0, 0, "SwigMem");
    if (flag || !mem) mexErrMsgIdAndTxt("SWIG:GetModule", "Cannot call SwigMem");
    /* On first call, mem is an empty matrix */
    if (mxGetNumberOfElements(mem)!= 0) {
      if (!mxIsStruct(mem)) {
        mexErrMsgIdAndTxt("SWIG:GetModule", "Corrupted memory");
      }
      mxArray *module = mxGetField(mem, 0,
        "swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
      if (module && mxGetNumberOfElements(module) == 1 && mxGetClassID(module) == mxUINT64_CLASS && !mxIsComplex(module)) {
        /* Cast memory as a pointer */
        saved_swig_module = (swig_module_info*)(*(uint64_T*)mxGetData(module));
      }
    }
    mxDestroyArray(mem);
  }
  return saved_swig_module;
}

SWIGRUNTIME void SWIG_Matlab_SetModule(swig_module_info *pointer) {
  mxArray* mem = 0;
  const char *fields[1] = {"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME};
  int flag = mexCallMATLAB(1, &mem, 0, 0, "SwigMem");
  if (flag || !mem) mexErrMsgIdAndTxt("SWIG:SetModule", "Cannot call SwigMem");
  /* Under normal circumstances, swigMem is an empty matrix */
  /* but is not required to be for a valid call to SWIG_Matlab_SetModule() */
  if (mxGetNumberOfElements(mem) == 0) {
    mxDestroyArray(mem);
    mem = mxCreateStructMatrix(1,1,1,fields);
    if(!mem) mexErrMsgIdAndTxt("SWIG:SetModule","mxCreateStructMatrix failed");
    mxArray *module = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
    if(!module) mexErrMsgIdAndTxt("SWIG:SetModule","mxCreateNumericMatrix failed");
    *(uint64_T *)mxGetData(module) = (uint64_T)pointer;
    mxSetField(mem, 0, fields[0], module);
  } else {
    int nfields = 0;
    int fieldNum = 0;
    /* Add to existing mem if not the same */
    if (!mxIsStruct(mem)) {
      mexErrMsgIdAndTxt("SWIG:SetModule", "Corrupted memory");
    }
    nfields = mxGetNumberOfFields(mem);
    /* Check if same type table */
    for (int ii=0; ii<nfields; ++ii){
      if(strcmp(mxGetFieldNameByNumber(mem, ii), fields[0]) == 0) {
        mxDestroyArray(mem);
        return;
      }
    }
    fieldNum = mxAddField(mem, fields[0]);
    if (fieldNum < 0) mexErrMsgIdAndTxt("SWIG:SetModule", "Error adding field to SwigMem");
    mxArray *module = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
    if(!module) mexErrMsgIdAndTxt("SWIG:SetModule","mxCreateNumericMatrix failed");
    *(uint64_T *)mxGetData(module) = (uint64_T)pointer;
    mxSetFieldByNumber(mem, 0, fieldNum, module);
  }
  /* Set variable in SwigMem */
  flag = mexCallMATLAB(0, 0, 1, &mem, "SwigMem");
  mxDestroyArray(mem);
  if (flag) {
    mexErrMsgIdAndTxt("SWIG:SetModule", "Could not set variable in SwigMem.\n");
  }
  saved_swig_module = pointer;
}

/* HACK HACK */
#define SWIG_Matlab_SetConstant(dummy1,dummy2,pm) (pm)

#ifdef __cplusplus
#include <streambuf>
#include <iostream>
namespace swig {
  // Stream buffer to allow redirecting output to MATLAB
  class SWIG_Matlab_streambuf : public std::streambuf {
  public:
    SWIG_Matlab_streambuf() {}
  protected:
    virtual int_type overflow(int_type ch) {
      if(ch != traits_type::eof()) {
        mexPrintf("%c", static_cast<char>(ch));
      }
      return ch;
    }
    virtual std::streamsize xsputn(const char* s, std::streamsize num) {
      // Pass straight to mexPrintf without buffering
      mexPrintf("%.*s", static_cast<int>(num), s);
      return num;
    }
  };

  // Instantiation
  static SWIG_Matlab_streambuf SWIG_Matlab_buf;
} // namespace swig
#endif /* cplusplus */



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AngularVector3T swig_types[0]
#define SWIGTYPE_p_AngularVector3Type swig_types[1]
#define SWIGTYPE_p_DerivByAngularMotion swig_types[2]
#define SWIGTYPE_p_DerivByLinearMotion swig_types[3]
#define SWIGTYPE_p_DualSpace swig_types[4]
#define SWIGTYPE_p_LinearVector3T swig_types[5]
#define SWIGTYPE_p_LinearVector3Type swig_types[6]
#define SWIGTYPE_p_MotionCrossAngF swig_types[7]
#define SWIGTYPE_p_MotionCrossAngM swig_types[8]
#define SWIGTYPE_p_MotionCrossLinF swig_types[9]
#define SWIGTYPE_p_MotionCrossLinM swig_types[10]
#define SWIGTYPE_p_MotionForceSemanticsT swig_types[11]
#define SWIGTYPE_p_MotionForceTbase swig_types[12]
#define SWIGTYPE_p_SemanticsType swig_types[13]
#define SWIGTYPE_p_Traits swig_types[14]
#define SWIGTYPE_p_Type swig_types[15]
#define SWIGTYPE_p_char swig_types[16]
#define SWIGTYPE_p_double swig_types[17]
#define SWIGTYPE_p_iDynTree__Accelerometer swig_types[18]
#define SWIGTYPE_p_iDynTree__AngularForceVector3 swig_types[19]
#define SWIGTYPE_p_iDynTree__AngularForceVector3Semantics swig_types[20]
#define SWIGTYPE_p_iDynTree__AngularMotionVector3 swig_types[21]
#define SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics swig_types[22]
#define SWIGTYPE_p_iDynTree__ArticulatedBodyInertia swig_types[23]
#define SWIGTYPE_p_iDynTree__Axis swig_types[24]
#define SWIGTYPE_p_iDynTree__ClassicalAcc swig_types[25]
#define SWIGTYPE_p_iDynTree__Direction swig_types[26]
#define SWIGTYPE_p_iDynTree__DualSpaceT_iDynTree__SpatialForceVector_t__Type swig_types[27]
#define SWIGTYPE_p_iDynTree__DualSpaceT_iDynTree__SpatialMotionVector_t__Type swig_types[28]
#define SWIGTYPE_p_iDynTree__Dummy swig_types[29]
#define SWIGTYPE_p_iDynTree__FixedJoint swig_types[30]
#define SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t swig_types[31]
#define SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t swig_types[32]
#define SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t swig_types[33]
#define SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t swig_types[34]
#define SWIGTYPE_p_iDynTree__FreeFloatingAcc swig_types[35]
#define SWIGTYPE_p_iDynTree__FreeFloatingPos swig_types[36]
#define SWIGTYPE_p_iDynTree__FreeFloatingVel swig_types[37]
#define SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t swig_types[38]
#define SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t swig_types[39]
#define SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t swig_types[40]
#define SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t swig_types[41]
#define SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t swig_types[42]
#define SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t swig_types[43]
#define SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t swig_types[44]
#define SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t swig_types[45]
#define SWIGTYPE_p_iDynTree__Gyroscope swig_types[46]
#define SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations swig_types[47]
#define SWIGTYPE_p_iDynTree__IJoint swig_types[48]
#define SWIGTYPE_p_iDynTree__IMatrix swig_types[49]
#define SWIGTYPE_p_iDynTree__IRawMatrix swig_types[50]
#define SWIGTYPE_p_iDynTree__IRawVector swig_types[51]
#define SWIGTYPE_p_iDynTree__IVector swig_types[52]
#define SWIGTYPE_p_iDynTree__LinearForceVector3 swig_types[53]
#define SWIGTYPE_p_iDynTree__LinearForceVector3Semantics swig_types[54]
#define SWIGTYPE_p_iDynTree__LinearMotionVector3 swig_types[55]
#define SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics swig_types[56]
#define SWIGTYPE_p_iDynTree__Link swig_types[57]
#define SWIGTYPE_p_iDynTree__LinkAccArray swig_types[58]
#define SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias swig_types[59]
#define SWIGTYPE_p_iDynTree__LinkInertias swig_types[60]
#define SWIGTYPE_p_iDynTree__LinkPositions swig_types[61]
#define SWIGTYPE_p_iDynTree__LinkVelArray swig_types[62]
#define SWIGTYPE_p_iDynTree__LinkWrenches swig_types[63]
#define SWIGTYPE_p_iDynTree__MatrixDynSize swig_types[64]
#define SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t swig_types[65]
#define SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t swig_types[66]
#define SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t swig_types[67]
#define SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_1_t swig_types[68]
#define SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t swig_types[69]
#define SWIGTYPE_p_iDynTree__Model swig_types[70]
#define SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t swig_types[71]
#define SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t swig_types[72]
#define SWIGTYPE_p_iDynTree__MovableJointImplT_1_1_t swig_types[73]
#define SWIGTYPE_p_iDynTree__MovableJointImplT_2_2_t swig_types[74]
#define SWIGTYPE_p_iDynTree__MovableJointImplT_3_3_t swig_types[75]
#define SWIGTYPE_p_iDynTree__MovableJointImplT_4_4_t swig_types[76]
#define SWIGTYPE_p_iDynTree__MovableJointImplT_5_5_t swig_types[77]
#define SWIGTYPE_p_iDynTree__MovableJointImplT_6_6_t swig_types[78]
#define SWIGTYPE_p_iDynTree__Neighbor swig_types[79]
#define SWIGTYPE_p_iDynTree__Position swig_types[80]
#define SWIGTYPE_p_iDynTree__PositionRaw swig_types[81]
#define SWIGTYPE_p_iDynTree__PositionSemantics swig_types[82]
#define SWIGTYPE_p_iDynTree__PredictSensorsMeasurements swig_types[83]
#define SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator swig_types[84]
#define SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter swig_types[85]
#define SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList swig_types[86]
#define SWIGTYPE_p_iDynTree__RevoluteJoint swig_types[87]
#define SWIGTYPE_p_iDynTree__Rotation swig_types[88]
#define SWIGTYPE_p_iDynTree__RotationRaw swig_types[89]
#define SWIGTYPE_p_iDynTree__RotationSemantics swig_types[90]
#define SWIGTYPE_p_iDynTree__RotationalInertiaRaw swig_types[91]
#define SWIGTYPE_p_iDynTree__Sensor swig_types[92]
#define SWIGTYPE_p_iDynTree__SensorsList swig_types[93]
#define SWIGTYPE_p_iDynTree__SensorsMeasurements swig_types[94]
#define SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor swig_types[95]
#define SWIGTYPE_p_iDynTree__SpatialAcc swig_types[96]
#define SWIGTYPE_p_iDynTree__SpatialForceVector swig_types[97]
#define SWIGTYPE_p_iDynTree__SpatialInertia swig_types[98]
#define SWIGTYPE_p_iDynTree__SpatialInertiaRaw swig_types[99]
#define SWIGTYPE_p_iDynTree__SpatialMomentum swig_types[100]
#define SWIGTYPE_p_iDynTree__SpatialMotionVector swig_types[101]
#define SWIGTYPE_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearForceVector3Semantics_iDynTree__AngularForceVector3Semantics_t swig_types[102]
#define SWIGTYPE_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearMotionVector3Semantics_iDynTree__AngularMotionVector3Semantics_t swig_types[103]
#define SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t swig_types[104]
#define SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t swig_types[105]
#define SWIGTYPE_p_iDynTree__Transform swig_types[106]
#define SWIGTYPE_p_iDynTree__TransformSemantics swig_types[107]
#define SWIGTYPE_p_iDynTree__Traversal swig_types[108]
#define SWIGTYPE_p_iDynTree__Twist swig_types[109]
#define SWIGTYPE_p_iDynTree__VectorDynSize swig_types[110]
#define SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t swig_types[111]
#define SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t swig_types[112]
#define SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t swig_types[113]
#define SWIGTYPE_p_iDynTree__Wrench swig_types[114]
#define SWIGTYPE_p_int swig_types[115]
#define SWIGTYPE_p_std__vectorT_iDynTree__Regressors__DynamicsRegressorParameter_t swig_types[116]
#define SWIGTYPE_p_unsigned_int swig_types[117]
static swig_type_info *swig_types[119];
static swig_module_info swig_module = {swig_types, 118, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


#define SWIGVERSION 0x030005 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <string>


/* Note : always include headers following the inheritance order */

// Basic math classes
#include "iDynTree/Core/IMatrix.h"
#include "iDynTree/Core/IVector.h"
#include "iDynTree/Core/MatrixDynSize.h"
#include "iDynTree/Core/VectorDynSize.h"
#include "iDynTree/Core/VectorFixSize.h"

// Basic Vectors: Point Vectors and Spatial Vectors
#include "iDynTree/Core/PositionRaw.h"
#include "iDynTree/Core/PositionSemantics.h"
#include "iDynTree/Core/Position.h"
#include "iDynTree/Core/LinearMotionVector3.h"
#include "iDynTree/Core/LinearForceVector3.h"
#include "iDynTree/Core/AngularMotionVector3.h"
#include "iDynTree/Core/AngularForceVector3.h"
#include "iDynTree/Core/SpatialForceVector.h"
#include "iDynTree/Core/SpatialMotionVector.h"
#include "iDynTree/Core/Twist.h"
#include "iDynTree/Core/Wrench.h"
#include "iDynTree/Core/SpatialMomentum.h"
#include "iDynTree/Core/SpatialAcc.h"
#include "iDynTree/Core/ClassicalAcc.h"
#include "iDynTree/Core/Direction.h"
#include "iDynTree/Core/Axis.h"

// Inertias
#include "iDynTree/Core/RotationalInertiaRaw.h"
#include "iDynTree/Core/SpatialInertiaRaw.h"
#include "iDynTree/Core/SpatialInertia.h"
#include "iDynTree/Core/ArticulatedBodyInertia.h"

// Transformations: Rotation and Transform
#include "iDynTree/Core/RotationRaw.h"
#include "iDynTree/Core/RotationSemantics.h"
#include "iDynTree/Core/Rotation.h"
#include "iDynTree/Core/TransformSemantics.h"
#include "iDynTree/Core/Transform.h"

// Model related data structures
#include "iDynTree/Model/Indeces.h"
#include "iDynTree/Model/LinkState.h"
#include "iDynTree/Model/Link.h"
#include "iDynTree/Model/IJoint.h"
#include "iDynTree/Model/FixedJoint.h"
#include "iDynTree/Model/MovableJointImpl.h"
#include "iDynTree/Model/RevoluteJoint.h"
#include "iDynTree/Model/Traversal.h"
#include "iDynTree/Model/Model.h"

// Model loading from external formats
#include "iDynTree/ModelIO/URDFModelImport.h"

// Sensors related data structures
#include "iDynTree/Sensors/Sensors.h"
#include "iDynTree/Sensors/SixAxisFTSensor.h"
#include "iDynTree/Sensors/Accelerometer.h"
#include "iDynTree/Sensors/Gyroscope.h"
#include "iDynTree/Sensors/PredictSensorsMeasurements.h"

// Sensors loading from external formats
#include "iDynTree/ModelIO/URDFSensorsImport.h"

// Regressors related data structures
#include "iDynTree/Regressors/DynamicsRegressorParameters.h"
#include "iDynTree/Regressors/DynamicsRegressorGenerator.h"

// High level interfaces
#include "iDynTree/HighLevel/DynamicsComputations.h"



#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


  SWIGINTERN int SWIG_AsVal_unsigned_SS_long (mxArray* pm, unsigned long* val)
    {
      if(mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      switch(mxGetClassID(pm)){
      case mxINT8_CLASS:
        if(val) *val = (unsigned long)(*(int8_T*)mxGetData(pm)); break;
      case mxUINT8_CLASS:
        if(val) *val = (unsigned long)(*(uint8_T*)mxGetData(pm)); break;
      case mxINT16_CLASS:
        if(val) *val = (unsigned long)(*(int16_T*)mxGetData(pm)); break;
      case mxUINT16_CLASS:
        if(val) *val = (unsigned long)(*(uint16_T*)mxGetData(pm)); break;
      case mxINT32_CLASS:
        if(val) *val = (unsigned long)(*(int32_T*)mxGetData(pm)); break;
      case mxUINT32_CLASS:
        if(val) *val = (unsigned long)(*(uint32_T*)mxGetData(pm)); break;
      case mxINT64_CLASS:
        if(val) *val = (unsigned long)(*(int64_T*)mxGetData(pm)); break;
      case mxUINT64_CLASS: 
        if(val) *val = (unsigned long)(*(uint64_T*)mxGetData(pm)); break;
      case mxDOUBLE_CLASS:
      {
	double v=mxGetScalar(pm);
	if(v!=floor(v)) return SWIG_TypeError;
        if(val) *val = (unsigned long)v;
        break;
      }
      default: return SWIG_TypeError;
      }
      return SWIG_OK;
    }


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (mxArray* obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


  SWIGINTERNINLINE mxArray* SWIG_From_double    (double value)
    {    
      return mxCreateDoubleScalar(value);
    }


  SWIGINTERN int SWIG_AsVal_double (mxArray* pm, double* val)
    {
      if(!mxIsDouble(pm) || mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      if (val) *val = mxGetScalar(pm);
      return SWIG_OK;
    }


SWIGINTERNINLINE mxArray*
  SWIG_From_bool  (bool value)
{
  return mxCreateLogicalScalar(value);
}


  SWIGINTERNINLINE mxArray* SWIG_From_unsigned_SS_long    (unsigned long value)
    {    
      mxArray* out = mxCreateNumericMatrix(1,1,mxUINT64_CLASS,mxREAL);
      *((uint64_T*)mxGetData(out)) = (uint64_T)value;
      return out;
    }


SWIGINTERNINLINE mxArray*
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE mxArray*
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
   mwSize dims[2] = {1,(mwSize)size};
   mxArray* ret = mxCreateCharArray((mwSize)2,dims);
   if(!ret) mexErrMsgIdAndTxt("SWIG:FromCharPtrAndSize","mxCreateCharArray failed");
   mxChar *ret_data = (mxChar *)mxGetData(ret);
   size_t i;
   for(i=0; i<size; ++i) ret_data[i] = carray[i];
   return ret;  
}


SWIGINTERNINLINE mxArray*
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}

SWIGINTERN mxArray *iDynTree_MatrixDynSize_toMatlab(iDynTree::MatrixDynSize const *self){
        mxArray *p  = mxCreateDoubleMatrix(self->rows(), self->cols(), mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        self->fillColMajorBuffer(d); // Column-major
        return p;
    }
SWIGINTERN mxArray *iDynTree_VectorDynSize_toMatlab(iDynTree::VectorDynSize const *self){
        mxArray *p  = mxCreateDoubleMatrix(self->size(), 1, mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        self->fillBuffer(d); // Column-major
        return p;
    }
SWIGINTERN void iDynTree_VectorDynSize_fromMatlab(iDynTree::VectorDynSize *self,mxArray *in){
        // check size
        const size_t * dims = mxGetDimensions(in);
        self->size();
        if( ( dims[0] == 1 || dims[1] == 1) )
        {
            // Get the size of the input vector
            int inSize;
            if( dims[0] == 1 )
            {
                inSize = dims[1];
            }
            else
            {
                inSize = dims[0];
            }

            // If the input vector has a size different
            // from the one of the iDynTree::VectorDynSize,
            // we resisze iDynTre::VectorDynSize
            if( self->size() != inSize )
            {
                self->resize(inSize);
            }

            double* d = static_cast<double*>(mxGetData(in));
            double* selfData = self->data();
            for(int i=0; i < inSize; i++ )
            {
                selfData[i] = d[i];
            }
            return;
        }
    }
SWIGINTERN mxArray *iDynTree_MatrixFixSize_Sl_3_Sc_3_Sg__toMatlab(iDynTree::MatrixFixSize< 3,3 > const *self){
        mxArray *p  = mxCreateDoubleMatrix(self->rows(), self->cols(), mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        self->fillColMajorBuffer(d); // Column-major
        return p;
    }
SWIGINTERN void iDynTree_MatrixFixSize_Sl_3_Sc_3_Sg__fromMatlab(iDynTree::MatrixFixSize< 3,3 > *self,mxArray *in){
        // check size
        const size_t * dims = mxGetDimensions(in);
        int fixValRows = self->rows();
        int fixValCols = self->cols();
        if( dims[0] == fixValRows && dims[1] == fixValCols )
        {
            double* d = static_cast<double*>(mxGetData(in));
            double* selfData = self->data();
            for(int row=0; row < fixValRows; row++ )
            {
                for(int col=0; col < fixValCols; col++ )
                {
                    self->operator()(row,col) = d[col*fixValRows + row];
                }
            }
            return;
        }
    }
SWIGINTERN mxArray *iDynTree_MatrixFixSize_Sl_4_Sc_4_Sg__toMatlab(iDynTree::MatrixFixSize< 4,4 > const *self){
        mxArray *p  = mxCreateDoubleMatrix(self->rows(), self->cols(), mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        self->fillColMajorBuffer(d); // Column-major
        return p;
    }
SWIGINTERN void iDynTree_MatrixFixSize_Sl_4_Sc_4_Sg__fromMatlab(iDynTree::MatrixFixSize< 4,4 > *self,mxArray *in){
        // check size
        const size_t * dims = mxGetDimensions(in);
        int fixValRows = self->rows();
        int fixValCols = self->cols();
        if( dims[0] == fixValRows && dims[1] == fixValCols )
        {
            double* d = static_cast<double*>(mxGetData(in));
            double* selfData = self->data();
            for(int row=0; row < fixValRows; row++ )
            {
                for(int col=0; col < fixValCols; col++ )
                {
                    self->operator()(row,col) = d[col*fixValRows + row];
                }
            }
            return;
        }
    }
SWIGINTERN mxArray *iDynTree_MatrixFixSize_Sl_6_Sc_6_Sg__toMatlab(iDynTree::MatrixFixSize< 6,6 > const *self){
        mxArray *p  = mxCreateDoubleMatrix(self->rows(), self->cols(), mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        self->fillColMajorBuffer(d); // Column-major
        return p;
    }
SWIGINTERN void iDynTree_MatrixFixSize_Sl_6_Sc_6_Sg__fromMatlab(iDynTree::MatrixFixSize< 6,6 > *self,mxArray *in){
        // check size
        const size_t * dims = mxGetDimensions(in);
        int fixValRows = self->rows();
        int fixValCols = self->cols();
        if( dims[0] == fixValRows && dims[1] == fixValCols )
        {
            double* d = static_cast<double*>(mxGetData(in));
            double* selfData = self->data();
            for(int row=0; row < fixValRows; row++ )
            {
                for(int col=0; col < fixValCols; col++ )
                {
                    self->operator()(row,col) = d[col*fixValRows + row];
                }
            }
            return;
        }
    }
SWIGINTERN mxArray *iDynTree_MatrixFixSize_Sl_6_Sc_10_Sg__toMatlab(iDynTree::MatrixFixSize< 6,10 > const *self){
        mxArray *p  = mxCreateDoubleMatrix(self->rows(), self->cols(), mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        self->fillColMajorBuffer(d); // Column-major
        return p;
    }
SWIGINTERN void iDynTree_MatrixFixSize_Sl_6_Sc_10_Sg__fromMatlab(iDynTree::MatrixFixSize< 6,10 > *self,mxArray *in){
        // check size
        const size_t * dims = mxGetDimensions(in);
        int fixValRows = self->rows();
        int fixValCols = self->cols();
        if( dims[0] == fixValRows && dims[1] == fixValCols )
        {
            double* d = static_cast<double*>(mxGetData(in));
            double* selfData = self->data();
            for(int row=0; row < fixValRows; row++ )
            {
                for(int col=0; col < fixValCols; col++ )
                {
                    self->operator()(row,col) = d[col*fixValRows + row];
                }
            }
            return;
        }
    }
SWIGINTERN mxArray *iDynTree_VectorFixSize_Sl_3_Sg__toMatlab(iDynTree::VectorFixSize< 3 > const *self){
        mxArray *p  = mxCreateDoubleMatrix(self->size(), 1, mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        self->fillBuffer(d); // Column-major
        return p;
    }
SWIGINTERN void iDynTree_VectorFixSize_Sl_3_Sg__fromMatlab(iDynTree::VectorFixSize< 3 > *self,mxArray *in){
        // check size
        const size_t * dims = mxGetDimensions(in);
        int fixValSize = self->size();
        if( ( dims[0] == fixValSize && dims[1] == 1) ||
            ( dims[0] == 1 && dims[1] == fixValSize ) )
        {
            double* d = static_cast<double*>(mxGetData(in));
            double* selfData = self->data();
            for(int i=0; i < fixValSize; i++ )
            {
                selfData[i] = d[i];
            }
            return;
        }
    }
SWIGINTERN mxArray *iDynTree_VectorFixSize_Sl_6_Sg__toMatlab(iDynTree::VectorFixSize< 6 > const *self){
        mxArray *p  = mxCreateDoubleMatrix(self->size(), 1, mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        self->fillBuffer(d); // Column-major
        return p;
    }
SWIGINTERN void iDynTree_VectorFixSize_Sl_6_Sg__fromMatlab(iDynTree::VectorFixSize< 6 > *self,mxArray *in){
        // check size
        const size_t * dims = mxGetDimensions(in);
        int fixValSize = self->size();
        if( ( dims[0] == fixValSize && dims[1] == 1) ||
            ( dims[0] == 1 && dims[1] == fixValSize ) )
        {
            double* d = static_cast<double*>(mxGetData(in));
            double* selfData = self->data();
            for(int i=0; i < fixValSize; i++ )
            {
                selfData[i] = d[i];
            }
            return;
        }
    }
SWIGINTERN mxArray *iDynTree_VectorFixSize_Sl_10_Sg__toMatlab(iDynTree::VectorFixSize< 10 > const *self){
        mxArray *p  = mxCreateDoubleMatrix(self->size(), 1, mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        self->fillBuffer(d); // Column-major
        return p;
    }
SWIGINTERN void iDynTree_VectorFixSize_Sl_10_Sg__fromMatlab(iDynTree::VectorFixSize< 10 > *self,mxArray *in){
        // check size
        const size_t * dims = mxGetDimensions(in);
        int fixValSize = self->size();
        if( ( dims[0] == fixValSize && dims[1] == 1) ||
            ( dims[0] == 1 && dims[1] == fixValSize ) )
        {
            double* d = static_cast<double*>(mxGetData(in));
            double* selfData = self->data();
            for(int i=0; i < fixValSize; i++ )
            {
                selfData[i] = d[i];
            }
            return;
        }
    }

  SWIGINTERN int SWIG_AsVal_long (mxArray* pm, long* val)
    {
      if(mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      switch(mxGetClassID(pm)){
      case mxINT8_CLASS:
        if(val) *val = (long)(*(int8_T*)mxGetData(pm)); break;
      case mxUINT8_CLASS:
        if(val) *val = (long)(*(uint8_T*)mxGetData(pm)); break;
      case mxINT16_CLASS:
        if(val) *val = (long)(*(int16_T*)mxGetData(pm)); break;
      case mxUINT16_CLASS:
        if(val) *val = (long)(*(uint16_T*)mxGetData(pm)); break;
      case mxINT32_CLASS:
        if(val) *val = (long)(*(int32_T*)mxGetData(pm)); break;
      case mxUINT32_CLASS:
        if(val) *val = (long)(*(uint32_T*)mxGetData(pm)); break;
      case mxINT64_CLASS:
        if(val) *val = (long)(*(int64_T*)mxGetData(pm)); break;
      case mxUINT64_CLASS: 
        if(val) *val = (long)(*(uint64_T*)mxGetData(pm)); break;
      case mxDOUBLE_CLASS:
      {
	double v=mxGetScalar(pm);
	if(v!=floor(v)) return SWIG_TypeError;
        if(val) *val = (long)v;
        break;
      }
      default: return SWIG_TypeError;
      }
      return SWIG_OK;
    }


SWIGINTERN int
SWIG_AsVal_int (mxArray* obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


  SWIGINTERNINLINE mxArray* SWIG_From_long    (long value)
    {    
      mxArray* out = mxCreateNumericMatrix(1,1,mxINT64_CLASS,mxREAL);
      *((int64_T*)mxGetData(out)) = (int64_T)value;
      return out;
    }


SWIGINTERNINLINE mxArray*
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}

SWIGINTERN mxArray *iDynTree_SpatialVector_Sl_iDynTree_SpatialMotionVector_Sg__toMatlab(iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *self){
        mxArray *p  = mxCreateDoubleMatrix(6, 1, mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        for(unsigned int i=0; i < 6; i++ )
        {
            d[i] = self->operator()(i);
        }

        return p;
    }
SWIGINTERN void iDynTree_SpatialVector_Sl_iDynTree_SpatialMotionVector_Sg__fromMatlab(iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *self,mxArray *in){
        // check size
        const size_t * dims = mxGetDimensions(in);
        int fixValSize = self->size();
        if( ( dims[0] == fixValSize && dims[1] == 1) ||
            ( dims[0] == 1 && dims[1] == fixValSize ) )
        {
            double* d = static_cast<double*>(mxGetData(in));
            for(int i=0; i < fixValSize; i++ )
            {
                self->operator()(i) = d[i];
            }
            return;
        }
    }
SWIGINTERN mxArray *iDynTree_SpatialVector_Sl_iDynTree_SpatialForceVector_Sg__toMatlab(iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *self){
        mxArray *p  = mxCreateDoubleMatrix(6, 1, mxREAL);
        double* d = static_cast<double*>(mxGetData(p));
        for(unsigned int i=0; i < 6; i++ )
        {
            d[i] = self->operator()(i);
        }

        return p;
    }
SWIGINTERN void iDynTree_SpatialVector_Sl_iDynTree_SpatialForceVector_Sg__fromMatlab(iDynTree::SpatialVector< iDynTree::SpatialForceVector > *self,mxArray *in){
        // check size
        const size_t * dims = mxGetDimensions(in);
        int fixValSize = self->size();
        if( ( dims[0] == fixValSize && dims[1] == 1) ||
            ( dims[0] == 1 && dims[1] == fixValSize ) )
        {
            double* d = static_cast<double*>(mxGetData(in));
            for(int i=0; i < fixValSize; i++ )
            {
                self->operator()(i) = d[i];
            }
            return;
        }
    }

SWIGINTERN int
SWIG_AsCharPtrAndSize(mxArray* pm, char** cptr, size_t* psize, int *alloc)
{
  if(!mxIsChar(pm) || mxGetM(pm)!=1) return SWIG_TypeError;
  size_t len=mxGetN(pm);
  static char buf[256];
  int flag = mxGetString(pm,buf,(mwSize)sizeof(buf));
  if(flag) return SWIG_TypeError;

  if (alloc) {
    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), buf, sizeof(char)*(len + 1)));
    *alloc = SWIG_NEWOBJ;
  } else if (cptr)
    *cptr = buf;
  if (psize)
    *psize = len + 1;
  return SWIG_OK;
}


SWIGINTERN int
SWIG_AsPtr_std_string (mxArray* obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (mxArray* obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


SWIGINTERNINLINE mxArray*
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}

SWIGINTERN iDynTree::SixAxisForceTorqueSensor *iDynTree_SensorsList_getSixAxisForceTorqueSensor(iDynTree::SensorsList const *self,int sensor_index){
        iDynTree::SixAxisForceTorqueSensor* p =
            static_cast<iDynTree::SixAxisForceTorqueSensor*>(self->getSensor(iDynTree::SIX_AXIS_FORCE_TORQUE,sensor_index));
        return p;
    }

SWIGINTERN int
SWIG_AsVal_bool (mxArray* pm, bool *val)
{
   if(!mxIsLogicalScalar(pm)) return SWIG_TypeError;
   if (val) *val = mxIsLogicalScalarTrue(pm);
   return SWIG_OK;
}

int _wrap_delete_IMatrix (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IMatrix *arg1 = (iDynTree::IMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_IMatrix",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IMatrix, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMatrix" "', argument " "1"" of type '" "iDynTree::IMatrix *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IMatrix * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IMatrix_paren (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IMatrix *arg1 = (iDynTree::IMatrix *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("IMatrix_paren",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMatrix_paren" "', argument " "1"" of type '" "iDynTree::IMatrix *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IMatrix * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMatrix_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMatrix_paren" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double *) &(arg1)->operator ()(arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IMatrix_getVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IMatrix *arg1 = (iDynTree::IMatrix *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("IMatrix_getVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMatrix_getVal" "', argument " "1"" of type '" "iDynTree::IMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IMatrix * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMatrix_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMatrix_getVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double)((iDynTree::IMatrix const *)arg1)->getVal(arg2,arg3);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IMatrix_setVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IMatrix *arg1 = (iDynTree::IMatrix *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("IMatrix_setVal",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMatrix_setVal" "', argument " "1"" of type '" "iDynTree::IMatrix *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IMatrix * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMatrix_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMatrix_setVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMatrix_setVal" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (bool)(arg1)->setVal(arg2,arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IMatrix_rows (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IMatrix *arg1 = (iDynTree::IMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("IMatrix_rows",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMatrix_rows" "', argument " "1"" of type '" "iDynTree::IMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IMatrix * >(argp1);
  result = (unsigned int)((iDynTree::IMatrix const *)arg1)->rows();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IMatrix_cols (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IMatrix *arg1 = (iDynTree::IMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("IMatrix_cols",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMatrix_cols" "', argument " "1"" of type '" "iDynTree::IMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IMatrix * >(argp1);
  result = (unsigned int)((iDynTree::IMatrix const *)arg1)->cols();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_IRawMatrix (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IRawMatrix *arg1 = (iDynTree::IRawMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_IRawMatrix",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IRawMatrix, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IRawMatrix" "', argument " "1"" of type '" "iDynTree::IRawMatrix *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IRawMatrix * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IRawMatrix_data (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IRawMatrix *arg1 = (iDynTree::IRawMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("IRawMatrix_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IRawMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRawMatrix_data" "', argument " "1"" of type '" "iDynTree::IRawMatrix *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IRawMatrix * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_IVector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IVector *arg1 = (iDynTree::IVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_IVector",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IVector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IVector" "', argument " "1"" of type '" "iDynTree::IVector *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IVector * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IVector_paren (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IVector *arg1 = (iDynTree::IVector *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("IVector_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IVector_paren" "', argument " "1"" of type '" "iDynTree::IVector *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IVector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IVector_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IVector_getVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IVector *arg1 = (iDynTree::IVector *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("IVector_getVal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IVector_getVal" "', argument " "1"" of type '" "iDynTree::IVector const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IVector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IVector_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double)((iDynTree::IVector const *)arg1)->getVal(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IVector_setVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IVector *arg1 = (iDynTree::IVector *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("IVector_setVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IVector_setVal" "', argument " "1"" of type '" "iDynTree::IVector *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IVector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IVector_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IVector_setVal" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->setVal(arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IVector_size (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IVector *arg1 = (iDynTree::IVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("IVector_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IVector_size" "', argument " "1"" of type '" "iDynTree::IVector const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IVector * >(argp1);
  result = (unsigned int)((iDynTree::IVector const *)arg1)->size();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_IRawVector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IRawVector *arg1 = (iDynTree::IRawVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_IRawVector",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IRawVector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IRawVector" "', argument " "1"" of type '" "iDynTree::IRawVector *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IRawVector * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IRawVector_data (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IRawVector *arg1 = (iDynTree::IRawVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("IRawVector_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IRawVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRawVector_data" "', argument " "1"" of type '" "iDynTree::IRawVector *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IRawVector * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MatrixDynSize__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::MatrixDynSize *result = 0 ;
  
  if (!SWIG_check_num_args("new_MatrixDynSize",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::MatrixDynSize *)new iDynTree::MatrixDynSize();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixDynSize, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MatrixDynSize__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::MatrixDynSize *result = 0 ;
  
  if (!SWIG_check_num_args("new_MatrixDynSize",argc,2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MatrixDynSize" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MatrixDynSize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::MatrixDynSize *)new iDynTree::MatrixDynSize(arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixDynSize, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MatrixDynSize__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::MatrixDynSize *result = 0 ;
  
  if (!SWIG_check_num_args("new_MatrixDynSize",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MatrixDynSize" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MatrixDynSize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MatrixDynSize" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (iDynTree::MatrixDynSize *)new iDynTree::MatrixDynSize((double const *)arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixDynSize, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MatrixDynSize (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_MatrixDynSize__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MatrixDynSize__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_MatrixDynSize__SWIG_2(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_MatrixDynSize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::MatrixDynSize::MatrixDynSize()\n"
    "    iDynTree::MatrixDynSize::MatrixDynSize(unsigned int,unsigned int)\n"
    "    iDynTree::MatrixDynSize::MatrixDynSize(double const *,unsigned int const,unsigned int const)\n");
  return 1;
}


int _wrap_delete_MatrixDynSize (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_MatrixDynSize",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatrixDynSize" "', argument " "1"" of type '" "iDynTree::MatrixDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_paren (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("MatrixDynSize_paren",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_paren" "', argument " "1"" of type '" "iDynTree::MatrixDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixDynSize_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixDynSize_paren" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double *) &(arg1)->operator ()(arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_getVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("MatrixDynSize_getVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_getVal" "', argument " "1"" of type '" "iDynTree::MatrixDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixDynSize_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixDynSize_getVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double)((iDynTree::MatrixDynSize const *)arg1)->getVal(arg2,arg3);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_setVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("MatrixDynSize_setVal",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_setVal" "', argument " "1"" of type '" "iDynTree::MatrixDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixDynSize_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixDynSize_setVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MatrixDynSize_setVal" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (bool)(arg1)->setVal(arg2,arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_rows (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MatrixDynSize_rows",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_rows" "', argument " "1"" of type '" "iDynTree::MatrixDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  result = (unsigned int)((iDynTree::MatrixDynSize const *)arg1)->rows();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_cols (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MatrixDynSize_cols",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_cols" "', argument " "1"" of type '" "iDynTree::MatrixDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  result = (unsigned int)((iDynTree::MatrixDynSize const *)arg1)->cols();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_data (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("MatrixDynSize_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_data" "', argument " "1"" of type '" "iDynTree::MatrixDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_zero (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MatrixDynSize_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_zero" "', argument " "1"" of type '" "iDynTree::MatrixDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_resize (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MatrixDynSize_resize",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_resize" "', argument " "1"" of type '" "iDynTree::MatrixDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixDynSize_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixDynSize_resize" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  (arg1)->resize(arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_fillRowMajorBuffer (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MatrixDynSize_fillRowMajorBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_fillRowMajorBuffer" "', argument " "1"" of type '" "iDynTree::MatrixDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixDynSize_fillRowMajorBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::MatrixDynSize const *)arg1)->fillRowMajorBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_fillColMajorBuffer (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MatrixDynSize_fillColMajorBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_fillColMajorBuffer" "', argument " "1"" of type '" "iDynTree::MatrixDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixDynSize_fillColMajorBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::MatrixDynSize const *)arg1)->fillColMajorBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("MatrixDynSize_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_toString" "', argument " "1"" of type '" "iDynTree::MatrixDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  result = ((iDynTree::MatrixDynSize const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("MatrixDynSize_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_display" "', argument " "1"" of type '" "iDynTree::MatrixDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  result = ((iDynTree::MatrixDynSize const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatrixDynSize_toMatlab (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("MatrixDynSize_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_toMatlab" "', argument " "1"" of type '" "iDynTree::MatrixDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  result = (mxArray *)iDynTree_MatrixDynSize_toMatlab((iDynTree::MatrixDynSize const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_VectorDynSize__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::VectorDynSize *result = 0 ;
  
  if (!SWIG_check_num_args("new_VectorDynSize",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::VectorDynSize *)new iDynTree::VectorDynSize();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorDynSize, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_VectorDynSize__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::VectorDynSize *result = 0 ;
  
  if (!SWIG_check_num_args("new_VectorDynSize",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorDynSize" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (iDynTree::VectorDynSize *)new iDynTree::VectorDynSize(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorDynSize, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_VectorDynSize__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::VectorDynSize *result = 0 ;
  
  if (!SWIG_check_num_args("new_VectorDynSize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorDynSize" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VectorDynSize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::VectorDynSize *)new iDynTree::VectorDynSize((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorDynSize, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_VectorDynSize (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_VectorDynSize__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorDynSize__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_VectorDynSize__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_VectorDynSize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::VectorDynSize::VectorDynSize()\n"
    "    iDynTree::VectorDynSize::VectorDynSize(unsigned int)\n"
    "    iDynTree::VectorDynSize::VectorDynSize(double const *,unsigned int const)\n");
  return 1;
}


int _wrap_delete_VectorDynSize (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_VectorDynSize",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorDynSize" "', argument " "1"" of type '" "iDynTree::VectorDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_paren (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("VectorDynSize_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_paren" "', argument " "1"" of type '" "iDynTree::VectorDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDynSize_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_getVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("VectorDynSize_getVal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_getVal" "', argument " "1"" of type '" "iDynTree::VectorDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDynSize_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double)((iDynTree::VectorDynSize const *)arg1)->getVal(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_setVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("VectorDynSize_setVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_setVal" "', argument " "1"" of type '" "iDynTree::VectorDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDynSize_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorDynSize_setVal" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->setVal(arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_size (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("VectorDynSize_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_size" "', argument " "1"" of type '" "iDynTree::VectorDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  result = (unsigned int)((iDynTree::VectorDynSize const *)arg1)->size();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_data (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("VectorDynSize_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_data" "', argument " "1"" of type '" "iDynTree::VectorDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_zero (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorDynSize_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_zero" "', argument " "1"" of type '" "iDynTree::VectorDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_resize (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorDynSize_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_resize" "', argument " "1"" of type '" "iDynTree::VectorDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDynSize_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_fillBuffer (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorDynSize_fillBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_fillBuffer" "', argument " "1"" of type '" "iDynTree::VectorDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorDynSize_fillBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::VectorDynSize const *)arg1)->fillBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("VectorDynSize_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_toString" "', argument " "1"" of type '" "iDynTree::VectorDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  result = ((iDynTree::VectorDynSize const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("VectorDynSize_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_display" "', argument " "1"" of type '" "iDynTree::VectorDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  result = ((iDynTree::VectorDynSize const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_toMatlab (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("VectorDynSize_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_toMatlab" "', argument " "1"" of type '" "iDynTree::VectorDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  result = (mxArray *)iDynTree_VectorDynSize_toMatlab((iDynTree::VectorDynSize const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorDynSize_fromMatlab (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorDynSize_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_fromMatlab" "', argument " "1"" of type '" "iDynTree::VectorDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  arg2 = argv[1];
  iDynTree_VectorDynSize_fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix3x3__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::MatrixFixSize< 3,3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Matrix3x3",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::MatrixFixSize< 3,3 > *)new iDynTree::MatrixFixSize< 3,3 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix3x3__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::MatrixFixSize< 3,3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Matrix3x3",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Matrix3x3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Matrix3x3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Matrix3x3" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (iDynTree::MatrixFixSize< 3,3 > *)new iDynTree::MatrixFixSize< 3,3 >((double const *)arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix3x3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Matrix3x3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Matrix3x3__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Matrix3x3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::MatrixFixSize< 3,3 >::MatrixFixSize()\n"
    "    iDynTree::MatrixFixSize< 3,3 >::MatrixFixSize(double const *,unsigned int const,unsigned int const)\n");
  return 1;
}


int _wrap_delete_Matrix3x3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Matrix3x3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Matrix3x3" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix3x3_paren (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix3x3_paren",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3x3_paren" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix3x3_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix3x3_paren" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double *) &(arg1)->operator ()(arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix3x3_getVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Matrix3x3_getVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3x3_getVal" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix3x3_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix3x3_getVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double)((iDynTree::MatrixFixSize< 3,3 > const *)arg1)->getVal(arg2,arg3);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix3x3_setVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Matrix3x3_setVal",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3x3_setVal" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix3x3_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix3x3_setVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix3x3_setVal" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (bool)(arg1)->setVal(arg2,arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix3x3_rows (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Matrix3x3_rows",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3x3_rows" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  result = (unsigned int)((iDynTree::MatrixFixSize< 3,3 > const *)arg1)->rows();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix3x3_cols (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Matrix3x3_cols",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3x3_cols" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  result = (unsigned int)((iDynTree::MatrixFixSize< 3,3 > const *)arg1)->cols();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix3x3_data (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix3x3_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3x3_data" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix3x3_zero (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix3x3_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3x3_zero" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix3x3_fillRowMajorBuffer (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix3x3_fillRowMajorBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3x3_fillRowMajorBuffer" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix3x3_fillRowMajorBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::MatrixFixSize< 3,3 > const *)arg1)->fillRowMajorBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix3x3_fillColMajorBuffer (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix3x3_fillColMajorBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3x3_fillColMajorBuffer" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix3x3_fillColMajorBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::MatrixFixSize< 3,3 > const *)arg1)->fillColMajorBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix3x3_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Matrix3x3_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3x3_toString" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  result = ((iDynTree::MatrixFixSize< 3,3 > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix3x3_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Matrix3x3_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3x3_display" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  result = ((iDynTree::MatrixFixSize< 3,3 > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix3x3_toMatlab (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix3x3_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3x3_toMatlab" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  result = (mxArray *)iDynTree_MatrixFixSize_Sl_3_Sc_3_Sg__toMatlab((iDynTree::MatrixFixSize< 3,3 > const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix3x3_fromMatlab (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 3,3 > *arg1 = (iDynTree::MatrixFixSize< 3,3 > *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix3x3_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix3x3_fromMatlab" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 3,3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 3,3 > * >(argp1);
  arg2 = argv[1];
  iDynTree_MatrixFixSize_Sl_3_Sc_3_Sg__fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix4x4__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::MatrixFixSize< 4,4 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Matrix4x4",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::MatrixFixSize< 4,4 > *)new iDynTree::MatrixFixSize< 4,4 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix4x4__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::MatrixFixSize< 4,4 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Matrix4x4",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Matrix4x4" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Matrix4x4" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Matrix4x4" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (iDynTree::MatrixFixSize< 4,4 > *)new iDynTree::MatrixFixSize< 4,4 >((double const *)arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix4x4 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Matrix4x4__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Matrix4x4__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Matrix4x4'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::MatrixFixSize< 4,4 >::MatrixFixSize()\n"
    "    iDynTree::MatrixFixSize< 4,4 >::MatrixFixSize(double const *,unsigned int const,unsigned int const)\n");
  return 1;
}


int _wrap_delete_Matrix4x4 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Matrix4x4",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Matrix4x4" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix4x4_paren (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix4x4_paren",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix4x4_paren" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix4x4_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix4x4_paren" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double *) &(arg1)->operator ()(arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix4x4_getVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Matrix4x4_getVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix4x4_getVal" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix4x4_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix4x4_getVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double)((iDynTree::MatrixFixSize< 4,4 > const *)arg1)->getVal(arg2,arg3);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix4x4_setVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Matrix4x4_setVal",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix4x4_setVal" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix4x4_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix4x4_setVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix4x4_setVal" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (bool)(arg1)->setVal(arg2,arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix4x4_rows (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Matrix4x4_rows",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix4x4_rows" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  result = (unsigned int)((iDynTree::MatrixFixSize< 4,4 > const *)arg1)->rows();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix4x4_cols (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Matrix4x4_cols",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix4x4_cols" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  result = (unsigned int)((iDynTree::MatrixFixSize< 4,4 > const *)arg1)->cols();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix4x4_data (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix4x4_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix4x4_data" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix4x4_zero (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix4x4_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix4x4_zero" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix4x4_fillRowMajorBuffer (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix4x4_fillRowMajorBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix4x4_fillRowMajorBuffer" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix4x4_fillRowMajorBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::MatrixFixSize< 4,4 > const *)arg1)->fillRowMajorBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix4x4_fillColMajorBuffer (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix4x4_fillColMajorBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix4x4_fillColMajorBuffer" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix4x4_fillColMajorBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::MatrixFixSize< 4,4 > const *)arg1)->fillColMajorBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix4x4_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Matrix4x4_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix4x4_toString" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  result = ((iDynTree::MatrixFixSize< 4,4 > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix4x4_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Matrix4x4_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix4x4_display" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  result = ((iDynTree::MatrixFixSize< 4,4 > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix4x4_toMatlab (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix4x4_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix4x4_toMatlab" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  result = (mxArray *)iDynTree_MatrixFixSize_Sl_4_Sc_4_Sg__toMatlab((iDynTree::MatrixFixSize< 4,4 > const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix4x4_fromMatlab (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 4,4 > *arg1 = (iDynTree::MatrixFixSize< 4,4 > *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix4x4_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix4x4_fromMatlab" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 4,4 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 4,4 > * >(argp1);
  arg2 = argv[1];
  iDynTree_MatrixFixSize_Sl_4_Sc_4_Sg__fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix6x6__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::MatrixFixSize< 6,6 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Matrix6x6",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::MatrixFixSize< 6,6 > *)new iDynTree::MatrixFixSize< 6,6 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix6x6__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::MatrixFixSize< 6,6 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Matrix6x6",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Matrix6x6" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Matrix6x6" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Matrix6x6" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (iDynTree::MatrixFixSize< 6,6 > *)new iDynTree::MatrixFixSize< 6,6 >((double const *)arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix6x6 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Matrix6x6__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Matrix6x6__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Matrix6x6'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::MatrixFixSize< 6,6 >::MatrixFixSize()\n"
    "    iDynTree::MatrixFixSize< 6,6 >::MatrixFixSize(double const *,unsigned int const,unsigned int const)\n");
  return 1;
}


int _wrap_delete_Matrix6x6 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Matrix6x6",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Matrix6x6" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x6_paren (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix6x6_paren",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x6_paren" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix6x6_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix6x6_paren" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double *) &(arg1)->operator ()(arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x6_getVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Matrix6x6_getVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x6_getVal" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix6x6_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix6x6_getVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double)((iDynTree::MatrixFixSize< 6,6 > const *)arg1)->getVal(arg2,arg3);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x6_setVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Matrix6x6_setVal",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x6_setVal" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix6x6_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix6x6_setVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix6x6_setVal" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (bool)(arg1)->setVal(arg2,arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x6_rows (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Matrix6x6_rows",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x6_rows" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  result = (unsigned int)((iDynTree::MatrixFixSize< 6,6 > const *)arg1)->rows();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x6_cols (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Matrix6x6_cols",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x6_cols" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  result = (unsigned int)((iDynTree::MatrixFixSize< 6,6 > const *)arg1)->cols();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x6_data (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix6x6_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x6_data" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x6_zero (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix6x6_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x6_zero" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x6_fillRowMajorBuffer (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix6x6_fillRowMajorBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x6_fillRowMajorBuffer" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix6x6_fillRowMajorBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::MatrixFixSize< 6,6 > const *)arg1)->fillRowMajorBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x6_fillColMajorBuffer (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix6x6_fillColMajorBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x6_fillColMajorBuffer" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix6x6_fillColMajorBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::MatrixFixSize< 6,6 > const *)arg1)->fillColMajorBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x6_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Matrix6x6_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x6_toString" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  result = ((iDynTree::MatrixFixSize< 6,6 > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x6_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Matrix6x6_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x6_display" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  result = ((iDynTree::MatrixFixSize< 6,6 > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x6_toMatlab (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix6x6_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x6_toMatlab" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  result = (mxArray *)iDynTree_MatrixFixSize_Sl_6_Sc_6_Sg__toMatlab((iDynTree::MatrixFixSize< 6,6 > const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x6_fromMatlab (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,6 > *arg1 = (iDynTree::MatrixFixSize< 6,6 > *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix6x6_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x6_fromMatlab" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,6 > * >(argp1);
  arg2 = argv[1];
  iDynTree_MatrixFixSize_Sl_6_Sc_6_Sg__fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix6x10__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::MatrixFixSize< 6,10 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Matrix6x10",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::MatrixFixSize< 6,10 > *)new iDynTree::MatrixFixSize< 6,10 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix6x10__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::MatrixFixSize< 6,10 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Matrix6x10",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Matrix6x10" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Matrix6x10" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Matrix6x10" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (iDynTree::MatrixFixSize< 6,10 > *)new iDynTree::MatrixFixSize< 6,10 >((double const *)arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Matrix6x10 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Matrix6x10__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Matrix6x10__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Matrix6x10'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::MatrixFixSize< 6,10 >::MatrixFixSize()\n"
    "    iDynTree::MatrixFixSize< 6,10 >::MatrixFixSize(double const *,unsigned int const,unsigned int const)\n");
  return 1;
}


int _wrap_delete_Matrix6x10 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Matrix6x10",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Matrix6x10" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x10_paren (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix6x10_paren",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x10_paren" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix6x10_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix6x10_paren" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double *) &(arg1)->operator ()(arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x10_getVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Matrix6x10_getVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x10_getVal" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix6x10_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix6x10_getVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double)((iDynTree::MatrixFixSize< 6,10 > const *)arg1)->getVal(arg2,arg3);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x10_setVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Matrix6x10_setVal",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x10_setVal" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix6x10_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix6x10_setVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix6x10_setVal" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (bool)(arg1)->setVal(arg2,arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x10_rows (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Matrix6x10_rows",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x10_rows" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  result = (unsigned int)((iDynTree::MatrixFixSize< 6,10 > const *)arg1)->rows();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x10_cols (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Matrix6x10_cols",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x10_cols" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  result = (unsigned int)((iDynTree::MatrixFixSize< 6,10 > const *)arg1)->cols();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x10_data (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix6x10_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x10_data" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x10_zero (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix6x10_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x10_zero" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x10_fillRowMajorBuffer (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix6x10_fillRowMajorBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x10_fillRowMajorBuffer" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix6x10_fillRowMajorBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::MatrixFixSize< 6,10 > const *)arg1)->fillRowMajorBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x10_fillColMajorBuffer (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix6x10_fillColMajorBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x10_fillColMajorBuffer" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix6x10_fillColMajorBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::MatrixFixSize< 6,10 > const *)arg1)->fillColMajorBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x10_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Matrix6x10_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x10_toString" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  result = ((iDynTree::MatrixFixSize< 6,10 > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x10_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Matrix6x10_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x10_display" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  result = ((iDynTree::MatrixFixSize< 6,10 > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x10_toMatlab (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("Matrix6x10_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x10_toMatlab" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  result = (mxArray *)iDynTree_MatrixFixSize_Sl_6_Sc_10_Sg__toMatlab((iDynTree::MatrixFixSize< 6,10 > const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Matrix6x10_fromMatlab (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixFixSize< 6,10 > *arg1 = (iDynTree::MatrixFixSize< 6,10 > *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Matrix6x10_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix6x10_fromMatlab" "', argument " "1"" of type '" "iDynTree::MatrixFixSize< 6,10 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixFixSize< 6,10 > * >(argp1);
  arg2 = argv[1];
  iDynTree_MatrixFixSize_Sl_6_Sc_10_Sg__fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Vector3__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::VectorFixSize< 3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Vector3",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::VectorFixSize< 3 > *)new iDynTree::VectorFixSize< 3 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Vector3__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::VectorFixSize< 3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Vector3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vector3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vector3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::VectorFixSize< 3 > *)new iDynTree::VectorFixSize< 3 >((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Vector3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Vector3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Vector3__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Vector3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::VectorFixSize< 3 >::VectorFixSize()\n"
    "    iDynTree::VectorFixSize< 3 >::VectorFixSize(double const *,unsigned int const)\n");
  return 1;
}


int _wrap_delete_Vector3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 3 > *arg1 = (iDynTree::VectorFixSize< 3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Vector3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Vector3" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 3 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector3_paren (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 3 > *arg1 = (iDynTree::VectorFixSize< 3 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Vector3_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_paren" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 3 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector3_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector3_getVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 3 > *arg1 = (iDynTree::VectorFixSize< 3 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Vector3_getVal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_getVal" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 3 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector3_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double)((iDynTree::VectorFixSize< 3 > const *)arg1)->getVal(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector3_setVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 3 > *arg1 = (iDynTree::VectorFixSize< 3 > *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Vector3_setVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_setVal" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 3 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector3_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector3_setVal" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->setVal(arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector3_size (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 3 > *arg1 = (iDynTree::VectorFixSize< 3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Vector3_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_size" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 3 > * >(argp1);
  result = (unsigned int)((iDynTree::VectorFixSize< 3 > const *)arg1)->size();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector3_data (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 3 > *arg1 = (iDynTree::VectorFixSize< 3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Vector3_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_data" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 3 > * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector3_zero (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 3 > *arg1 = (iDynTree::VectorFixSize< 3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Vector3_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_zero" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 3 > * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector3_fillBuffer (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 3 > *arg1 = (iDynTree::VectorFixSize< 3 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Vector3_fillBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_fillBuffer" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector3_fillBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::VectorFixSize< 3 > const *)arg1)->fillBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector3_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 3 > *arg1 = (iDynTree::VectorFixSize< 3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Vector3_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_toString" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 3 > * >(argp1);
  result = ((iDynTree::VectorFixSize< 3 > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector3_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 3 > *arg1 = (iDynTree::VectorFixSize< 3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Vector3_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_display" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 3 > * >(argp1);
  result = ((iDynTree::VectorFixSize< 3 > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector3_toMatlab (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 3 > *arg1 = (iDynTree::VectorFixSize< 3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("Vector3_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_toMatlab" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 3 > * >(argp1);
  result = (mxArray *)iDynTree_VectorFixSize_Sl_3_Sg__toMatlab((iDynTree::VectorFixSize< 3 > const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector3_fromMatlab (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 3 > *arg1 = (iDynTree::VectorFixSize< 3 > *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Vector3_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector3_fromMatlab" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 3 > * >(argp1);
  arg2 = argv[1];
  iDynTree_VectorFixSize_Sl_3_Sg__fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Vector6__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::VectorFixSize< 6 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Vector6",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::VectorFixSize< 6 > *)new iDynTree::VectorFixSize< 6 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Vector6__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::VectorFixSize< 6 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Vector6",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vector6" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vector6" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::VectorFixSize< 6 > *)new iDynTree::VectorFixSize< 6 >((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Vector6 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Vector6__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Vector6__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Vector6'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::VectorFixSize< 6 >::VectorFixSize()\n"
    "    iDynTree::VectorFixSize< 6 >::VectorFixSize(double const *,unsigned int const)\n");
  return 1;
}


int _wrap_delete_Vector6 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 6 > *arg1 = (iDynTree::VectorFixSize< 6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Vector6",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Vector6" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 6 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector6_paren (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 6 > *arg1 = (iDynTree::VectorFixSize< 6 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Vector6_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_paren" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 6 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector6_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector6_getVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 6 > *arg1 = (iDynTree::VectorFixSize< 6 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Vector6_getVal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_getVal" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 6 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector6_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double)((iDynTree::VectorFixSize< 6 > const *)arg1)->getVal(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector6_setVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 6 > *arg1 = (iDynTree::VectorFixSize< 6 > *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Vector6_setVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_setVal" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 6 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector6_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector6_setVal" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->setVal(arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector6_size (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 6 > *arg1 = (iDynTree::VectorFixSize< 6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Vector6_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_size" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 6 > * >(argp1);
  result = (unsigned int)((iDynTree::VectorFixSize< 6 > const *)arg1)->size();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector6_data (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 6 > *arg1 = (iDynTree::VectorFixSize< 6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Vector6_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_data" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 6 > * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector6_zero (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 6 > *arg1 = (iDynTree::VectorFixSize< 6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Vector6_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_zero" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 6 > * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector6_fillBuffer (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 6 > *arg1 = (iDynTree::VectorFixSize< 6 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Vector6_fillBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_fillBuffer" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 6 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector6_fillBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::VectorFixSize< 6 > const *)arg1)->fillBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector6_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 6 > *arg1 = (iDynTree::VectorFixSize< 6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Vector6_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_toString" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 6 > * >(argp1);
  result = ((iDynTree::VectorFixSize< 6 > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector6_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 6 > *arg1 = (iDynTree::VectorFixSize< 6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Vector6_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_display" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 6 > * >(argp1);
  result = ((iDynTree::VectorFixSize< 6 > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector6_toMatlab (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 6 > *arg1 = (iDynTree::VectorFixSize< 6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("Vector6_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_toMatlab" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 6 > * >(argp1);
  result = (mxArray *)iDynTree_VectorFixSize_Sl_6_Sg__toMatlab((iDynTree::VectorFixSize< 6 > const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector6_fromMatlab (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 6 > *arg1 = (iDynTree::VectorFixSize< 6 > *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Vector6_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_fromMatlab" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 6 > * >(argp1);
  arg2 = argv[1];
  iDynTree_VectorFixSize_Sl_6_Sg__fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Vector10__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::VectorFixSize< 10 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Vector10",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::VectorFixSize< 10 > *)new iDynTree::VectorFixSize< 10 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Vector10__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::VectorFixSize< 10 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_Vector10",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vector10" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vector10" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::VectorFixSize< 10 > *)new iDynTree::VectorFixSize< 10 >((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Vector10 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Vector10__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Vector10__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Vector10'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::VectorFixSize< 10 >::VectorFixSize()\n"
    "    iDynTree::VectorFixSize< 10 >::VectorFixSize(double const *,unsigned int const)\n");
  return 1;
}


int _wrap_delete_Vector10 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 10 > *arg1 = (iDynTree::VectorFixSize< 10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Vector10",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Vector10" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 10 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 10 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector10_paren (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 10 > *arg1 = (iDynTree::VectorFixSize< 10 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Vector10_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector10_paren" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 10 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 10 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector10_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector10_getVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 10 > *arg1 = (iDynTree::VectorFixSize< 10 > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Vector10_getVal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector10_getVal" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 10 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector10_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double)((iDynTree::VectorFixSize< 10 > const *)arg1)->getVal(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector10_setVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 10 > *arg1 = (iDynTree::VectorFixSize< 10 > *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Vector10_setVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector10_setVal" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 10 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 10 > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector10_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector10_setVal" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->setVal(arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector10_size (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 10 > *arg1 = (iDynTree::VectorFixSize< 10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Vector10_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector10_size" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 10 > * >(argp1);
  result = (unsigned int)((iDynTree::VectorFixSize< 10 > const *)arg1)->size();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector10_data (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 10 > *arg1 = (iDynTree::VectorFixSize< 10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Vector10_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector10_data" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 10 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 10 > * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector10_zero (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 10 > *arg1 = (iDynTree::VectorFixSize< 10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Vector10_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector10_zero" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 10 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 10 > * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector10_fillBuffer (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 10 > *arg1 = (iDynTree::VectorFixSize< 10 > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Vector10_fillBuffer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector10_fillBuffer" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 10 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector10_fillBuffer" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ((iDynTree::VectorFixSize< 10 > const *)arg1)->fillBuffer(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector10_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 10 > *arg1 = (iDynTree::VectorFixSize< 10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Vector10_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector10_toString" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 10 > * >(argp1);
  result = ((iDynTree::VectorFixSize< 10 > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector10_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 10 > *arg1 = (iDynTree::VectorFixSize< 10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Vector10_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector10_display" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 10 > * >(argp1);
  result = ((iDynTree::VectorFixSize< 10 > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector10_toMatlab (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 10 > *arg1 = (iDynTree::VectorFixSize< 10 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("Vector10_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector10_toMatlab" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 10 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 10 > * >(argp1);
  result = (mxArray *)iDynTree_VectorFixSize_Sl_10_Sg__toMatlab((iDynTree::VectorFixSize< 10 > const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Vector10_fromMatlab (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorFixSize< 10 > *arg1 = (iDynTree::VectorFixSize< 10 > *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Vector10_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorFixSizeT_10_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector10_fromMatlab" "', argument " "1"" of type '" "iDynTree::VectorFixSize< 10 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorFixSize< 10 > * >(argp1);
  arg2 = argv[1];
  iDynTree_VectorFixSize_Sl_10_Sg__fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_PositionRaw__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::PositionRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_PositionRaw",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::PositionRaw *)new iDynTree::PositionRaw();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_PositionRaw__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_PositionRaw",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PositionRaw" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PositionRaw" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PositionRaw" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (iDynTree::PositionRaw *)new iDynTree::PositionRaw(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_PositionRaw__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_PositionRaw",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PositionRaw" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PositionRaw" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::PositionRaw *)new iDynTree::PositionRaw((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_PositionRaw__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_PositionRaw",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PositionRaw" "', argument " "1"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PositionRaw" "', argument " "1"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  result = (iDynTree::PositionRaw *)new iDynTree::PositionRaw((iDynTree::PositionRaw const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_PositionRaw (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_PositionRaw__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__PositionRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PositionRaw__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_PositionRaw__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_PositionRaw__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_PositionRaw'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::PositionRaw::PositionRaw()\n"
    "    iDynTree::PositionRaw::PositionRaw(double,double,double)\n"
    "    iDynTree::PositionRaw::PositionRaw(double const *,unsigned int const)\n"
    "    iDynTree::PositionRaw::PositionRaw(iDynTree::PositionRaw const &)\n");
  return 1;
}


int _wrap_delete_PositionRaw (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_PositionRaw",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PositionRaw" "', argument " "1"" of type '" "iDynTree::PositionRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionRaw_changePoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  iDynTree::PositionRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw *result = 0 ;
  
  if (!SWIG_check_num_args("PositionRaw_changePoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_changePoint" "', argument " "1"" of type '" "iDynTree::PositionRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionRaw_changePoint" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionRaw_changePoint" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionRaw * >(argp2);
  result = (iDynTree::PositionRaw *) &(arg1)->changePoint((iDynTree::PositionRaw const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionRaw_changeRefPoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  iDynTree::PositionRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw *result = 0 ;
  
  if (!SWIG_check_num_args("PositionRaw_changeRefPoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_changeRefPoint" "', argument " "1"" of type '" "iDynTree::PositionRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionRaw_changeRefPoint" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionRaw_changeRefPoint" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionRaw * >(argp2);
  result = (iDynTree::PositionRaw *) &(arg1)->changeRefPoint((iDynTree::PositionRaw const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionRaw_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = 0 ;
  iDynTree::PositionRaw *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw result;
  
  if (!SWIG_check_num_args("PositionRaw_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_compose" "', argument " "1"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionRaw_compose" "', argument " "1"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionRaw_compose" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionRaw_compose" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionRaw * >(argp2);
  result = iDynTree::PositionRaw::compose((iDynTree::PositionRaw const &)*arg1,(iDynTree::PositionRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::PositionRaw(static_cast< const iDynTree::PositionRaw& >(result))), SWIGTYPE_p_iDynTree__PositionRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionRaw_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw result;
  
  if (!SWIG_check_num_args("PositionRaw_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_inverse" "', argument " "1"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionRaw_inverse" "', argument " "1"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  result = iDynTree::PositionRaw::inverse((iDynTree::PositionRaw const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::PositionRaw(static_cast< const iDynTree::PositionRaw& >(result))), SWIGTYPE_p_iDynTree__PositionRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionRaw_changePointOf__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  iDynTree::SpatialMotionVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("PositionRaw_changePointOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_changePointOf" "', argument " "1"" of type '" "iDynTree::PositionRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionRaw_changePointOf" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionRaw_changePointOf" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp2);
  result = ((iDynTree::PositionRaw const *)arg1)->changePointOf((iDynTree::SpatialMotionVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionRaw_changePointOf__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  iDynTree::SpatialForceVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("PositionRaw_changePointOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_changePointOf" "', argument " "1"" of type '" "iDynTree::PositionRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionRaw_changePointOf" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionRaw_changePointOf" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp2);
  result = ((iDynTree::PositionRaw const *)arg1)->changePointOf((iDynTree::SpatialForceVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionRaw_changePointOf (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__PositionRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PositionRaw_changePointOf__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__PositionRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialForceVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PositionRaw_changePointOf__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'PositionRaw_changePointOf'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::PositionRaw::changePointOf(iDynTree::SpatialMotionVector const &) const\n"
    "    iDynTree::PositionRaw::changePointOf(iDynTree::SpatialForceVector const &) const\n");
  return 1;
}


int _wrap_PositionRaw_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("PositionRaw_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_toString" "', argument " "1"" of type '" "iDynTree::PositionRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  result = ((iDynTree::PositionRaw const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionRaw_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("PositionRaw_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_display" "', argument " "1"" of type '" "iDynTree::PositionRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  result = ((iDynTree::PositionRaw const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_PositionSemantics__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::PositionSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_PositionSemantics",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::PositionSemantics *)new iDynTree::PositionSemantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionSemantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_PositionSemantics__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  mxArray * _out;
  iDynTree::PositionSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_PositionSemantics",argc,5,5,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PositionSemantics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PositionSemantics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PositionSemantics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_PositionSemantics" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_PositionSemantics" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (iDynTree::PositionSemantics *)new iDynTree::PositionSemantics(arg1,arg2,arg3,arg4,arg5);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionSemantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_PositionSemantics__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::PositionSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_PositionSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PositionSemantics" "', argument " "1"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PositionSemantics" "', argument " "1"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  result = (iDynTree::PositionSemantics *)new iDynTree::PositionSemantics((iDynTree::PositionSemantics const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionSemantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_PositionSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_PositionSemantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__PositionSemantics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PositionSemantics__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_PositionSemantics__SWIG_1(resc,resv,argc,argv);
            }
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_PositionSemantics'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::PositionSemantics::PositionSemantics()\n"
    "    iDynTree::PositionSemantics::PositionSemantics(int,int,int,int,int)\n"
    "    iDynTree::PositionSemantics::PositionSemantics(iDynTree::PositionSemantics const &)\n");
  return 1;
}


int _wrap_delete_PositionSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_PositionSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PositionSemantics" "', argument " "1"" of type '" "iDynTree::PositionSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_getPoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("PositionSemantics_getPoint",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_getPoint" "', argument " "1"" of type '" "iDynTree::PositionSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  result = (int)((iDynTree::PositionSemantics const *)arg1)->getPoint();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_getBody (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("PositionSemantics_getBody",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_getBody" "', argument " "1"" of type '" "iDynTree::PositionSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  result = (int)((iDynTree::PositionSemantics const *)arg1)->getBody();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_getReferencePoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("PositionSemantics_getReferencePoint",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_getReferencePoint" "', argument " "1"" of type '" "iDynTree::PositionSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  result = (int)((iDynTree::PositionSemantics const *)arg1)->getReferencePoint();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_getRefBody (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("PositionSemantics_getRefBody",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_getRefBody" "', argument " "1"" of type '" "iDynTree::PositionSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  result = (int)((iDynTree::PositionSemantics const *)arg1)->getRefBody();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_getCoordinateFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("PositionSemantics_getCoordinateFrame",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_getCoordinateFrame" "', argument " "1"" of type '" "iDynTree::PositionSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  result = (int)((iDynTree::PositionSemantics const *)arg1)->getCoordinateFrame();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_setPoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PositionSemantics_setPoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_setPoint" "', argument " "1"" of type '" "iDynTree::PositionSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionSemantics_setPoint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setPoint(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_setBody (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PositionSemantics_setBody",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_setBody" "', argument " "1"" of type '" "iDynTree::PositionSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionSemantics_setBody" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setBody(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_setReferencePoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PositionSemantics_setReferencePoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_setReferencePoint" "', argument " "1"" of type '" "iDynTree::PositionSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionSemantics_setReferencePoint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setReferencePoint(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_setRefBody (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PositionSemantics_setRefBody",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_setRefBody" "', argument " "1"" of type '" "iDynTree::PositionSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionSemantics_setRefBody" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setRefBody(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_setCoordinateFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PositionSemantics_setCoordinateFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_setCoordinateFrame" "', argument " "1"" of type '" "iDynTree::PositionSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionSemantics_setCoordinateFrame" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setCoordinateFrame(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_changePoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  iDynTree::PositionSemantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("PositionSemantics_changePoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_changePoint" "', argument " "1"" of type '" "iDynTree::PositionSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionSemantics_changePoint" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionSemantics_changePoint" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionSemantics * >(argp2);
  result = (bool)(arg1)->changePoint((iDynTree::PositionSemantics const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_changeRefPoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  iDynTree::PositionSemantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("PositionSemantics_changeRefPoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_changeRefPoint" "', argument " "1"" of type '" "iDynTree::PositionSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionSemantics_changeRefPoint" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionSemantics_changeRefPoint" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionSemantics * >(argp2);
  result = (bool)(arg1)->changeRefPoint((iDynTree::PositionSemantics const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = 0 ;
  iDynTree::PositionSemantics *arg2 = 0 ;
  iDynTree::PositionSemantics *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("PositionSemantics_compose",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_compose" "', argument " "1"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionSemantics_compose" "', argument " "1"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionSemantics_compose" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionSemantics_compose" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionSemantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PositionSemantics_compose" "', argument " "3"" of type '" "iDynTree::PositionSemantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionSemantics_compose" "', argument " "3"" of type '" "iDynTree::PositionSemantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::PositionSemantics * >(argp3);
  result = (bool)iDynTree::PositionSemantics::compose((iDynTree::PositionSemantics const &)*arg1,(iDynTree::PositionSemantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = 0 ;
  iDynTree::PositionSemantics *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("PositionSemantics_inverse",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_inverse" "', argument " "1"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionSemantics_inverse" "', argument " "1"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionSemantics_inverse" "', argument " "2"" of type '" "iDynTree::PositionSemantics &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionSemantics_inverse" "', argument " "2"" of type '" "iDynTree::PositionSemantics &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionSemantics * >(argp2);
  result = (bool)iDynTree::PositionSemantics::inverse((iDynTree::PositionSemantics const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("PositionSemantics_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_toString" "', argument " "1"" of type '" "iDynTree::PositionSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  result = ((iDynTree::PositionSemantics const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PositionSemantics_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("PositionSemantics_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_display" "', argument " "1"" of type '" "iDynTree::PositionSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  result = ((iDynTree::PositionSemantics const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Position__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("new_Position",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::Position *)new iDynTree::Position();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Position__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("new_Position",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Position" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Position" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Position" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (iDynTree::Position *)new iDynTree::Position(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Position__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("new_Position",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Position" "', argument " "1"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Position" "', argument " "1"" of type '" "iDynTree::Position const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  result = (iDynTree::Position *)new iDynTree::Position((iDynTree::Position const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Position__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("new_Position",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Position" "', argument " "1"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Position" "', argument " "1"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  result = (iDynTree::Position *)new iDynTree::Position((iDynTree::PositionRaw const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Position (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Position__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Position__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__PositionRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Position__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Position__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Position'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Position::Position()\n"
    "    iDynTree::Position::Position(double,double,double)\n"
    "    iDynTree::Position::Position(iDynTree::Position const &)\n"
    "    iDynTree::Position::Position(iDynTree::PositionRaw const &)\n");
  return 1;
}


int _wrap_delete_Position (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Position",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Position" "', argument " "1"" of type '" "iDynTree::Position *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_getSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::PositionSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("Position_getSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_getSemantics" "', argument " "1"" of type '" "iDynTree::Position *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  result = (iDynTree::PositionSemantics *) &(arg1)->getSemantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_changePoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("Position_changePoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_changePoint" "', argument " "1"" of type '" "iDynTree::Position *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_changePoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_changePoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = (iDynTree::Position *) &(arg1)->changePoint((iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_changeRefPoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("Position_changeRefPoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_changeRefPoint" "', argument " "1"" of type '" "iDynTree::Position *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_changeRefPoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_changeRefPoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = (iDynTree::Position *) &(arg1)->changeRefPoint((iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_changeCoordinateFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("Position_changeCoordinateFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_changeCoordinateFrame" "', argument " "1"" of type '" "iDynTree::Position *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_changeCoordinateFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_changeCoordinateFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = (iDynTree::Position *) &(arg1)->changeCoordinateFrame((iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Position_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_compose" "', argument " "1"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_compose" "', argument " "1"" of type '" "iDynTree::Position const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_compose" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_compose" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = iDynTree::Position::compose((iDynTree::Position const &)*arg1,(iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Position_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_inverse" "', argument " "1"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_inverse" "', argument " "1"" of type '" "iDynTree::Position const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  result = iDynTree::Position::inverse((iDynTree::Position const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_changePointOf__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::SpatialMotionVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("Position_changePointOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_changePointOf" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_changePointOf" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_changePointOf" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp2);
  result = ((iDynTree::Position const *)arg1)->changePointOf((iDynTree::SpatialMotionVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_changePointOf__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::SpatialForceVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("Position_changePointOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_changePointOf" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_changePointOf" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_changePointOf" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp2);
  result = ((iDynTree::Position const *)arg1)->changePointOf((iDynTree::SpatialForceVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_changePointOf__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::Twist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("Position_changePointOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_changePointOf" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_changePointOf" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_changePointOf" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Twist * >(argp2);
  result = ((iDynTree::Position const *)arg1)->changePointOf((iDynTree::Twist const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_changePointOf__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::SpatialAcc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("Position_changePointOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_changePointOf" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_changePointOf" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_changePointOf" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialAcc * >(argp2);
  result = ((iDynTree::Position const *)arg1)->changePointOf((iDynTree::SpatialAcc const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_changePointOf__SWIG_4 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::SpatialMomentum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMomentum result;
  
  if (!SWIG_check_num_args("Position_changePointOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_changePointOf" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMomentum,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_changePointOf" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_changePointOf" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp2);
  result = ((iDynTree::Position const *)arg1)->changePointOf((iDynTree::SpatialMomentum const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMomentum(static_cast< const iDynTree::SpatialMomentum& >(result))), SWIGTYPE_p_iDynTree__SpatialMomentum, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_changePointOf__SWIG_5 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::Wrench *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench result;
  
  if (!SWIG_check_num_args("Position_changePointOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_changePointOf" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_changePointOf" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_changePointOf" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Wrench * >(argp2);
  result = ((iDynTree::Position const *)arg1)->changePointOf((iDynTree::Wrench const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Wrench(static_cast< const iDynTree::Wrench& >(result))), SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_changePointOf (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Position_changePointOf__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMomentum, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Position_changePointOf__SWIG_4(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialAcc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Position_changePointOf__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Position_changePointOf__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Wrench, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Position_changePointOf__SWIG_5(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialForceVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Position_changePointOf__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Position_changePointOf'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Position::changePointOf(iDynTree::SpatialMotionVector const &) const\n"
    "    iDynTree::Position::changePointOf(iDynTree::SpatialForceVector const &) const\n"
    "    iDynTree::Position::changePointOf(iDynTree::Twist const &) const\n"
    "    iDynTree::Position::changePointOf(iDynTree::SpatialAcc const &) const\n"
    "    iDynTree::Position::changePointOf(iDynTree::SpatialMomentum const &) const\n"
    "    iDynTree::Position::changePointOf(iDynTree::Wrench const &) const\n");
  return 1;
}


int _wrap_Position_plus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Position_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_plus" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_plus" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_plus" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = ((iDynTree::Position const *)arg1)->operator +((iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_minus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Position_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_minus" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_minus" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_minus" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = ((iDynTree::Position const *)arg1)->operator -((iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_uminus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Position_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_uminus" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  result = ((iDynTree::Position const *)arg1)->operator -();
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_mtimes__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::Twist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("Position_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_mtimes" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_mtimes" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_mtimes" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Twist * >(argp2);
  result = ((iDynTree::Position const *)arg1)->operator *((iDynTree::Twist const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_mtimes__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::SpatialForceVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("Position_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_mtimes" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp2);
  result = ((iDynTree::Position const *)arg1)->operator *((iDynTree::SpatialForceVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_mtimes__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::SpatialAcc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("Position_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_mtimes" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialAcc * >(argp2);
  result = ((iDynTree::Position const *)arg1)->operator *((iDynTree::SpatialAcc const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_mtimes__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::SpatialMomentum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMomentum result;
  
  if (!SWIG_check_num_args("Position_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_mtimes" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMomentum,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp2);
  result = ((iDynTree::Position const *)arg1)->operator *((iDynTree::SpatialMomentum const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMomentum(static_cast< const iDynTree::SpatialMomentum& >(result))), SWIGTYPE_p_iDynTree__SpatialMomentum, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_mtimes__SWIG_4 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::Wrench *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench result;
  
  if (!SWIG_check_num_args("Position_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_mtimes" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_mtimes" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_mtimes" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Wrench * >(argp2);
  result = ((iDynTree::Position const *)arg1)->operator *((iDynTree::Wrench const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Wrench(static_cast< const iDynTree::Wrench& >(result))), SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_mtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Position_mtimes__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMomentum, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Position_mtimes__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialAcc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Position_mtimes__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Wrench, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Position_mtimes__SWIG_4(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialForceVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Position_mtimes__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Position_mtimes'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Position::operator *(iDynTree::Twist const &) const\n"
    "    iDynTree::Position::operator *(iDynTree::SpatialForceVector const &) const\n"
    "    iDynTree::Position::operator *(iDynTree::SpatialAcc const &) const\n"
    "    iDynTree::Position::operator *(iDynTree::SpatialMomentum const &) const\n"
    "    iDynTree::Position::operator *(iDynTree::Wrench const &) const\n");
  return 1;
}


int _wrap_Position_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Position_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_toString" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  result = ((iDynTree::Position const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Position_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_display" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  result = ((iDynTree::Position const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Position_Zero (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Position_Zero",argc,0,0,0)) {
    SWIG_fail;
  }
  result = iDynTree::Position::Zero();
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__LinearMotionVector3Semantics__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3Semantics__LinearMotionVector3Semantics",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *)new iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__LinearMotionVector3Semantics__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3Semantics__LinearMotionVector3Semantics",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GeomVector3Semantics__LinearMotionVector3Semantics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GeomVector3Semantics__LinearMotionVector3Semantics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GeomVector3Semantics__LinearMotionVector3Semantics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *)new iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics >(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__LinearMotionVector3Semantics__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3Semantics__LinearMotionVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeomVector3Semantics__LinearMotionVector3Semantics" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeomVector3Semantics__LinearMotionVector3Semantics" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > * >(argp1);
  result = (iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *)new iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics >((iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__LinearMotionVector3Semantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_GeomVector3Semantics__LinearMotionVector3Semantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GeomVector3Semantics__LinearMotionVector3Semantics__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_GeomVector3Semantics__LinearMotionVector3Semantics__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_GeomVector3Semantics__LinearMotionVector3Semantics'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics >::GeomVector3Semantics()\n"
    "    iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics >::GeomVector3Semantics(int,int,int)\n"
    "    iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics >::GeomVector3Semantics(iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const &)\n");
  return 1;
}


int _wrap_delete_GeomVector3Semantics__LinearMotionVector3Semantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_GeomVector3Semantics__LinearMotionVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeomVector3Semantics__LinearMotionVector3Semantics" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearMotionVector3Semantics_getBody (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearMotionVector3Semantics_getBody",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_getBody" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > * >(argp1);
  result = (int)((iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const *)arg1)->getBody();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearMotionVector3Semantics_getRefBody (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearMotionVector3Semantics_getRefBody",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_getRefBody" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > * >(argp1);
  result = (int)((iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const *)arg1)->getRefBody();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearMotionVector3Semantics_getCoordinateFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearMotionVector3Semantics_getCoordinateFrame",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_getCoordinateFrame" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > * >(argp1);
  result = (int)((iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const *)arg1)->getCoordinateFrame();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearMotionVector3Semantics_isUnknown (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearMotionVector3Semantics_isUnknown",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_isUnknown" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > * >(argp1);
  result = (bool)((iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const *)arg1)->isUnknown();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearMotionVector3Semantics_changeCoordFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *) 0 ;
  iDynTree::RotationSemantics *arg2 = 0 ;
  iDynTree::LinearMotionVector3Semantics *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearMotionVector3Semantics_changeCoordFrame",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_changeCoordFrame" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationSemantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_changeCoordFrame" "', argument " "3"" of type '" "iDynTree::LinearMotionVector3Semantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_changeCoordFrame" "', argument " "3"" of type '" "iDynTree::LinearMotionVector3Semantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp3);
  result = (bool)((iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const *)arg1)->changeCoordFrame((iDynTree::RotationSemantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearMotionVector3Semantics_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearMotionVector3Semantics *arg1 = 0 ;
  iDynTree::LinearMotionVector3Semantics *arg2 = 0 ;
  iDynTree::LinearMotionVector3Semantics *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearMotionVector3Semantics_compose",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::LinearMotionVector3Semantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::LinearMotionVector3Semantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp3);
  result = (bool)iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics >::SWIGTEMPLATEDISAMBIGUATOR compose((iDynTree::LinearMotionVector3Semantics const &)*arg1,(iDynTree::LinearMotionVector3Semantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearMotionVector3Semantics_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearMotionVector3Semantics *arg1 = 0 ;
  iDynTree::LinearMotionVector3Semantics *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearMotionVector3Semantics_inverse",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_inverse" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_inverse" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_inverse" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3Semantics &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_inverse" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3Semantics &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp2);
  result = (bool)iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics >::SWIGTEMPLATEDISAMBIGUATOR inverse((iDynTree::LinearMotionVector3Semantics const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearMotionVector3Semantics_dot (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *) 0 ;
  iDynTree::DualMotionForceSemanticsT< iDynTree::LinearMotionVector3Semantics >::Type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearMotionVector3Semantics_dot",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_dot" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_dot" "', argument " "2"" of type '" "iDynTree::DualMotionForceSemanticsT< iDynTree::LinearMotionVector3Semantics >::Type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearMotionVector3Semantics_dot" "', argument " "2"" of type '" "iDynTree::DualMotionForceSemanticsT< iDynTree::LinearMotionVector3Semantics >::Type const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::DualMotionForceSemanticsT< iDynTree::LinearMotionVector3Semantics >::Type * >(argp2);
  result = (bool)((iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > const *)arg1)->dot((iDynTree::DualMotionForceSemanticsT< iDynTree::LinearMotionVector3Semantics >::Type const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__AngularMotionVector3Semantics__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3Semantics__AngularMotionVector3Semantics",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *)new iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__AngularMotionVector3Semantics__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3Semantics__AngularMotionVector3Semantics",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GeomVector3Semantics__AngularMotionVector3Semantics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GeomVector3Semantics__AngularMotionVector3Semantics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GeomVector3Semantics__AngularMotionVector3Semantics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *)new iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics >(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__AngularMotionVector3Semantics__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3Semantics__AngularMotionVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeomVector3Semantics__AngularMotionVector3Semantics" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeomVector3Semantics__AngularMotionVector3Semantics" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > * >(argp1);
  result = (iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *)new iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics >((iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__AngularMotionVector3Semantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_GeomVector3Semantics__AngularMotionVector3Semantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GeomVector3Semantics__AngularMotionVector3Semantics__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_GeomVector3Semantics__AngularMotionVector3Semantics__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_GeomVector3Semantics__AngularMotionVector3Semantics'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics >::GeomVector3Semantics()\n"
    "    iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics >::GeomVector3Semantics(int,int,int)\n"
    "    iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics >::GeomVector3Semantics(iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const &)\n");
  return 1;
}


int _wrap_delete_GeomVector3Semantics__AngularMotionVector3Semantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_GeomVector3Semantics__AngularMotionVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeomVector3Semantics__AngularMotionVector3Semantics" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularMotionVector3Semantics_getBody (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularMotionVector3Semantics_getBody",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_getBody" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > * >(argp1);
  result = (int)((iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const *)arg1)->getBody();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularMotionVector3Semantics_getRefBody (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularMotionVector3Semantics_getRefBody",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_getRefBody" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > * >(argp1);
  result = (int)((iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const *)arg1)->getRefBody();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularMotionVector3Semantics_getCoordinateFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularMotionVector3Semantics_getCoordinateFrame",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_getCoordinateFrame" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > * >(argp1);
  result = (int)((iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const *)arg1)->getCoordinateFrame();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularMotionVector3Semantics_isUnknown (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularMotionVector3Semantics_isUnknown",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_isUnknown" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > * >(argp1);
  result = (bool)((iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const *)arg1)->isUnknown();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularMotionVector3Semantics_changeCoordFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *) 0 ;
  iDynTree::RotationSemantics *arg2 = 0 ;
  iDynTree::AngularMotionVector3Semantics *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularMotionVector3Semantics_changeCoordFrame",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_changeCoordFrame" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationSemantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_changeCoordFrame" "', argument " "3"" of type '" "iDynTree::AngularMotionVector3Semantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_changeCoordFrame" "', argument " "3"" of type '" "iDynTree::AngularMotionVector3Semantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::AngularMotionVector3Semantics * >(argp3);
  result = (bool)((iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const *)arg1)->changeCoordFrame((iDynTree::RotationSemantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularMotionVector3Semantics_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularMotionVector3Semantics *arg1 = 0 ;
  iDynTree::AngularMotionVector3Semantics *arg2 = 0 ;
  iDynTree::AngularMotionVector3Semantics *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularMotionVector3Semantics_compose",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::AngularMotionVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::AngularMotionVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularMotionVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3Semantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3Semantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularMotionVector3Semantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::AngularMotionVector3Semantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::AngularMotionVector3Semantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::AngularMotionVector3Semantics * >(argp3);
  result = (bool)iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics >::SWIGTEMPLATEDISAMBIGUATOR compose((iDynTree::AngularMotionVector3Semantics const &)*arg1,(iDynTree::AngularMotionVector3Semantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularMotionVector3Semantics_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularMotionVector3Semantics *arg1 = 0 ;
  iDynTree::AngularMotionVector3Semantics *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularMotionVector3Semantics_inverse",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_inverse" "', argument " "1"" of type '" "iDynTree::AngularMotionVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_inverse" "', argument " "1"" of type '" "iDynTree::AngularMotionVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularMotionVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_inverse" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3Semantics &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_inverse" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3Semantics &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularMotionVector3Semantics * >(argp2);
  result = (bool)iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics >::SWIGTEMPLATEDISAMBIGUATOR inverse((iDynTree::AngularMotionVector3Semantics const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularMotionVector3Semantics_dot (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *) 0 ;
  iDynTree::DualMotionForceSemanticsT< iDynTree::AngularMotionVector3Semantics >::Type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularMotionVector3Semantics_dot",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_dot" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_dot" "', argument " "2"" of type '" "iDynTree::DualMotionForceSemanticsT< iDynTree::AngularMotionVector3Semantics >::Type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularMotionVector3Semantics_dot" "', argument " "2"" of type '" "iDynTree::DualMotionForceSemanticsT< iDynTree::AngularMotionVector3Semantics >::Type const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::DualMotionForceSemanticsT< iDynTree::AngularMotionVector3Semantics >::Type * >(argp2);
  result = (bool)((iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > const *)arg1)->dot((iDynTree::DualMotionForceSemanticsT< iDynTree::AngularMotionVector3Semantics >::Type const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__LinearForceVector3Semantics__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3Semantics__LinearForceVector3Semantics",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *)new iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__LinearForceVector3Semantics__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3Semantics__LinearForceVector3Semantics",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GeomVector3Semantics__LinearForceVector3Semantics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GeomVector3Semantics__LinearForceVector3Semantics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GeomVector3Semantics__LinearForceVector3Semantics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *)new iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics >(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__LinearForceVector3Semantics__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3Semantics__LinearForceVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeomVector3Semantics__LinearForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeomVector3Semantics__LinearForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp1);
  result = (iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *)new iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics >((iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__LinearForceVector3Semantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_GeomVector3Semantics__LinearForceVector3Semantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GeomVector3Semantics__LinearForceVector3Semantics__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_GeomVector3Semantics__LinearForceVector3Semantics__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_GeomVector3Semantics__LinearForceVector3Semantics'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics >::GeomVector3Semantics()\n"
    "    iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics >::GeomVector3Semantics(int,int,int)\n"
    "    iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics >::GeomVector3Semantics(iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const &)\n");
  return 1;
}


int _wrap_delete_GeomVector3Semantics__LinearForceVector3Semantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_GeomVector3Semantics__LinearForceVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeomVector3Semantics__LinearForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearForceVector3Semantics_getBody (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearForceVector3Semantics_getBody",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_getBody" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp1);
  result = (int)((iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const *)arg1)->getBody();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearForceVector3Semantics_getRefBody (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearForceVector3Semantics_getRefBody",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_getRefBody" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp1);
  result = (int)((iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const *)arg1)->getRefBody();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearForceVector3Semantics_getCoordinateFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearForceVector3Semantics_getCoordinateFrame",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_getCoordinateFrame" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp1);
  result = (int)((iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const *)arg1)->getCoordinateFrame();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearForceVector3Semantics_isUnknown (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearForceVector3Semantics_isUnknown",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_isUnknown" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp1);
  result = (bool)((iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const *)arg1)->isUnknown();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearForceVector3Semantics_changeCoordFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *) 0 ;
  iDynTree::RotationSemantics *arg2 = 0 ;
  iDynTree::LinearForceVector3Semantics *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearForceVector3Semantics_changeCoordFrame",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_changeCoordFrame" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationSemantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__LinearForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_changeCoordFrame" "', argument " "3"" of type '" "iDynTree::LinearForceVector3Semantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_changeCoordFrame" "', argument " "3"" of type '" "iDynTree::LinearForceVector3Semantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::LinearForceVector3Semantics * >(argp3);
  result = (bool)((iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const *)arg1)->changeCoordFrame((iDynTree::RotationSemantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearForceVector3Semantics_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearForceVector3Semantics *arg1 = 0 ;
  iDynTree::LinearForceVector3Semantics *arg2 = 0 ;
  iDynTree::LinearForceVector3Semantics *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearForceVector3Semantics_compose",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::LinearForceVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::LinearForceVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearForceVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::LinearForceVector3Semantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::LinearForceVector3Semantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearForceVector3Semantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__LinearForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::LinearForceVector3Semantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::LinearForceVector3Semantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::LinearForceVector3Semantics * >(argp3);
  result = (bool)iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics >::SWIGTEMPLATEDISAMBIGUATOR compose((iDynTree::LinearForceVector3Semantics const &)*arg1,(iDynTree::LinearForceVector3Semantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearForceVector3Semantics_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearForceVector3Semantics *arg1 = 0 ;
  iDynTree::LinearForceVector3Semantics *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearForceVector3Semantics_inverse",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_inverse" "', argument " "1"" of type '" "iDynTree::LinearForceVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_inverse" "', argument " "1"" of type '" "iDynTree::LinearForceVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearForceVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_inverse" "', argument " "2"" of type '" "iDynTree::LinearForceVector3Semantics &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_inverse" "', argument " "2"" of type '" "iDynTree::LinearForceVector3Semantics &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearForceVector3Semantics * >(argp2);
  result = (bool)iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics >::SWIGTEMPLATEDISAMBIGUATOR inverse((iDynTree::LinearForceVector3Semantics const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__LinearForceVector3Semantics_dot (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *) 0 ;
  iDynTree::DualMotionForceSemanticsT< iDynTree::LinearForceVector3Semantics >::Type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__LinearForceVector3Semantics_dot",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_dot" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_dot" "', argument " "2"" of type '" "iDynTree::DualMotionForceSemanticsT< iDynTree::LinearForceVector3Semantics >::Type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__LinearForceVector3Semantics_dot" "', argument " "2"" of type '" "iDynTree::DualMotionForceSemanticsT< iDynTree::LinearForceVector3Semantics >::Type const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::DualMotionForceSemanticsT< iDynTree::LinearForceVector3Semantics >::Type * >(argp2);
  result = (bool)((iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > const *)arg1)->dot((iDynTree::DualMotionForceSemanticsT< iDynTree::LinearForceVector3Semantics >::Type const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__AngularForceVector3Semantics__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3Semantics__AngularForceVector3Semantics",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *)new iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__AngularForceVector3Semantics__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3Semantics__AngularForceVector3Semantics",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GeomVector3Semantics__AngularForceVector3Semantics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GeomVector3Semantics__AngularForceVector3Semantics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GeomVector3Semantics__AngularForceVector3Semantics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *)new iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics >(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__AngularForceVector3Semantics__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3Semantics__AngularForceVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeomVector3Semantics__AngularForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeomVector3Semantics__AngularForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp1);
  result = (iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *)new iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics >((iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3Semantics__AngularForceVector3Semantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_GeomVector3Semantics__AngularForceVector3Semantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GeomVector3Semantics__AngularForceVector3Semantics__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_GeomVector3Semantics__AngularForceVector3Semantics__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_GeomVector3Semantics__AngularForceVector3Semantics'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics >::GeomVector3Semantics()\n"
    "    iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics >::GeomVector3Semantics(int,int,int)\n"
    "    iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics >::GeomVector3Semantics(iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const &)\n");
  return 1;
}


int _wrap_delete_GeomVector3Semantics__AngularForceVector3Semantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_GeomVector3Semantics__AngularForceVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeomVector3Semantics__AngularForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularForceVector3Semantics_getBody (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularForceVector3Semantics_getBody",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_getBody" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp1);
  result = (int)((iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const *)arg1)->getBody();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularForceVector3Semantics_getRefBody (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularForceVector3Semantics_getRefBody",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_getRefBody" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp1);
  result = (int)((iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const *)arg1)->getRefBody();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularForceVector3Semantics_getCoordinateFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularForceVector3Semantics_getCoordinateFrame",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_getCoordinateFrame" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp1);
  result = (int)((iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const *)arg1)->getCoordinateFrame();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularForceVector3Semantics_isUnknown (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularForceVector3Semantics_isUnknown",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_isUnknown" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp1);
  result = (bool)((iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const *)arg1)->isUnknown();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularForceVector3Semantics_changeCoordFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *) 0 ;
  iDynTree::RotationSemantics *arg2 = 0 ;
  iDynTree::AngularForceVector3Semantics *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularForceVector3Semantics_changeCoordFrame",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_changeCoordFrame" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationSemantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_changeCoordFrame" "', argument " "3"" of type '" "iDynTree::AngularForceVector3Semantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_changeCoordFrame" "', argument " "3"" of type '" "iDynTree::AngularForceVector3Semantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp3);
  result = (bool)((iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const *)arg1)->changeCoordFrame((iDynTree::RotationSemantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularForceVector3Semantics_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularForceVector3Semantics *arg1 = 0 ;
  iDynTree::AngularForceVector3Semantics *arg2 = 0 ;
  iDynTree::AngularForceVector3Semantics *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularForceVector3Semantics_compose",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::AngularForceVector3Semantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::AngularForceVector3Semantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp3);
  result = (bool)iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics >::SWIGTEMPLATEDISAMBIGUATOR compose((iDynTree::AngularForceVector3Semantics const &)*arg1,(iDynTree::AngularForceVector3Semantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularForceVector3Semantics_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularForceVector3Semantics *arg1 = 0 ;
  iDynTree::AngularForceVector3Semantics *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularForceVector3Semantics_inverse",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_inverse" "', argument " "1"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_inverse" "', argument " "1"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_inverse" "', argument " "2"" of type '" "iDynTree::AngularForceVector3Semantics &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_inverse" "', argument " "2"" of type '" "iDynTree::AngularForceVector3Semantics &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp2);
  result = (bool)iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics >::SWIGTEMPLATEDISAMBIGUATOR inverse((iDynTree::AngularForceVector3Semantics const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3Semantics__AngularForceVector3Semantics_dot (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg1 = (iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *) 0 ;
  iDynTree::DualMotionForceSemanticsT< iDynTree::AngularForceVector3Semantics >::Type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("GeomVector3Semantics__AngularForceVector3Semantics_dot",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_dot" "', argument " "1"" of type '" "iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_dot" "', argument " "2"" of type '" "iDynTree::DualMotionForceSemanticsT< iDynTree::AngularForceVector3Semantics >::Type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3Semantics__AngularForceVector3Semantics_dot" "', argument " "2"" of type '" "iDynTree::DualMotionForceSemanticsT< iDynTree::AngularForceVector3Semantics >::Type const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::DualMotionForceSemanticsT< iDynTree::AngularForceVector3Semantics >::Type * >(argp2);
  result = (bool)((iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > const *)arg1)->dot((iDynTree::DualMotionForceSemanticsT< iDynTree::AngularForceVector3Semantics >::Type const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearMotionVector3_semantics_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceSemanticsT *arg2 = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceSemanticsT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GeomVector3__LinearMotionVector3_semantics_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearMotionVector3_semantics_set" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearMotionVector3_semantics_set" "', argument " "2"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceSemanticsT *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceSemanticsT * >(argp2);
  if (arg1) (arg1)->semantics = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearMotionVector3_semantics_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceSemanticsT *result = 0 ;
  
  if (!SWIG_check_num_args("GeomVector3__LinearMotionVector3_semantics_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearMotionVector3_semantics_get" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  result = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceSemanticsT *)& ((arg1)->semantics);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__LinearMotionVector3__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3__LinearMotionVector3",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *)new iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__LinearMotionVector3__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3__LinearMotionVector3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeomVector3__LinearMotionVector3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GeomVector3__LinearMotionVector3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *)new iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__LinearMotionVector3__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3__LinearMotionVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeomVector3__LinearMotionVector3" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeomVector3__LinearMotionVector3" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  result = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *)new iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >((iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__LinearMotionVector3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_GeomVector3__LinearMotionVector3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GeomVector3__LinearMotionVector3__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_GeomVector3__LinearMotionVector3__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_GeomVector3__LinearMotionVector3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::GeomVector3()\n"
    "    iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::GeomVector3(double const *,unsigned int const)\n"
    "    iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::GeomVector3(iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const &)\n");
  return 1;
}


int _wrap_delete_GeomVector3__LinearMotionVector3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_GeomVector3__LinearMotionVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeomVector3__LinearMotionVector3" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearMotionVector3_setSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceSemanticsT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GeomVector3__LinearMotionVector3_setSemantics",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearMotionVector3_setSemantics" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearMotionVector3_setSemantics" "', argument " "2"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceSemanticsT &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearMotionVector3_setSemantics" "', argument " "2"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceSemanticsT &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceSemanticsT * >(argp2);
  (arg1)->setSemantics(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearMotionVector3_changeCoordFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::LinearMotionVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearMotionVector3_changeCoordFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearMotionVector3_changeCoordFrame" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearMotionVector3_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearMotionVector3_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = ((iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const *)arg1)->changeCoordFrame((iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::LinearMotionVector3(static_cast< const iDynTree::LinearMotionVector3& >(result))), SWIGTYPE_p_iDynTree__LinearMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearMotionVector3_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceTbase *arg1 = 0 ;
  iDynTree::LinearMotionVector3 *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::LinearMotionVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearMotionVector3_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearMotionVector3_compose" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceTbase const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearMotionVector3_compose" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceTbase const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceTbase * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearMotionVector3_compose" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearMotionVector3_compose" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearMotionVector3 * >(argp2);
  result = iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::SWIGTEMPLATEDISAMBIGUATOR compose((iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const &)*arg1,(iDynTree::LinearMotionVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::LinearMotionVector3(static_cast< const iDynTree::LinearMotionVector3& >(result))), SWIGTYPE_p_iDynTree__LinearMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearMotionVector3_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceTbase *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinearMotionVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearMotionVector3_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearMotionVector3_inverse" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceTbase const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearMotionVector3_inverse" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceTbase const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceTbase * >(argp1);
  result = iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::SWIGTEMPLATEDISAMBIGUATOR inverse((iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::LinearMotionVector3(static_cast< const iDynTree::LinearMotionVector3& >(result))), SWIGTYPE_p_iDynTree__LinearMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearMotionVector3_dot (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  iDynTree::MotionForce_traits< iDynTree::LinearMotionVector3 >::DualSpace *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearMotionVector3_dot",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearMotionVector3_dot" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearMotionVector3_dot" "', argument " "2"" of type '" "iDynTree::MotionForce_traits< iDynTree::LinearMotionVector3 >::DualSpace const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearMotionVector3_dot" "', argument " "2"" of type '" "iDynTree::MotionForce_traits< iDynTree::LinearMotionVector3 >::DualSpace const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MotionForce_traits< iDynTree::LinearMotionVector3 >::DualSpace * >(argp2);
  result = (double)((iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const *)arg1)->dot((iDynTree::MotionForce_traits< iDynTree::LinearMotionVector3 >::DualSpace const &)*arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearMotionVector3_plus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  iDynTree::LinearMotionVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::LinearMotionVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearMotionVector3_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearMotionVector3_plus" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearMotionVector3_plus" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearMotionVector3_plus" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearMotionVector3 * >(argp2);
  result = ((iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const *)arg1)->operator +((iDynTree::LinearMotionVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::LinearMotionVector3(static_cast< const iDynTree::LinearMotionVector3& >(result))), SWIGTYPE_p_iDynTree__LinearMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearMotionVector3_minus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  iDynTree::LinearMotionVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::LinearMotionVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearMotionVector3_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearMotionVector3_minus" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearMotionVector3_minus" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearMotionVector3_minus" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearMotionVector3 * >(argp2);
  result = ((iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const *)arg1)->operator -((iDynTree::LinearMotionVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::LinearMotionVector3(static_cast< const iDynTree::LinearMotionVector3& >(result))), SWIGTYPE_p_iDynTree__LinearMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearMotionVector3_uminus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinearMotionVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearMotionVector3_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearMotionVector3_uminus" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  result = ((iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > const *)arg1)->operator -();
  _out = SWIG_NewPointerObj((new iDynTree::LinearMotionVector3(static_cast< const iDynTree::LinearMotionVector3& >(result))), SWIGTYPE_p_iDynTree__LinearMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularMotionVector3_semantics_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceSemanticsT *arg2 = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceSemanticsT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GeomVector3__AngularMotionVector3_semantics_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularMotionVector3_semantics_set" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularMotionVector3_semantics_set" "', argument " "2"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceSemanticsT *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceSemanticsT * >(argp2);
  if (arg1) (arg1)->semantics = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularMotionVector3_semantics_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceSemanticsT *result = 0 ;
  
  if (!SWIG_check_num_args("GeomVector3__AngularMotionVector3_semantics_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularMotionVector3_semantics_get" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  result = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceSemanticsT *)& ((arg1)->semantics);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__AngularMotionVector3__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3__AngularMotionVector3",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *)new iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__AngularMotionVector3__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3__AngularMotionVector3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeomVector3__AngularMotionVector3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GeomVector3__AngularMotionVector3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *)new iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__AngularMotionVector3__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3__AngularMotionVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeomVector3__AngularMotionVector3" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeomVector3__AngularMotionVector3" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  result = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *)new iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >((iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__AngularMotionVector3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_GeomVector3__AngularMotionVector3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GeomVector3__AngularMotionVector3__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_GeomVector3__AngularMotionVector3__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_GeomVector3__AngularMotionVector3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::GeomVector3()\n"
    "    iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::GeomVector3(double const *,unsigned int const)\n"
    "    iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::GeomVector3(iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const &)\n");
  return 1;
}


int _wrap_delete_GeomVector3__AngularMotionVector3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_GeomVector3__AngularMotionVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeomVector3__AngularMotionVector3" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularMotionVector3_setSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceSemanticsT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GeomVector3__AngularMotionVector3_setSemantics",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularMotionVector3_setSemantics" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularMotionVector3_setSemantics" "', argument " "2"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceSemanticsT &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularMotionVector3_setSemantics" "', argument " "2"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceSemanticsT &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceSemanticsT * >(argp2);
  (arg1)->setSemantics(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularMotionVector3_changeCoordFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::AngularMotionVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularMotionVector3_changeCoordFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularMotionVector3_changeCoordFrame" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularMotionVector3_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularMotionVector3_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = ((iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const *)arg1)->changeCoordFrame((iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::AngularMotionVector3(static_cast< const iDynTree::AngularMotionVector3& >(result))), SWIGTYPE_p_iDynTree__AngularMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularMotionVector3_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceTbase *arg1 = 0 ;
  iDynTree::AngularMotionVector3 *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::AngularMotionVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularMotionVector3_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularMotionVector3_compose" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceTbase const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularMotionVector3_compose" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceTbase const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceTbase * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularMotionVector3_compose" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularMotionVector3_compose" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularMotionVector3 * >(argp2);
  result = iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::SWIGTEMPLATEDISAMBIGUATOR compose((iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const &)*arg1,(iDynTree::AngularMotionVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::AngularMotionVector3(static_cast< const iDynTree::AngularMotionVector3& >(result))), SWIGTYPE_p_iDynTree__AngularMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularMotionVector3_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceTbase *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::AngularMotionVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularMotionVector3_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularMotionVector3_inverse" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceTbase const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularMotionVector3_inverse" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceTbase const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceTbase * >(argp1);
  result = iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::SWIGTEMPLATEDISAMBIGUATOR inverse((iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::AngularMotionVector3(static_cast< const iDynTree::AngularMotionVector3& >(result))), SWIGTYPE_p_iDynTree__AngularMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularMotionVector3_dot (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  iDynTree::MotionForce_traits< iDynTree::AngularMotionVector3 >::DualSpace *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularMotionVector3_dot",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularMotionVector3_dot" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularMotionVector3_dot" "', argument " "2"" of type '" "iDynTree::MotionForce_traits< iDynTree::AngularMotionVector3 >::DualSpace const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularMotionVector3_dot" "', argument " "2"" of type '" "iDynTree::MotionForce_traits< iDynTree::AngularMotionVector3 >::DualSpace const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MotionForce_traits< iDynTree::AngularMotionVector3 >::DualSpace * >(argp2);
  result = (double)((iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const *)arg1)->dot((iDynTree::MotionForce_traits< iDynTree::AngularMotionVector3 >::DualSpace const &)*arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularMotionVector3_plus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  iDynTree::AngularMotionVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::AngularMotionVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularMotionVector3_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularMotionVector3_plus" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularMotionVector3_plus" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularMotionVector3_plus" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularMotionVector3 * >(argp2);
  result = ((iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const *)arg1)->operator +((iDynTree::AngularMotionVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::AngularMotionVector3(static_cast< const iDynTree::AngularMotionVector3& >(result))), SWIGTYPE_p_iDynTree__AngularMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularMotionVector3_minus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  iDynTree::AngularMotionVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::AngularMotionVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularMotionVector3_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularMotionVector3_minus" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularMotionVector3_minus" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularMotionVector3_minus" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularMotionVector3 * >(argp2);
  result = ((iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const *)arg1)->operator -((iDynTree::AngularMotionVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::AngularMotionVector3(static_cast< const iDynTree::AngularMotionVector3& >(result))), SWIGTYPE_p_iDynTree__AngularMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularMotionVector3_uminus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::AngularMotionVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularMotionVector3_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularMotionVector3_uminus" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  result = ((iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > const *)arg1)->operator -();
  _out = SWIG_NewPointerObj((new iDynTree::AngularMotionVector3(static_cast< const iDynTree::AngularMotionVector3& >(result))), SWIGTYPE_p_iDynTree__AngularMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearForceVector3_semantics_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) 0 ;
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceSemanticsT *arg2 = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceSemanticsT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GeomVector3__LinearForceVector3_semantics_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearForceVector3_semantics_set" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__LinearForceVector3Semantics, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearForceVector3_semantics_set" "', argument " "2"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceSemanticsT *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceSemanticsT * >(argp2);
  if (arg1) (arg1)->semantics = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearForceVector3_semantics_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceSemanticsT *result = 0 ;
  
  if (!SWIG_check_num_args("GeomVector3__LinearForceVector3_semantics_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearForceVector3_semantics_get" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 > * >(argp1);
  result = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceSemanticsT *)& ((arg1)->semantics);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearForceVector3Semantics, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__LinearForceVector3__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3__LinearForceVector3",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *)new iDynTree::GeomVector3< iDynTree::LinearForceVector3 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__LinearForceVector3__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3__LinearForceVector3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeomVector3__LinearForceVector3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GeomVector3__LinearForceVector3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *)new iDynTree::GeomVector3< iDynTree::LinearForceVector3 >((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__LinearForceVector3__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3__LinearForceVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeomVector3__LinearForceVector3" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeomVector3__LinearForceVector3" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 > * >(argp1);
  result = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *)new iDynTree::GeomVector3< iDynTree::LinearForceVector3 >((iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__LinearForceVector3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_GeomVector3__LinearForceVector3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GeomVector3__LinearForceVector3__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_GeomVector3__LinearForceVector3__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_GeomVector3__LinearForceVector3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::GeomVector3()\n"
    "    iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::GeomVector3(double const *,unsigned int const)\n"
    "    iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::GeomVector3(iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const &)\n");
  return 1;
}


int _wrap_delete_GeomVector3__LinearForceVector3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_GeomVector3__LinearForceVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeomVector3__LinearForceVector3" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearForceVector3_setSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) 0 ;
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceSemanticsT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GeomVector3__LinearForceVector3_setSemantics",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearForceVector3_setSemantics" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearForceVector3_setSemantics" "', argument " "2"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceSemanticsT &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearForceVector3_setSemantics" "', argument " "2"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceSemanticsT &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceSemanticsT * >(argp2);
  (arg1)->setSemantics(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearForceVector3_changeCoordFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::LinearForceVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearForceVector3_changeCoordFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearForceVector3_changeCoordFrame" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearForceVector3_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearForceVector3_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = ((iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const *)arg1)->changeCoordFrame((iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::LinearForceVector3(static_cast< const iDynTree::LinearForceVector3& >(result))), SWIGTYPE_p_iDynTree__LinearForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearForceVector3_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceTbase *arg1 = 0 ;
  iDynTree::LinearForceVector3 *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::LinearForceVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearForceVector3_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearForceVector3_compose" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceTbase const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearForceVector3_compose" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceTbase const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceTbase * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearForceVector3_compose" "', argument " "2"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearForceVector3_compose" "', argument " "2"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearForceVector3 * >(argp2);
  result = iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::SWIGTEMPLATEDISAMBIGUATOR compose((iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const &)*arg1,(iDynTree::LinearForceVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::LinearForceVector3(static_cast< const iDynTree::LinearForceVector3& >(result))), SWIGTYPE_p_iDynTree__LinearForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearForceVector3_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceTbase *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinearForceVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearForceVector3_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearForceVector3_inverse" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceTbase const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearForceVector3_inverse" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceTbase const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceTbase * >(argp1);
  result = iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::SWIGTEMPLATEDISAMBIGUATOR inverse((iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::LinearForceVector3(static_cast< const iDynTree::LinearForceVector3& >(result))), SWIGTYPE_p_iDynTree__LinearForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearForceVector3_dot (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) 0 ;
  iDynTree::MotionForce_traits< iDynTree::LinearForceVector3 >::DualSpace *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearForceVector3_dot",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearForceVector3_dot" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearForceVector3_dot" "', argument " "2"" of type '" "iDynTree::MotionForce_traits< iDynTree::LinearForceVector3 >::DualSpace const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearForceVector3_dot" "', argument " "2"" of type '" "iDynTree::MotionForce_traits< iDynTree::LinearForceVector3 >::DualSpace const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MotionForce_traits< iDynTree::LinearForceVector3 >::DualSpace * >(argp2);
  result = (double)((iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const *)arg1)->dot((iDynTree::MotionForce_traits< iDynTree::LinearForceVector3 >::DualSpace const &)*arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearForceVector3_plus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) 0 ;
  iDynTree::LinearForceVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::LinearForceVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearForceVector3_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearForceVector3_plus" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearForceVector3_plus" "', argument " "2"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearForceVector3_plus" "', argument " "2"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearForceVector3 * >(argp2);
  result = ((iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const *)arg1)->operator +((iDynTree::LinearForceVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::LinearForceVector3(static_cast< const iDynTree::LinearForceVector3& >(result))), SWIGTYPE_p_iDynTree__LinearForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearForceVector3_minus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) 0 ;
  iDynTree::LinearForceVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::LinearForceVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearForceVector3_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearForceVector3_minus" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__LinearForceVector3_minus" "', argument " "2"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__LinearForceVector3_minus" "', argument " "2"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearForceVector3 * >(argp2);
  result = ((iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const *)arg1)->operator -((iDynTree::LinearForceVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::LinearForceVector3(static_cast< const iDynTree::LinearForceVector3& >(result))), SWIGTYPE_p_iDynTree__LinearForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__LinearForceVector3_uminus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinearForceVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__LinearForceVector3_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__LinearForceVector3_uminus" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::LinearForceVector3 > * >(argp1);
  result = ((iDynTree::GeomVector3< iDynTree::LinearForceVector3 > const *)arg1)->operator -();
  _out = SWIG_NewPointerObj((new iDynTree::LinearForceVector3(static_cast< const iDynTree::LinearForceVector3& >(result))), SWIGTYPE_p_iDynTree__LinearForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularForceVector3_semantics_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) 0 ;
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceSemanticsT *arg2 = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceSemanticsT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GeomVector3__AngularForceVector3_semantics_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularForceVector3_semantics_set" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_iDynTree__AngularForceVector3Semantics, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularForceVector3_semantics_set" "', argument " "2"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceSemanticsT *""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceSemanticsT * >(argp2);
  if (arg1) (arg1)->semantics = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularForceVector3_semantics_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceSemanticsT *result = 0 ;
  
  if (!SWIG_check_num_args("GeomVector3__AngularForceVector3_semantics_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularForceVector3_semantics_get" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 > * >(argp1);
  result = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceSemanticsT *)& ((arg1)->semantics);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularForceVector3Semantics, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__AngularForceVector3__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3__AngularForceVector3",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *)new iDynTree::GeomVector3< iDynTree::AngularForceVector3 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__AngularForceVector3__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3__AngularForceVector3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeomVector3__AngularForceVector3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GeomVector3__AngularForceVector3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *)new iDynTree::GeomVector3< iDynTree::AngularForceVector3 >((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__AngularForceVector3__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_GeomVector3__AngularForceVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GeomVector3__AngularForceVector3" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GeomVector3__AngularForceVector3" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 > * >(argp1);
  result = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *)new iDynTree::GeomVector3< iDynTree::AngularForceVector3 >((iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GeomVector3__AngularForceVector3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_GeomVector3__AngularForceVector3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GeomVector3__AngularForceVector3__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_GeomVector3__AngularForceVector3__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_GeomVector3__AngularForceVector3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::GeomVector3()\n"
    "    iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::GeomVector3(double const *,unsigned int const)\n"
    "    iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::GeomVector3(iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const &)\n");
  return 1;
}


int _wrap_delete_GeomVector3__AngularForceVector3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_GeomVector3__AngularForceVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeomVector3__AngularForceVector3" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularForceVector3_setSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) 0 ;
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceSemanticsT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GeomVector3__AngularForceVector3_setSemantics",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularForceVector3_setSemantics" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularForceVector3_setSemantics" "', argument " "2"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceSemanticsT &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularForceVector3_setSemantics" "', argument " "2"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceSemanticsT &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceSemanticsT * >(argp2);
  (arg1)->setSemantics(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularForceVector3_changeCoordFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::AngularForceVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularForceVector3_changeCoordFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularForceVector3_changeCoordFrame" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularForceVector3_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularForceVector3_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = ((iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const *)arg1)->changeCoordFrame((iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::AngularForceVector3(static_cast< const iDynTree::AngularForceVector3& >(result))), SWIGTYPE_p_iDynTree__AngularForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularForceVector3_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceTbase *arg1 = 0 ;
  iDynTree::AngularForceVector3 *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::AngularForceVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularForceVector3_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularForceVector3_compose" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceTbase const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularForceVector3_compose" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceTbase const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceTbase * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularForceVector3_compose" "', argument " "2"" of type '" "iDynTree::AngularForceVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularForceVector3_compose" "', argument " "2"" of type '" "iDynTree::AngularForceVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularForceVector3 * >(argp2);
  result = iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::SWIGTEMPLATEDISAMBIGUATOR compose((iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const &)*arg1,(iDynTree::AngularForceVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::AngularForceVector3(static_cast< const iDynTree::AngularForceVector3& >(result))), SWIGTYPE_p_iDynTree__AngularForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularForceVector3_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceTbase *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::AngularForceVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularForceVector3_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularForceVector3_inverse" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceTbase const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularForceVector3_inverse" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceTbase const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceTbase * >(argp1);
  result = iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::SWIGTEMPLATEDISAMBIGUATOR inverse((iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::AngularForceVector3(static_cast< const iDynTree::AngularForceVector3& >(result))), SWIGTYPE_p_iDynTree__AngularForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularForceVector3_dot (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) 0 ;
  iDynTree::MotionForce_traits< iDynTree::AngularForceVector3 >::DualSpace *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularForceVector3_dot",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularForceVector3_dot" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularForceVector3_dot" "', argument " "2"" of type '" "iDynTree::MotionForce_traits< iDynTree::AngularForceVector3 >::DualSpace const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularForceVector3_dot" "', argument " "2"" of type '" "iDynTree::MotionForce_traits< iDynTree::AngularForceVector3 >::DualSpace const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MotionForce_traits< iDynTree::AngularForceVector3 >::DualSpace * >(argp2);
  result = (double)((iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const *)arg1)->dot((iDynTree::MotionForce_traits< iDynTree::AngularForceVector3 >::DualSpace const &)*arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularForceVector3_plus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) 0 ;
  iDynTree::AngularForceVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::AngularForceVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularForceVector3_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularForceVector3_plus" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularForceVector3_plus" "', argument " "2"" of type '" "iDynTree::AngularForceVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularForceVector3_plus" "', argument " "2"" of type '" "iDynTree::AngularForceVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularForceVector3 * >(argp2);
  result = ((iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const *)arg1)->operator +((iDynTree::AngularForceVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::AngularForceVector3(static_cast< const iDynTree::AngularForceVector3& >(result))), SWIGTYPE_p_iDynTree__AngularForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularForceVector3_minus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) 0 ;
  iDynTree::AngularForceVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::AngularForceVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularForceVector3_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularForceVector3_minus" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeomVector3__AngularForceVector3_minus" "', argument " "2"" of type '" "iDynTree::AngularForceVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeomVector3__AngularForceVector3_minus" "', argument " "2"" of type '" "iDynTree::AngularForceVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularForceVector3 * >(argp2);
  result = ((iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const *)arg1)->operator -((iDynTree::AngularForceVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::AngularForceVector3(static_cast< const iDynTree::AngularForceVector3& >(result))), SWIGTYPE_p_iDynTree__AngularForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GeomVector3__AngularForceVector3_uminus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *arg1 = (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::AngularForceVector3 result;
  
  if (!SWIG_check_num_args("GeomVector3__AngularForceVector3_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeomVector3__AngularForceVector3_uminus" "', argument " "1"" of type '" "iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::GeomVector3< iDynTree::AngularForceVector3 > * >(argp1);
  result = ((iDynTree::GeomVector3< iDynTree::AngularForceVector3 > const *)arg1)->operator -();
  _out = SWIG_NewPointerObj((new iDynTree::AngularForceVector3(static_cast< const iDynTree::AngularForceVector3& >(result))), SWIGTYPE_p_iDynTree__AngularForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3Semantics__LinearForceVector3Semantics__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_ForceVector3Semantics__LinearForceVector3Semantics",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *)new iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3Semantics__LinearForceVector3Semantics__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_ForceVector3Semantics__LinearForceVector3Semantics",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ForceVector3Semantics__LinearForceVector3Semantics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ForceVector3Semantics__LinearForceVector3Semantics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ForceVector3Semantics__LinearForceVector3Semantics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *)new iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics >(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3Semantics__LinearForceVector3Semantics__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_ForceVector3Semantics__LinearForceVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ForceVector3Semantics__LinearForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ForceVector3Semantics__LinearForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp1);
  result = (iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *)new iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics >((iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3Semantics__LinearForceVector3Semantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_ForceVector3Semantics__LinearForceVector3Semantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ForceVector3Semantics__LinearForceVector3Semantics__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ForceVector3Semantics__LinearForceVector3Semantics__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_ForceVector3Semantics__LinearForceVector3Semantics'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics >::ForceVector3Semantics()\n"
    "    iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics >::ForceVector3Semantics(int,int,int)\n"
    "    iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics >::ForceVector3Semantics(iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > const &)\n");
  return 1;
}


int _wrap_delete_ForceVector3Semantics__LinearForceVector3Semantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg1 = (iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_ForceVector3Semantics__LinearForceVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ForceVector3Semantics__LinearForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ForceVector3Semantics__LinearForceVector3Semantics_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg1 = 0 ;
  iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg2 = 0 ;
  iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ForceVector3Semantics__LinearForceVector3Semantics_compose",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForceVector3Semantics__LinearForceVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForceVector3Semantics__LinearForceVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForceVector3Semantics__LinearForceVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForceVector3Semantics__LinearForceVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ForceVector3Semantics__LinearForceVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForceVector3Semantics__LinearForceVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp3);
  result = (bool)iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics >::SWIGTEMPLATEDISAMBIGUATOR compose((iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > const &)*arg1,(iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ForceVector3Semantics__LinearForceVector3Semantics_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg1 = 0 ;
  iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ForceVector3Semantics__LinearForceVector3Semantics_inverse",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForceVector3Semantics__LinearForceVector3Semantics_inverse" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForceVector3Semantics__LinearForceVector3Semantics_inverse" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForceVector3Semantics__LinearForceVector3Semantics_inverse" "', argument " "2"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForceVector3Semantics__LinearForceVector3Semantics_inverse" "', argument " "2"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > * >(argp2);
  result = (bool)iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics >::SWIGTEMPLATEDISAMBIGUATOR inverse((iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3Semantics__AngularForceVector3Semantics__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_ForceVector3Semantics__AngularForceVector3Semantics",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *)new iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3Semantics__AngularForceVector3Semantics__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_ForceVector3Semantics__AngularForceVector3Semantics",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ForceVector3Semantics__AngularForceVector3Semantics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ForceVector3Semantics__AngularForceVector3Semantics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ForceVector3Semantics__AngularForceVector3Semantics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *)new iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics >(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3Semantics__AngularForceVector3Semantics__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_ForceVector3Semantics__AngularForceVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ForceVector3Semantics__AngularForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ForceVector3Semantics__AngularForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp1);
  result = (iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *)new iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics >((iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3Semantics__AngularForceVector3Semantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_ForceVector3Semantics__AngularForceVector3Semantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ForceVector3Semantics__AngularForceVector3Semantics__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ForceVector3Semantics__AngularForceVector3Semantics__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_ForceVector3Semantics__AngularForceVector3Semantics'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics >::ForceVector3Semantics()\n"
    "    iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics >::ForceVector3Semantics(int,int,int)\n"
    "    iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics >::ForceVector3Semantics(iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > const &)\n");
  return 1;
}


int _wrap_delete_ForceVector3Semantics__AngularForceVector3Semantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg1 = (iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_ForceVector3Semantics__AngularForceVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ForceVector3Semantics__AngularForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ForceVector3Semantics__AngularForceVector3Semantics_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg1 = 0 ;
  iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg2 = 0 ;
  iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ForceVector3Semantics__AngularForceVector3Semantics_compose",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForceVector3Semantics__AngularForceVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForceVector3Semantics__AngularForceVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForceVector3Semantics__AngularForceVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForceVector3Semantics__AngularForceVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ForceVector3Semantics__AngularForceVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForceVector3Semantics__AngularForceVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp3);
  result = (bool)iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics >::SWIGTEMPLATEDISAMBIGUATOR compose((iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > const &)*arg1,(iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ForceVector3Semantics__AngularForceVector3Semantics_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg1 = 0 ;
  iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("ForceVector3Semantics__AngularForceVector3Semantics_inverse",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ForceVector3Semantics__AngularForceVector3Semantics_inverse" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForceVector3Semantics__AngularForceVector3Semantics_inverse" "', argument " "1"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ForceVector3Semantics__AngularForceVector3Semantics_inverse" "', argument " "2"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ForceVector3Semantics__AngularForceVector3Semantics_inverse" "', argument " "2"" of type '" "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > * >(argp2);
  result = (bool)iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics >::SWIGTEMPLATEDISAMBIGUATOR inverse((iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MotionVector3__LinearMotionVector3__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_MotionVector3__LinearMotionVector3",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *)new iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MotionVector3__LinearMotionVector3__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_MotionVector3__LinearMotionVector3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MotionVector3__LinearMotionVector3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MotionVector3__LinearMotionVector3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *)new iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MotionVector3__LinearMotionVector3__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_MotionVector3__LinearMotionVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MotionVector3__LinearMotionVector3" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MotionVector3__LinearMotionVector3" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  result = (iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *)new iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >((iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MotionVector3__LinearMotionVector3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_MotionVector3__LinearMotionVector3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MotionVector3__LinearMotionVector3__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MotionVector3__LinearMotionVector3__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_MotionVector3__LinearMotionVector3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionVector3()\n"
    "    iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionVector3(double const *,unsigned int const)\n"
    "    iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionVector3(iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > const &)\n");
  return 1;
}


int _wrap_delete_MotionVector3__LinearMotionVector3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_MotionVector3__LinearMotionVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MotionVector3__LinearMotionVector3" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MotionVector3__LinearMotionVector3_cross__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  iDynTree::LinearMotionVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossLinM result;
  
  if (!SWIG_check_num_args("MotionVector3__LinearMotionVector3_cross",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MotionVector3__LinearMotionVector3_cross" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MotionVector3__LinearMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MotionVector3__LinearMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearMotionVector3 * >(argp2);
  result = ((iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > const *)arg1)->cross((iDynTree::LinearMotionVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossLinM(static_cast< const iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossLinM& >(result))), SWIGTYPE_p_iDynTree__AngularMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MotionVector3__LinearMotionVector3_cross__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  iDynTree::AngularMotionVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossAngM result;
  
  if (!SWIG_check_num_args("MotionVector3__LinearMotionVector3_cross",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MotionVector3__LinearMotionVector3_cross" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MotionVector3__LinearMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MotionVector3__LinearMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularMotionVector3 * >(argp2);
  result = ((iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > const *)arg1)->cross((iDynTree::AngularMotionVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossAngM(static_cast< const iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossAngM& >(result))), SWIGTYPE_p_iDynTree__LinearMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MotionVector3__LinearMotionVector3_cross__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  iDynTree::LinearForceVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossLinF result;
  
  if (!SWIG_check_num_args("MotionVector3__LinearMotionVector3_cross",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MotionVector3__LinearMotionVector3_cross" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MotionVector3__LinearMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MotionVector3__LinearMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearForceVector3 * >(argp2);
  result = ((iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > const *)arg1)->cross((iDynTree::LinearForceVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossLinF(static_cast< const iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossLinF& >(result))), SWIGTYPE_p_iDynTree__AngularForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MotionVector3__LinearMotionVector3_cross__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *arg1 = (iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *) 0 ;
  iDynTree::AngularForceVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossAngF result;
  
  if (!SWIG_check_num_args("MotionVector3__LinearMotionVector3_cross",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MotionVector3__LinearMotionVector3_cross" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MotionVector3__LinearMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::AngularForceVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MotionVector3__LinearMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::AngularForceVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularForceVector3 * >(argp2);
  result = ((iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > const *)arg1)->cross((iDynTree::AngularForceVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossAngF(static_cast< const iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossAngF& >(result))), SWIGTYPE_p_iDynTree__LinearForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MotionVector3__LinearMotionVector3_cross (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__LinearMotionVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MotionVector3__LinearMotionVector3_cross__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__AngularMotionVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MotionVector3__LinearMotionVector3_cross__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__LinearForceVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MotionVector3__LinearMotionVector3_cross__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__AngularForceVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MotionVector3__LinearMotionVector3_cross__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MotionVector3__LinearMotionVector3_cross'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::cross(iDynTree::LinearMotionVector3 const &) const\n"
    "    iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::cross(iDynTree::AngularMotionVector3 const &) const\n"
    "    iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::cross(iDynTree::LinearForceVector3 const &) const\n"
    "    iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::cross(iDynTree::AngularForceVector3 const &) const\n");
  return 1;
}


int _wrap_new_MotionVector3__AngularMotionVector3__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_MotionVector3__AngularMotionVector3",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *)new iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MotionVector3__AngularMotionVector3__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_MotionVector3__AngularMotionVector3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MotionVector3__AngularMotionVector3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MotionVector3__AngularMotionVector3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *)new iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MotionVector3__AngularMotionVector3__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_MotionVector3__AngularMotionVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MotionVector3__AngularMotionVector3" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MotionVector3__AngularMotionVector3" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  result = (iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *)new iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >((iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_MotionVector3__AngularMotionVector3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_MotionVector3__AngularMotionVector3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MotionVector3__AngularMotionVector3__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MotionVector3__AngularMotionVector3__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_MotionVector3__AngularMotionVector3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionVector3()\n"
    "    iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionVector3(double const *,unsigned int const)\n"
    "    iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionVector3(iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > const &)\n");
  return 1;
}


int _wrap_delete_MotionVector3__AngularMotionVector3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_MotionVector3__AngularMotionVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MotionVector3__AngularMotionVector3" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MotionVector3__AngularMotionVector3_cross__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  iDynTree::LinearMotionVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossLinM result;
  
  if (!SWIG_check_num_args("MotionVector3__AngularMotionVector3_cross",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MotionVector3__AngularMotionVector3_cross" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MotionVector3__AngularMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MotionVector3__AngularMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearMotionVector3 * >(argp2);
  result = ((iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > const *)arg1)->cross((iDynTree::LinearMotionVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossLinM(static_cast< const iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossLinM& >(result))), SWIGTYPE_p_iDynTree__LinearMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MotionVector3__AngularMotionVector3_cross__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  iDynTree::AngularMotionVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossAngM result;
  
  if (!SWIG_check_num_args("MotionVector3__AngularMotionVector3_cross",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MotionVector3__AngularMotionVector3_cross" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MotionVector3__AngularMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MotionVector3__AngularMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularMotionVector3 * >(argp2);
  result = ((iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > const *)arg1)->cross((iDynTree::AngularMotionVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossAngM(static_cast< const iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossAngM& >(result))), SWIGTYPE_p_iDynTree__AngularMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MotionVector3__AngularMotionVector3_cross__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  iDynTree::LinearForceVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossLinF result;
  
  if (!SWIG_check_num_args("MotionVector3__AngularMotionVector3_cross",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MotionVector3__AngularMotionVector3_cross" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MotionVector3__AngularMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MotionVector3__AngularMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearForceVector3 * >(argp2);
  result = ((iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > const *)arg1)->cross((iDynTree::LinearForceVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossLinF(static_cast< const iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossLinF& >(result))), SWIGTYPE_p_iDynTree__LinearForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MotionVector3__AngularMotionVector3_cross__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *arg1 = (iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *) 0 ;
  iDynTree::AngularForceVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossAngF result;
  
  if (!SWIG_check_num_args("MotionVector3__AngularMotionVector3_cross",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MotionVector3__AngularMotionVector3_cross" "', argument " "1"" of type '" "iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MotionVector3__AngularMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::AngularForceVector3 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MotionVector3__AngularMotionVector3_cross" "', argument " "2"" of type '" "iDynTree::AngularForceVector3 const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularForceVector3 * >(argp2);
  result = ((iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > const *)arg1)->cross((iDynTree::AngularForceVector3 const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossAngF(static_cast< const iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossAngF& >(result))), SWIGTYPE_p_iDynTree__AngularForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MotionVector3__AngularMotionVector3_cross (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__LinearMotionVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MotionVector3__AngularMotionVector3_cross__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__AngularMotionVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MotionVector3__AngularMotionVector3_cross__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__LinearForceVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MotionVector3__AngularMotionVector3_cross__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__AngularForceVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MotionVector3__AngularMotionVector3_cross__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'MotionVector3__AngularMotionVector3_cross'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::cross(iDynTree::LinearMotionVector3 const &) const\n"
    "    iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::cross(iDynTree::AngularMotionVector3 const &) const\n"
    "    iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::cross(iDynTree::LinearForceVector3 const &) const\n"
    "    iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::cross(iDynTree::AngularForceVector3 const &) const\n");
  return 1;
}


int _wrap_new_ForceVector3__LinearForceVector3__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_ForceVector3__LinearForceVector3",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *)new iDynTree::ForceVector3< iDynTree::LinearForceVector3 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3__LinearForceVector3__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_ForceVector3__LinearForceVector3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ForceVector3__LinearForceVector3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ForceVector3__LinearForceVector3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *)new iDynTree::ForceVector3< iDynTree::LinearForceVector3 >((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3__LinearForceVector3__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_ForceVector3__LinearForceVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ForceVector3__LinearForceVector3" "', argument " "1"" of type '" "iDynTree::ForceVector3< iDynTree::LinearForceVector3 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ForceVector3__LinearForceVector3" "', argument " "1"" of type '" "iDynTree::ForceVector3< iDynTree::LinearForceVector3 > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ForceVector3< iDynTree::LinearForceVector3 > * >(argp1);
  result = (iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *)new iDynTree::ForceVector3< iDynTree::LinearForceVector3 >((iDynTree::ForceVector3< iDynTree::LinearForceVector3 > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3__LinearForceVector3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_ForceVector3__LinearForceVector3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ForceVector3__LinearForceVector3__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ForceVector3__LinearForceVector3__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_ForceVector3__LinearForceVector3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ForceVector3< iDynTree::LinearForceVector3 >::ForceVector3()\n"
    "    iDynTree::ForceVector3< iDynTree::LinearForceVector3 >::ForceVector3(double const *,unsigned int const)\n"
    "    iDynTree::ForceVector3< iDynTree::LinearForceVector3 >::ForceVector3(iDynTree::ForceVector3< iDynTree::LinearForceVector3 > const &)\n");
  return 1;
}


int _wrap_delete_ForceVector3__LinearForceVector3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *arg1 = (iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_ForceVector3__LinearForceVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ForceVector3__LinearForceVector3" "', argument " "1"" of type '" "iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ForceVector3< iDynTree::LinearForceVector3 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3__AngularForceVector3__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_ForceVector3__AngularForceVector3",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *)new iDynTree::ForceVector3< iDynTree::AngularForceVector3 >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3__AngularForceVector3__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_ForceVector3__AngularForceVector3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ForceVector3__AngularForceVector3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ForceVector3__AngularForceVector3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *)new iDynTree::ForceVector3< iDynTree::AngularForceVector3 >((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3__AngularForceVector3__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *result = 0 ;
  
  if (!SWIG_check_num_args("new_ForceVector3__AngularForceVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ForceVector3__AngularForceVector3" "', argument " "1"" of type '" "iDynTree::ForceVector3< iDynTree::AngularForceVector3 > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ForceVector3__AngularForceVector3" "', argument " "1"" of type '" "iDynTree::ForceVector3< iDynTree::AngularForceVector3 > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ForceVector3< iDynTree::AngularForceVector3 > * >(argp1);
  result = (iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *)new iDynTree::ForceVector3< iDynTree::AngularForceVector3 >((iDynTree::ForceVector3< iDynTree::AngularForceVector3 > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ForceVector3__AngularForceVector3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_ForceVector3__AngularForceVector3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ForceVector3__AngularForceVector3__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ForceVector3__AngularForceVector3__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_ForceVector3__AngularForceVector3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ForceVector3< iDynTree::AngularForceVector3 >::ForceVector3()\n"
    "    iDynTree::ForceVector3< iDynTree::AngularForceVector3 >::ForceVector3(double const *,unsigned int const)\n"
    "    iDynTree::ForceVector3< iDynTree::AngularForceVector3 >::ForceVector3(iDynTree::ForceVector3< iDynTree::AngularForceVector3 > const &)\n");
  return 1;
}


int _wrap_delete_ForceVector3__AngularForceVector3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *arg1 = (iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_ForceVector3__AngularForceVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ForceVector3__AngularForceVector3" "', argument " "1"" of type '" "iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ForceVector3< iDynTree::AngularForceVector3 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearMotionVector3Semantics__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::LinearMotionVector3Semantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearMotionVector3Semantics",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::LinearMotionVector3Semantics *)new iDynTree::LinearMotionVector3Semantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearMotionVector3Semantics__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  iDynTree::LinearMotionVector3Semantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearMotionVector3Semantics",argc,4,4,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LinearMotionVector3Semantics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LinearMotionVector3Semantics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LinearMotionVector3Semantics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_LinearMotionVector3Semantics" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (iDynTree::LinearMotionVector3Semantics *)new iDynTree::LinearMotionVector3Semantics(arg1,arg2,arg3,arg4);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearMotionVector3Semantics__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearMotionVector3Semantics *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinearMotionVector3Semantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearMotionVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinearMotionVector3Semantics" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinearMotionVector3Semantics" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp1);
  result = (iDynTree::LinearMotionVector3Semantics *)new iDynTree::LinearMotionVector3Semantics((iDynTree::LinearMotionVector3Semantics const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearMotionVector3Semantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_LinearMotionVector3Semantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinearMotionVector3Semantics__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_LinearMotionVector3Semantics__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_LinearMotionVector3Semantics'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinearMotionVector3Semantics::LinearMotionVector3Semantics()\n"
    "    iDynTree::LinearMotionVector3Semantics::LinearMotionVector3Semantics(int,int,int,int)\n"
    "    iDynTree::LinearMotionVector3Semantics::LinearMotionVector3Semantics(iDynTree::LinearMotionVector3Semantics const &)\n");
  return 1;
}


int _wrap_delete_LinearMotionVector3Semantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearMotionVector3Semantics *arg1 = (iDynTree::LinearMotionVector3Semantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_LinearMotionVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinearMotionVector3Semantics" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3Semantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinearMotionVector3Semantics_changePoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearMotionVector3Semantics *arg1 = (iDynTree::LinearMotionVector3Semantics *) 0 ;
  iDynTree::PositionSemantics *arg2 = 0 ;
  iDynTree::AngularMotionVector3Semantics *arg3 = 0 ;
  iDynTree::LinearMotionVector3Semantics *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("LinearMotionVector3Semantics_changePoint",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearMotionVector3Semantics_changePoint" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3Semantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinearMotionVector3Semantics_changePoint" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearMotionVector3Semantics_changePoint" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionSemantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LinearMotionVector3Semantics_changePoint" "', argument " "3"" of type '" "iDynTree::AngularMotionVector3Semantics const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearMotionVector3Semantics_changePoint" "', argument " "3"" of type '" "iDynTree::AngularMotionVector3Semantics const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::AngularMotionVector3Semantics * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LinearMotionVector3Semantics_changePoint" "', argument " "4"" of type '" "iDynTree::LinearMotionVector3Semantics &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearMotionVector3Semantics_changePoint" "', argument " "4"" of type '" "iDynTree::LinearMotionVector3Semantics &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp4);
  result = (bool)((iDynTree::LinearMotionVector3Semantics const *)arg1)->changePoint((iDynTree::PositionSemantics const &)*arg2,(iDynTree::AngularMotionVector3Semantics const &)*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinearMotionVector3Semantics_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearMotionVector3Semantics *arg1 = 0 ;
  iDynTree::LinearMotionVector3Semantics *arg2 = 0 ;
  iDynTree::LinearMotionVector3Semantics *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("LinearMotionVector3Semantics_compose",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearMotionVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearMotionVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinearMotionVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearMotionVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LinearMotionVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::LinearMotionVector3Semantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearMotionVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::LinearMotionVector3Semantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp3);
  result = (bool)iDynTree::LinearMotionVector3Semantics::compose((iDynTree::LinearMotionVector3Semantics const &)*arg1,(iDynTree::LinearMotionVector3Semantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearMotionVector3__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::LinearMotionVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearMotionVector3",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::LinearMotionVector3 *)new iDynTree::LinearMotionVector3();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearMotionVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearMotionVector3__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::LinearMotionVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearMotionVector3",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LinearMotionVector3" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LinearMotionVector3" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LinearMotionVector3" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (iDynTree::LinearMotionVector3 *)new iDynTree::LinearMotionVector3(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearMotionVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearMotionVector3__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::LinearMotionVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearMotionVector3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinearMotionVector3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LinearMotionVector3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::LinearMotionVector3 *)new iDynTree::LinearMotionVector3((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearMotionVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearMotionVector3__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearMotionVector3 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinearMotionVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearMotionVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinearMotionVector3" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinearMotionVector3" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3 const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearMotionVector3 * >(argp1);
  result = (iDynTree::LinearMotionVector3 *)new iDynTree::LinearMotionVector3((iDynTree::LinearMotionVector3 const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearMotionVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearMotionVector3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_LinearMotionVector3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinearMotionVector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinearMotionVector3__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_LinearMotionVector3__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_LinearMotionVector3__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_LinearMotionVector3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinearMotionVector3::LinearMotionVector3()\n"
    "    iDynTree::LinearMotionVector3::LinearMotionVector3(double const,double const,double const)\n"
    "    iDynTree::LinearMotionVector3::LinearMotionVector3(double const *,unsigned int const)\n"
    "    iDynTree::LinearMotionVector3::LinearMotionVector3(iDynTree::LinearMotionVector3 const &)\n");
  return 1;
}


int _wrap_delete_LinearMotionVector3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearMotionVector3 *arg1 = (iDynTree::LinearMotionVector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_LinearMotionVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinearMotionVector3, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinearMotionVector3" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3 *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearMotionVector3 * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinearMotionVector3_changePoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearMotionVector3 *arg1 = (iDynTree::LinearMotionVector3 *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  iDynTree::AngularMotionVector3 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  iDynTree::LinearMotionVector3 result;
  
  if (!SWIG_check_num_args("LinearMotionVector3_changePoint",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinearMotionVector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearMotionVector3_changePoint" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3 const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearMotionVector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinearMotionVector3_changePoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearMotionVector3_changePoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LinearMotionVector3_changePoint" "', argument " "3"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearMotionVector3_changePoint" "', argument " "3"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::AngularMotionVector3 * >(argp3);
  result = ((iDynTree::LinearMotionVector3 const *)arg1)->changePoint((iDynTree::Position const &)*arg2,(iDynTree::AngularMotionVector3 const &)*arg3);
  _out = SWIG_NewPointerObj((new iDynTree::LinearMotionVector3(static_cast< const iDynTree::LinearMotionVector3& >(result))), SWIGTYPE_p_iDynTree__LinearMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularMotionVector3Semantics__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::AngularMotionVector3Semantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularMotionVector3Semantics",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::AngularMotionVector3Semantics *)new iDynTree::AngularMotionVector3Semantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularMotionVector3Semantics__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::AngularMotionVector3Semantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularMotionVector3Semantics",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AngularMotionVector3Semantics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AngularMotionVector3Semantics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AngularMotionVector3Semantics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (iDynTree::AngularMotionVector3Semantics *)new iDynTree::AngularMotionVector3Semantics(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularMotionVector3Semantics__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularMotionVector3Semantics *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::AngularMotionVector3Semantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularMotionVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AngularMotionVector3Semantics" "', argument " "1"" of type '" "iDynTree::AngularMotionVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AngularMotionVector3Semantics" "', argument " "1"" of type '" "iDynTree::AngularMotionVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularMotionVector3Semantics * >(argp1);
  result = (iDynTree::AngularMotionVector3Semantics *)new iDynTree::AngularMotionVector3Semantics((iDynTree::AngularMotionVector3Semantics const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularMotionVector3Semantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_AngularMotionVector3Semantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AngularMotionVector3Semantics__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_AngularMotionVector3Semantics__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_AngularMotionVector3Semantics'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::AngularMotionVector3Semantics::AngularMotionVector3Semantics()\n"
    "    iDynTree::AngularMotionVector3Semantics::AngularMotionVector3Semantics(int,int,int)\n"
    "    iDynTree::AngularMotionVector3Semantics::AngularMotionVector3Semantics(iDynTree::AngularMotionVector3Semantics const &)\n");
  return 1;
}


int _wrap_delete_AngularMotionVector3Semantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularMotionVector3Semantics *arg1 = (iDynTree::AngularMotionVector3Semantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_AngularMotionVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AngularMotionVector3Semantics" "', argument " "1"" of type '" "iDynTree::AngularMotionVector3Semantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularMotionVector3Semantics * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularMotionVector3__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::AngularMotionVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularMotionVector3",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::AngularMotionVector3 *)new iDynTree::AngularMotionVector3();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularMotionVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularMotionVector3__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::AngularMotionVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularMotionVector3",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AngularMotionVector3" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AngularMotionVector3" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AngularMotionVector3" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (iDynTree::AngularMotionVector3 *)new iDynTree::AngularMotionVector3(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularMotionVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularMotionVector3__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::AngularMotionVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularMotionVector3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AngularMotionVector3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AngularMotionVector3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::AngularMotionVector3 *)new iDynTree::AngularMotionVector3((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularMotionVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularMotionVector3__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularMotionVector3 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::AngularMotionVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularMotionVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AngularMotionVector3" "', argument " "1"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AngularMotionVector3" "', argument " "1"" of type '" "iDynTree::AngularMotionVector3 const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularMotionVector3 * >(argp1);
  result = (iDynTree::AngularMotionVector3 *)new iDynTree::AngularMotionVector3((iDynTree::AngularMotionVector3 const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularMotionVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularMotionVector3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_AngularMotionVector3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__AngularMotionVector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AngularMotionVector3__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_AngularMotionVector3__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_AngularMotionVector3__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_AngularMotionVector3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::AngularMotionVector3::AngularMotionVector3()\n"
    "    iDynTree::AngularMotionVector3::AngularMotionVector3(double,double,double)\n"
    "    iDynTree::AngularMotionVector3::AngularMotionVector3(double const *,unsigned int const)\n"
    "    iDynTree::AngularMotionVector3::AngularMotionVector3(iDynTree::AngularMotionVector3 const &)\n");
  return 1;
}


int _wrap_delete_AngularMotionVector3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularMotionVector3 *arg1 = (iDynTree::AngularMotionVector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_AngularMotionVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AngularMotionVector3, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AngularMotionVector3" "', argument " "1"" of type '" "iDynTree::AngularMotionVector3 *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularMotionVector3 * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AngularMotionVector3_exp (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularMotionVector3 *arg1 = (iDynTree::AngularMotionVector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("AngularMotionVector3_exp",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AngularMotionVector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularMotionVector3_exp" "', argument " "1"" of type '" "iDynTree::AngularMotionVector3 const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularMotionVector3 * >(argp1);
  result = ((iDynTree::AngularMotionVector3 const *)arg1)->exp();
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearForceVector3Semantics__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::LinearForceVector3Semantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearForceVector3Semantics",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::LinearForceVector3Semantics *)new iDynTree::LinearForceVector3Semantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearForceVector3Semantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearForceVector3Semantics__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::LinearForceVector3Semantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearForceVector3Semantics",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LinearForceVector3Semantics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LinearForceVector3Semantics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LinearForceVector3Semantics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (iDynTree::LinearForceVector3Semantics *)new iDynTree::LinearForceVector3Semantics(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearForceVector3Semantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearForceVector3Semantics__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearForceVector3Semantics *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinearForceVector3Semantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearForceVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinearForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::LinearForceVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinearForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::LinearForceVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearForceVector3Semantics * >(argp1);
  result = (iDynTree::LinearForceVector3Semantics *)new iDynTree::LinearForceVector3Semantics((iDynTree::LinearForceVector3Semantics const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearForceVector3Semantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearForceVector3Semantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_LinearForceVector3Semantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinearForceVector3Semantics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinearForceVector3Semantics__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_LinearForceVector3Semantics__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_LinearForceVector3Semantics'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinearForceVector3Semantics::LinearForceVector3Semantics()\n"
    "    iDynTree::LinearForceVector3Semantics::LinearForceVector3Semantics(int,int,int)\n"
    "    iDynTree::LinearForceVector3Semantics::LinearForceVector3Semantics(iDynTree::LinearForceVector3Semantics const &)\n");
  return 1;
}


int _wrap_delete_LinearForceVector3Semantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearForceVector3Semantics *arg1 = (iDynTree::LinearForceVector3Semantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_LinearForceVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinearForceVector3Semantics, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinearForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::LinearForceVector3Semantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearForceVector3Semantics * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearForceVector3__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::LinearForceVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearForceVector3",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::LinearForceVector3 *)new iDynTree::LinearForceVector3();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearForceVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearForceVector3__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::LinearForceVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearForceVector3",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LinearForceVector3" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LinearForceVector3" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LinearForceVector3" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (iDynTree::LinearForceVector3 *)new iDynTree::LinearForceVector3(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearForceVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearForceVector3__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::LinearForceVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearForceVector3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinearForceVector3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LinearForceVector3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::LinearForceVector3 *)new iDynTree::LinearForceVector3((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearForceVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearForceVector3__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearForceVector3 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinearForceVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinearForceVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearForceVector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinearForceVector3" "', argument " "1"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinearForceVector3" "', argument " "1"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearForceVector3 * >(argp1);
  result = (iDynTree::LinearForceVector3 *)new iDynTree::LinearForceVector3((iDynTree::LinearForceVector3 const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearForceVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinearForceVector3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_LinearForceVector3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinearForceVector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinearForceVector3__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_LinearForceVector3__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_LinearForceVector3__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_LinearForceVector3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinearForceVector3::LinearForceVector3()\n"
    "    iDynTree::LinearForceVector3::LinearForceVector3(double const,double const,double const)\n"
    "    iDynTree::LinearForceVector3::LinearForceVector3(double const *,unsigned int const)\n"
    "    iDynTree::LinearForceVector3::LinearForceVector3(iDynTree::LinearForceVector3 const &)\n");
  return 1;
}


int _wrap_delete_LinearForceVector3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearForceVector3 *arg1 = (iDynTree::LinearForceVector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_LinearForceVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinearForceVector3, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinearForceVector3" "', argument " "1"" of type '" "iDynTree::LinearForceVector3 *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearForceVector3 * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularForceVector3Semantics__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::AngularForceVector3Semantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularForceVector3Semantics",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::AngularForceVector3Semantics *)new iDynTree::AngularForceVector3Semantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularForceVector3Semantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularForceVector3Semantics__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  iDynTree::AngularForceVector3Semantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularForceVector3Semantics",argc,4,4,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AngularForceVector3Semantics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AngularForceVector3Semantics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AngularForceVector3Semantics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_AngularForceVector3Semantics" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (iDynTree::AngularForceVector3Semantics *)new iDynTree::AngularForceVector3Semantics(arg1,arg2,arg3,arg4);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularForceVector3Semantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularForceVector3Semantics__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularForceVector3Semantics *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::AngularForceVector3Semantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularForceVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AngularForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AngularForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp1);
  result = (iDynTree::AngularForceVector3Semantics *)new iDynTree::AngularForceVector3Semantics((iDynTree::AngularForceVector3Semantics const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularForceVector3Semantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularForceVector3Semantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_AngularForceVector3Semantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AngularForceVector3Semantics__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_AngularForceVector3Semantics__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_AngularForceVector3Semantics'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::AngularForceVector3Semantics::AngularForceVector3Semantics()\n"
    "    iDynTree::AngularForceVector3Semantics::AngularForceVector3Semantics(int,int,int,int)\n"
    "    iDynTree::AngularForceVector3Semantics::AngularForceVector3Semantics(iDynTree::AngularForceVector3Semantics const &)\n");
  return 1;
}


int _wrap_delete_AngularForceVector3Semantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularForceVector3Semantics *arg1 = (iDynTree::AngularForceVector3Semantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_AngularForceVector3Semantics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AngularForceVector3Semantics, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AngularForceVector3Semantics" "', argument " "1"" of type '" "iDynTree::AngularForceVector3Semantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AngularForceVector3Semantics_changePoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularForceVector3Semantics *arg1 = (iDynTree::AngularForceVector3Semantics *) 0 ;
  iDynTree::PositionSemantics *arg2 = 0 ;
  iDynTree::LinearForceVector3Semantics *arg3 = 0 ;
  iDynTree::AngularForceVector3Semantics *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("AngularForceVector3Semantics_changePoint",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AngularForceVector3Semantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularForceVector3Semantics_changePoint" "', argument " "1"" of type '" "iDynTree::AngularForceVector3Semantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularForceVector3Semantics_changePoint" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularForceVector3Semantics_changePoint" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionSemantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__LinearForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularForceVector3Semantics_changePoint" "', argument " "3"" of type '" "iDynTree::LinearForceVector3Semantics const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularForceVector3Semantics_changePoint" "', argument " "3"" of type '" "iDynTree::LinearForceVector3Semantics const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::LinearForceVector3Semantics * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AngularForceVector3Semantics_changePoint" "', argument " "4"" of type '" "iDynTree::AngularForceVector3Semantics &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularForceVector3Semantics_changePoint" "', argument " "4"" of type '" "iDynTree::AngularForceVector3Semantics &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp4);
  result = (bool)((iDynTree::AngularForceVector3Semantics const *)arg1)->changePoint((iDynTree::PositionSemantics const &)*arg2,(iDynTree::LinearForceVector3Semantics const &)*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AngularForceVector3Semantics_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularForceVector3Semantics *arg1 = 0 ;
  iDynTree::AngularForceVector3Semantics *arg2 = 0 ;
  iDynTree::AngularForceVector3Semantics *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("AngularForceVector3Semantics_compose",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularForceVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularForceVector3Semantics_compose" "', argument " "1"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularForceVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularForceVector3Semantics_compose" "', argument " "2"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularForceVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::AngularForceVector3Semantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularForceVector3Semantics_compose" "', argument " "3"" of type '" "iDynTree::AngularForceVector3Semantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp3);
  result = (bool)iDynTree::AngularForceVector3Semantics::compose((iDynTree::AngularForceVector3Semantics const &)*arg1,(iDynTree::AngularForceVector3Semantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularForceVector3__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::AngularForceVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularForceVector3",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::AngularForceVector3 *)new iDynTree::AngularForceVector3();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularForceVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularForceVector3__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::AngularForceVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularForceVector3",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AngularForceVector3" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AngularForceVector3" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AngularForceVector3" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (iDynTree::AngularForceVector3 *)new iDynTree::AngularForceVector3(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularForceVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularForceVector3__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::AngularForceVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularForceVector3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AngularForceVector3" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AngularForceVector3" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::AngularForceVector3 *)new iDynTree::AngularForceVector3((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularForceVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularForceVector3__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularForceVector3 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::AngularForceVector3 *result = 0 ;
  
  if (!SWIG_check_num_args("new_AngularForceVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__AngularForceVector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AngularForceVector3" "', argument " "1"" of type '" "iDynTree::AngularForceVector3 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AngularForceVector3" "', argument " "1"" of type '" "iDynTree::AngularForceVector3 const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularForceVector3 * >(argp1);
  result = (iDynTree::AngularForceVector3 *)new iDynTree::AngularForceVector3((iDynTree::AngularForceVector3 const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularForceVector3, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_AngularForceVector3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_AngularForceVector3__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__AngularForceVector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AngularForceVector3__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_AngularForceVector3__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_AngularForceVector3__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_AngularForceVector3'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::AngularForceVector3::AngularForceVector3()\n"
    "    iDynTree::AngularForceVector3::AngularForceVector3(double const,double const,double const)\n"
    "    iDynTree::AngularForceVector3::AngularForceVector3(double const *,unsigned int const)\n"
    "    iDynTree::AngularForceVector3::AngularForceVector3(iDynTree::AngularForceVector3 const &)\n");
  return 1;
}


int _wrap_delete_AngularForceVector3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularForceVector3 *arg1 = (iDynTree::AngularForceVector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_AngularForceVector3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AngularForceVector3, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AngularForceVector3" "', argument " "1"" of type '" "iDynTree::AngularForceVector3 *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularForceVector3 * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AngularForceVector3_changePoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::AngularForceVector3 *arg1 = (iDynTree::AngularForceVector3 *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  iDynTree::LinearForceVector3 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  iDynTree::AngularForceVector3 result;
  
  if (!SWIG_check_num_args("AngularForceVector3_changePoint",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__AngularForceVector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularForceVector3_changePoint" "', argument " "1"" of type '" "iDynTree::AngularForceVector3 const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::AngularForceVector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularForceVector3_changePoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularForceVector3_changePoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__LinearForceVector3,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularForceVector3_changePoint" "', argument " "3"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularForceVector3_changePoint" "', argument " "3"" of type '" "iDynTree::LinearForceVector3 const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::LinearForceVector3 * >(argp3);
  result = ((iDynTree::AngularForceVector3 const *)arg1)->changePoint((iDynTree::Position const &)*arg2,(iDynTree::LinearForceVector3 const &)*arg3);
  _out = SWIG_NewPointerObj((new iDynTree::AngularForceVector3(static_cast< const iDynTree::AngularForceVector3& >(result))), SWIGTYPE_p_iDynTree__AngularForceVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMotionVectorSemanticsBase (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearMotionVector3Semantics *arg1 = 0 ;
  iDynTree::AngularMotionVector3Semantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMotionVectorSemanticsBase",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialMotionVectorSemanticsBase" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3Semantics &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMotionVectorSemanticsBase" "', argument " "1"" of type '" "iDynTree::LinearMotionVector3Semantics &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpatialMotionVectorSemanticsBase" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3Semantics &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMotionVectorSemanticsBase" "', argument " "2"" of type '" "iDynTree::AngularMotionVector3Semantics &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularMotionVector3Semantics * >(argp2);
  result = (iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > *)new iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics >(*arg1,*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearMotionVector3Semantics_iDynTree__AngularMotionVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_SpatialMotionVectorSemanticsBase (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > *arg1 = (iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SpatialMotionVectorSemanticsBase",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearMotionVector3Semantics_iDynTree__AngularMotionVector3Semantics_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpatialMotionVectorSemanticsBase" "', argument " "1"" of type '" "iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorSemanticsBase_check_linear2angularConsistency (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > *arg1 = (iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > *) 0 ;
  iDynTree::LinearMotionVector3Semantics *arg2 = 0 ;
  iDynTree::AngularMotionVector3Semantics *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorSemanticsBase_check_linear2angularConsistency",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearMotionVector3Semantics_iDynTree__AngularMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorSemanticsBase_check_linear2angularConsistency" "', argument " "1"" of type '" "iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVectorSemanticsBase_check_linear2angularConsistency" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorSemanticsBase_check_linear2angularConsistency" "', argument " "2"" of type '" "iDynTree::LinearMotionVector3Semantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearMotionVector3Semantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__AngularMotionVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SpatialMotionVectorSemanticsBase_check_linear2angularConsistency" "', argument " "3"" of type '" "iDynTree::AngularMotionVector3Semantics const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorSemanticsBase_check_linear2angularConsistency" "', argument " "3"" of type '" "iDynTree::AngularMotionVector3Semantics const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::AngularMotionVector3Semantics * >(argp3);
  result = (bool)(arg1)->check_linear2angularConsistency((iDynTree::LinearMotionVector3Semantics const &)*arg2,(iDynTree::AngularMotionVector3Semantics const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorSemanticsBase_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > *arg1 = (iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorSemanticsBase_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearMotionVector3Semantics_iDynTree__AngularMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorSemanticsBase_toString" "', argument " "1"" of type '" "iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > * >(argp1);
  result = ((iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorSemanticsBase_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > *arg1 = (iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorSemanticsBase_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearMotionVector3Semantics_iDynTree__AngularMotionVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorSemanticsBase_display" "', argument " "1"" of type '" "iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > * >(argp1);
  result = ((iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialForceVectorSemanticsBase (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinearForceVector3Semantics *arg1 = 0 ;
  iDynTree::AngularForceVector3Semantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialForceVectorSemanticsBase",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialForceVectorSemanticsBase" "', argument " "1"" of type '" "iDynTree::LinearForceVector3Semantics &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialForceVectorSemanticsBase" "', argument " "1"" of type '" "iDynTree::LinearForceVector3Semantics &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinearForceVector3Semantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpatialForceVectorSemanticsBase" "', argument " "2"" of type '" "iDynTree::AngularForceVector3Semantics &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialForceVectorSemanticsBase" "', argument " "2"" of type '" "iDynTree::AngularForceVector3Semantics &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp2);
  result = (iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > *)new iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics >(*arg1,*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearForceVector3Semantics_iDynTree__AngularForceVector3Semantics_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_SpatialForceVectorSemanticsBase (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > *arg1 = (iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SpatialForceVectorSemanticsBase",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearForceVector3Semantics_iDynTree__AngularForceVector3Semantics_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpatialForceVectorSemanticsBase" "', argument " "1"" of type '" "iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorSemanticsBase_check_linear2angularConsistency (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > *arg1 = (iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > *) 0 ;
  iDynTree::LinearForceVector3Semantics *arg2 = 0 ;
  iDynTree::AngularForceVector3Semantics *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SpatialForceVectorSemanticsBase_check_linear2angularConsistency",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearForceVector3Semantics_iDynTree__AngularForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorSemanticsBase_check_linear2angularConsistency" "', argument " "1"" of type '" "iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialForceVectorSemanticsBase_check_linear2angularConsistency" "', argument " "2"" of type '" "iDynTree::LinearForceVector3Semantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorSemanticsBase_check_linear2angularConsistency" "', argument " "2"" of type '" "iDynTree::LinearForceVector3Semantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinearForceVector3Semantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__AngularForceVector3Semantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SpatialForceVectorSemanticsBase_check_linear2angularConsistency" "', argument " "3"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorSemanticsBase_check_linear2angularConsistency" "', argument " "3"" of type '" "iDynTree::AngularForceVector3Semantics const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::AngularForceVector3Semantics * >(argp3);
  result = (bool)(arg1)->check_linear2angularConsistency((iDynTree::LinearForceVector3Semantics const &)*arg2,(iDynTree::AngularForceVector3Semantics const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorSemanticsBase_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > *arg1 = (iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SpatialForceVectorSemanticsBase_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearForceVector3Semantics_iDynTree__AngularForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorSemanticsBase_toString" "', argument " "1"" of type '" "iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > * >(argp1);
  result = ((iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorSemanticsBase_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > *arg1 = (iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SpatialForceVectorSemanticsBase_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearForceVector3Semantics_iDynTree__AngularForceVector3Semantics_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorSemanticsBase_display" "', argument " "1"" of type '" "iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > * >(argp1);
  result = ((iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMotionVectorBase__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMotionVectorBase",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *)new iDynTree::SpatialVector< iDynTree::SpatialMotionVector >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMotionVectorBase__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T *arg1 = 0 ;
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMotionVectorBase",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialMotionVectorBase" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMotionVectorBase" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpatialMotionVectorBase" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMotionVectorBase" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T * >(argp2);
  result = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *)new iDynTree::SpatialVector< iDynTree::SpatialMotionVector >((iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T const &)*arg1,(iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMotionVectorBase__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMotionVectorBase",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialMotionVectorBase" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMotionVectorBase" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  result = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *)new iDynTree::SpatialVector< iDynTree::SpatialMotionVector >((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMotionVectorBase (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_SpatialMotionVectorBase__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialMotionVectorBase__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinearMotionVector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__AngularMotionVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SpatialMotionVectorBase__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_SpatialMotionVectorBase'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::SpatialVector()\n"
    "    iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::SpatialVector(iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T const &,iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T const &)\n"
    "    iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::SpatialVector(iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const &)\n");
  return 1;
}


int _wrap_delete_SpatialMotionVectorBase (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SpatialMotionVectorBase",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpatialMotionVectorBase" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_getLinearVec3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T *result = 0 ;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_getLinearVec3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_getLinearVec3" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  result = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T *) &(arg1)->getLinearVec3();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearMotionVector3, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_getAngularVec3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T *result = 0 ;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_getAngularVec3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_getAngularVec3" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  result = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T *) &(arg1)->getAngularVec3();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularMotionVector3, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_setLinearVec3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_setLinearVec3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_setLinearVec3" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVectorBase_setLinearVec3" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorBase_setLinearVec3" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T * >(argp2);
  (arg1)->setLinearVec3((iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_setAngularVec3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_setAngularVec3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_setAngularVec3" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVectorBase_setAngularVec3" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorBase_setAngularVec3" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T * >(argp2);
  (arg1)->setAngularVec3((iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_paren (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_paren" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpatialMotionVectorBase_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_getVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_getVal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_getVal" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpatialMotionVectorBase_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double)((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *)arg1)->getVal(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_setVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_setVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_setVal" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpatialMotionVectorBase_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SpatialMotionVectorBase_setVal" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->setVal(arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_size (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_size" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  result = (unsigned int)((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *)arg1)->size();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_zero (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_zero" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_changePoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_changePoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_changePoint" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVectorBase_changePoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorBase_changePoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = (arg1)->changePoint((iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_changeCoordFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_changeCoordFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_changeCoordFrame" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVectorBase_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorBase_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = (arg1)->changeCoordFrame((iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVector *arg1 = 0 ;
  iDynTree::SpatialMotionVector *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_compose" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorBase_compose" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVectorBase_compose" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorBase_compose" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp2);
  result = iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::SWIGTEMPLATEDISAMBIGUATOR compose((iDynTree::SpatialMotionVector const &)*arg1,(iDynTree::SpatialMotionVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVector *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_inverse" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorBase_inverse" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp1);
  result = iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::SWIGTEMPLATEDISAMBIGUATOR inverse((iDynTree::SpatialMotionVector const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_dot (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  iDynTree::DualSpace< iDynTree::SpatialMotionVector >::Type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_dot",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_dot" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__DualSpaceT_iDynTree__SpatialMotionVector_t__Type,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVectorBase_dot" "', argument " "2"" of type '" "iDynTree::DualSpace< iDynTree::SpatialMotionVector >::Type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorBase_dot" "', argument " "2"" of type '" "iDynTree::DualSpace< iDynTree::SpatialMotionVector >::Type const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::DualSpace< iDynTree::SpatialMotionVector >::Type * >(argp2);
  result = (double)((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *)arg1)->dot((iDynTree::DualSpace< iDynTree::SpatialMotionVector >::Type const &)*arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_plus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  iDynTree::SpatialMotionVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_plus" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVectorBase_plus" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorBase_plus" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp2);
  result = ((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *)arg1)->operator +((iDynTree::SpatialMotionVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_minus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  iDynTree::SpatialMotionVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_minus" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVectorBase_minus" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorBase_minus" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp2);
  result = ((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *)arg1)->operator -((iDynTree::SpatialMotionVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_uminus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_uminus" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  result = ((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *)arg1)->operator -();
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_Zero (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_Zero",argc,0,0,0)) {
    SWIG_fail;
  }
  result = iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::SWIGTEMPLATEDISAMBIGUATOR Zero();
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_asVector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Vector6 result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_asVector",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_asVector" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  result = ((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *)arg1)->asVector();
  _out = SWIG_NewPointerObj((new iDynTree::Vector6(static_cast< const iDynTree::Vector6& >(result))), SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_toString" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  result = ((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_display" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  result = ((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_toMatlab (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_toMatlab" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  result = (mxArray *)iDynTree_SpatialVector_Sl_iDynTree_SpatialMotionVector_Sg__toMatlab((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVectorBase_fromMatlab (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SpatialMotionVectorBase_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorBase_fromMatlab" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  arg2 = argv[1];
  iDynTree_SpatialVector_Sl_iDynTree_SpatialMotionVector_Sg__fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialForceVectorBase__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialForceVectorBase",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *)new iDynTree::SpatialVector< iDynTree::SpatialForceVector >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialForceVectorBase__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T *arg1 = 0 ;
  iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialForceVectorBase",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearForceVector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialForceVectorBase" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialForceVectorBase" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpatialForceVectorBase" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialForceVectorBase" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T * >(argp2);
  result = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *)new iDynTree::SpatialVector< iDynTree::SpatialForceVector >((iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T const &)*arg1,(iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialForceVectorBase__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialForceVectorBase",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialForceVectorBase" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialForceVectorBase" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  result = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *)new iDynTree::SpatialVector< iDynTree::SpatialForceVector >((iDynTree::SpatialVector< iDynTree::SpatialForceVector > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialForceVectorBase (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_SpatialForceVectorBase__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialForceVectorBase__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinearForceVector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__AngularForceVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SpatialForceVectorBase__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_SpatialForceVectorBase'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SpatialVector< iDynTree::SpatialForceVector >::SpatialVector()\n"
    "    iDynTree::SpatialVector< iDynTree::SpatialForceVector >::SpatialVector(iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T const &,iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T const &)\n"
    "    iDynTree::SpatialVector< iDynTree::SpatialForceVector >::SpatialVector(iDynTree::SpatialVector< iDynTree::SpatialForceVector > const &)\n");
  return 1;
}


int _wrap_delete_SpatialForceVectorBase (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SpatialForceVectorBase",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpatialForceVectorBase" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_getLinearVec3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T *result = 0 ;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_getLinearVec3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_getLinearVec3" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  result = (iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T *) &(arg1)->getLinearVec3();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinearForceVector3, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_getAngularVec3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T *result = 0 ;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_getAngularVec3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_getAngularVec3" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  result = (iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T *) &(arg1)->getAngularVec3();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__AngularForceVector3, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_setLinearVec3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_setLinearVec3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_setLinearVec3" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__LinearForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialForceVectorBase_setLinearVec3" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorBase_setLinearVec3" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T * >(argp2);
  (arg1)->setLinearVec3((iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_setAngularVec3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_setAngularVec3",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_setAngularVec3" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialForceVectorBase_setAngularVec3" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorBase_setAngularVec3" "', argument " "2"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T * >(argp2);
  (arg1)->setAngularVec3((iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_paren (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_paren" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpatialForceVectorBase_paren" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_getVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_getVal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_getVal" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpatialForceVectorBase_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double)((iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *)arg1)->getVal(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_setVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_setVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_setVal" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpatialForceVectorBase_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SpatialForceVectorBase_setVal" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->setVal(arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_size (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_size" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  result = (unsigned int)((iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *)arg1)->size();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_zero (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_zero" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_changePoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_changePoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_changePoint" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialForceVectorBase_changePoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorBase_changePoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = (arg1)->changePoint((iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_changeCoordFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_changeCoordFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_changeCoordFrame" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialForceVectorBase_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorBase_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = (arg1)->changeCoordFrame((iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVector *arg1 = 0 ;
  iDynTree::SpatialForceVector *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_compose" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorBase_compose" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialForceVectorBase_compose" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorBase_compose" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp2);
  result = iDynTree::SpatialVector< iDynTree::SpatialForceVector >::SWIGTEMPLATEDISAMBIGUATOR compose((iDynTree::SpatialForceVector const &)*arg1,(iDynTree::SpatialForceVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVector *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_inverse" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorBase_inverse" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp1);
  result = iDynTree::SpatialVector< iDynTree::SpatialForceVector >::SWIGTEMPLATEDISAMBIGUATOR inverse((iDynTree::SpatialForceVector const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_dot (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  iDynTree::DualSpace< iDynTree::SpatialForceVector >::Type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_dot",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_dot" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__DualSpaceT_iDynTree__SpatialForceVector_t__Type,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialForceVectorBase_dot" "', argument " "2"" of type '" "iDynTree::DualSpace< iDynTree::SpatialForceVector >::Type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorBase_dot" "', argument " "2"" of type '" "iDynTree::DualSpace< iDynTree::SpatialForceVector >::Type const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::DualSpace< iDynTree::SpatialForceVector >::Type * >(argp2);
  result = (double)((iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *)arg1)->dot((iDynTree::DualSpace< iDynTree::SpatialForceVector >::Type const &)*arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_plus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  iDynTree::SpatialForceVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_plus" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialForceVectorBase_plus" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorBase_plus" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp2);
  result = ((iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *)arg1)->operator +((iDynTree::SpatialForceVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_minus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  iDynTree::SpatialForceVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_minus" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialForceVectorBase_minus" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorBase_minus" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp2);
  result = ((iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *)arg1)->operator -((iDynTree::SpatialForceVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_uminus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_uminus" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  result = ((iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *)arg1)->operator -();
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_Zero (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_Zero",argc,0,0,0)) {
    SWIG_fail;
  }
  result = iDynTree::SpatialVector< iDynTree::SpatialForceVector >::SWIGTEMPLATEDISAMBIGUATOR Zero();
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_asVector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Vector6 result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_asVector",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_asVector" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  result = ((iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *)arg1)->asVector();
  _out = SWIG_NewPointerObj((new iDynTree::Vector6(static_cast< const iDynTree::Vector6& >(result))), SWIGTYPE_p_iDynTree__VectorFixSizeT_6_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_toString" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  result = ((iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_display" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  result = ((iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_toMatlab (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_toMatlab",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_toMatlab" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  result = (mxArray *)iDynTree_SpatialVector_Sl_iDynTree_SpatialForceVector_Sg__toMatlab((iDynTree::SpatialVector< iDynTree::SpatialForceVector > const *)arg1);
  _out = result;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialForceVectorBase_fromMatlab (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) 0 ;
  mxArray *arg2 = (mxArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SpatialForceVectorBase_fromMatlab",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorBase_fromMatlab" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  arg2 = argv[1];
  iDynTree_SpatialVector_Sl_iDynTree_SpatialForceVector_Sg__fromMatlab(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Dummy (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Dummy *result = 0 ;
  
  if (!SWIG_check_num_args("new_Dummy",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::Dummy *)new iDynTree::Dummy();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Dummy, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Dummy (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Dummy *arg1 = (iDynTree::Dummy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Dummy",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Dummy, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Dummy" "', argument " "1"" of type '" "iDynTree::Dummy *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Dummy * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMotionVector__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SpatialMotionVector *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMotionVector",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::SpatialMotionVector *)new iDynTree::SpatialMotionVector();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialMotionVector, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMotionVector__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVector::LinearVector3T *arg1 = 0 ;
  iDynTree::SpatialMotionVector::AngularVector3T *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMotionVector",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialMotionVector" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector::LinearVector3T const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMotionVector" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector::LinearVector3T const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVector::LinearVector3T * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpatialMotionVector" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector::AngularVector3T const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMotionVector" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector::AngularVector3T const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVector::AngularVector3T * >(argp2);
  result = (iDynTree::SpatialMotionVector *)new iDynTree::SpatialMotionVector((iDynTree::SpatialMotionVector::LinearVector3T const &)*arg1,(iDynTree::SpatialMotionVector::AngularVector3T const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialMotionVector, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMotionVector__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVector *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMotionVector",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialMotionVector" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMotionVector" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp1);
  result = (iDynTree::SpatialMotionVector *)new iDynTree::SpatialMotionVector((iDynTree::SpatialMotionVector const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialMotionVector, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMotionVector__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMotionVector",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialMotionVector" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMotionVector" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialMotionVector > * >(argp1);
  result = (iDynTree::SpatialMotionVector *)new iDynTree::SpatialMotionVector((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialMotionVector, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMotionVector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_SpatialMotionVector__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialMotionVector__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialMotionVector__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinearMotionVector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__AngularMotionVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SpatialMotionVector__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_SpatialMotionVector'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SpatialMotionVector::SpatialMotionVector()\n"
    "    iDynTree::SpatialMotionVector::SpatialMotionVector(iDynTree::SpatialMotionVector::LinearVector3T const &,iDynTree::SpatialMotionVector::AngularVector3T const &)\n"
    "    iDynTree::SpatialMotionVector::SpatialMotionVector(iDynTree::SpatialMotionVector const &)\n"
    "    iDynTree::SpatialMotionVector::SpatialMotionVector(iDynTree::SpatialVector< iDynTree::SpatialMotionVector > const &)\n");
  return 1;
}


int _wrap_delete_SpatialMotionVector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVector *arg1 = (iDynTree::SpatialMotionVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SpatialMotionVector",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpatialMotionVector" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVector_mtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVector *arg1 = (iDynTree::SpatialMotionVector *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("SpatialMotionVector_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMotionVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVector_mtimes" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpatialMotionVector_mtimes" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((iDynTree::SpatialMotionVector const *)arg1)->operator *(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVector_cross__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVector *arg1 = (iDynTree::SpatialMotionVector *) 0 ;
  iDynTree::SpatialMotionVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("SpatialMotionVector_cross",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMotionVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVector_cross" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVector_cross" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVector_cross" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp2);
  result = ((iDynTree::SpatialMotionVector const *)arg1)->cross((iDynTree::SpatialMotionVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVector_cross__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVector *arg1 = (iDynTree::SpatialMotionVector *) 0 ;
  iDynTree::SpatialForceVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("SpatialMotionVector_cross",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMotionVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVector_cross" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVector_cross" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVector_cross" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp2);
  result = ((iDynTree::SpatialMotionVector const *)arg1)->cross((iDynTree::SpatialForceVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMotionVector_cross (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SpatialMotionVector_cross__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialForceVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SpatialMotionVector_cross__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'SpatialMotionVector_cross'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SpatialMotionVector::cross(iDynTree::SpatialMotionVector const &) const\n"
    "    iDynTree::SpatialMotionVector::cross(iDynTree::SpatialForceVector const &) const\n");
  return 1;
}


int _wrap_SpatialMotionVector_exp (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVector *arg1 = (iDynTree::SpatialMotionVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("SpatialMotionVector_exp",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMotionVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVector_exp" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp1);
  result = ((iDynTree::SpatialMotionVector const *)arg1)->exp();
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialForceVector__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SpatialForceVector *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialForceVector",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::SpatialForceVector *)new iDynTree::SpatialForceVector();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialForceVector, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialForceVector__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVector::LinearVector3T *arg1 = 0 ;
  iDynTree::SpatialForceVector::AngularVector3T *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialForceVector",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearForceVector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialForceVector" "', argument " "1"" of type '" "iDynTree::SpatialForceVector::LinearVector3T const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialForceVector" "', argument " "1"" of type '" "iDynTree::SpatialForceVector::LinearVector3T const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVector::LinearVector3T * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpatialForceVector" "', argument " "2"" of type '" "iDynTree::SpatialForceVector::AngularVector3T const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialForceVector" "', argument " "2"" of type '" "iDynTree::SpatialForceVector::AngularVector3T const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVector::AngularVector3T * >(argp2);
  result = (iDynTree::SpatialForceVector *)new iDynTree::SpatialForceVector((iDynTree::SpatialForceVector::LinearVector3T const &)*arg1,(iDynTree::SpatialForceVector::AngularVector3T const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialForceVector, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialForceVector__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVector *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialForceVector",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialForceVector" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialForceVector" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp1);
  result = (iDynTree::SpatialForceVector *)new iDynTree::SpatialForceVector((iDynTree::SpatialForceVector const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialForceVector, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialForceVector__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialVector< iDynTree::SpatialForceVector > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialForceVector",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialForceVector" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialForceVector" "', argument " "1"" of type '" "iDynTree::SpatialVector< iDynTree::SpatialForceVector > const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialVector< iDynTree::SpatialForceVector > * >(argp1);
  result = (iDynTree::SpatialForceVector *)new iDynTree::SpatialForceVector((iDynTree::SpatialVector< iDynTree::SpatialForceVector > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialForceVector, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialForceVector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_SpatialForceVector__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialForceVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialForceVector__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialForceVector__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinearForceVector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__AngularForceVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SpatialForceVector__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_SpatialForceVector'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SpatialForceVector::SpatialForceVector()\n"
    "    iDynTree::SpatialForceVector::SpatialForceVector(iDynTree::SpatialForceVector::LinearVector3T const &,iDynTree::SpatialForceVector::AngularVector3T const &)\n"
    "    iDynTree::SpatialForceVector::SpatialForceVector(iDynTree::SpatialForceVector const &)\n"
    "    iDynTree::SpatialForceVector::SpatialForceVector(iDynTree::SpatialVector< iDynTree::SpatialForceVector > const &)\n");
  return 1;
}


int _wrap_SpatialForceVector_mtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVector *arg1 = (iDynTree::SpatialForceVector *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("SpatialForceVector_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialForceVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVector_mtimes" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpatialForceVector_mtimes" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((iDynTree::SpatialForceVector const *)arg1)->operator *(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_SpatialForceVector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVector *arg1 = (iDynTree::SpatialForceVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SpatialForceVector",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpatialForceVector" "', argument " "1"" of type '" "iDynTree::SpatialForceVector *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Twist__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Twist *result = 0 ;
  
  if (!SWIG_check_num_args("new_Twist",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::Twist *)new iDynTree::Twist();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Twist, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Twist__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinVelocity *arg1 = 0 ;
  iDynTree::AngVelocity *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Twist *result = 0 ;
  
  if (!SWIG_check_num_args("new_Twist",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Twist" "', argument " "1"" of type '" "iDynTree::LinVelocity const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Twist" "', argument " "1"" of type '" "iDynTree::LinVelocity const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinVelocity * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Twist" "', argument " "2"" of type '" "iDynTree::AngVelocity const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Twist" "', argument " "2"" of type '" "iDynTree::AngVelocity const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngVelocity * >(argp2);
  result = (iDynTree::Twist *)new iDynTree::Twist((iDynTree::LinVelocity const &)*arg1,(iDynTree::AngVelocity const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Twist, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Twist__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVector *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Twist *result = 0 ;
  
  if (!SWIG_check_num_args("new_Twist",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Twist" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Twist" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp1);
  result = (iDynTree::Twist *)new iDynTree::Twist((iDynTree::SpatialMotionVector const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Twist, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Twist__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Twist *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Twist *result = 0 ;
  
  if (!SWIG_check_num_args("new_Twist",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Twist" "', argument " "1"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Twist" "', argument " "1"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Twist * >(argp1);
  result = (iDynTree::Twist *)new iDynTree::Twist((iDynTree::Twist const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Twist, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Twist (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Twist__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Twist__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Twist__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinearMotionVector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__AngularMotionVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Twist__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Twist'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Twist::Twist()\n"
    "    iDynTree::Twist::Twist(iDynTree::LinVelocity const &,iDynTree::AngVelocity const &)\n"
    "    iDynTree::Twist::Twist(iDynTree::SpatialMotionVector const &)\n"
    "    iDynTree::Twist::Twist(iDynTree::Twist const &)\n");
  return 1;
}


int _wrap_delete_Twist (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Twist *arg1 = (iDynTree::Twist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Twist",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Twist" "', argument " "1"" of type '" "iDynTree::Twist *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Twist * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Twist_plus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Twist *arg1 = (iDynTree::Twist *) 0 ;
  iDynTree::Twist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("Twist_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Twist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Twist_plus" "', argument " "1"" of type '" "iDynTree::Twist const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Twist * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Twist_plus" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Twist_plus" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Twist * >(argp2);
  result = ((iDynTree::Twist const *)arg1)->operator +((iDynTree::Twist const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Twist_minus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Twist *arg1 = (iDynTree::Twist *) 0 ;
  iDynTree::Twist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("Twist_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Twist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Twist_minus" "', argument " "1"" of type '" "iDynTree::Twist const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Twist * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Twist_minus" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Twist_minus" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Twist * >(argp2);
  result = ((iDynTree::Twist const *)arg1)->operator -((iDynTree::Twist const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Twist_uminus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Twist *arg1 = (iDynTree::Twist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("Twist_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Twist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Twist_uminus" "', argument " "1"" of type '" "iDynTree::Twist const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Twist * >(argp1);
  result = ((iDynTree::Twist const *)arg1)->operator -();
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Twist_mtimes__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Twist *arg1 = (iDynTree::Twist *) 0 ;
  iDynTree::Twist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("Twist_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Twist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Twist_mtimes" "', argument " "1"" of type '" "iDynTree::Twist const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Twist * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Twist_mtimes" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Twist_mtimes" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Twist * >(argp2);
  result = ((iDynTree::Twist const *)arg1)->operator *((iDynTree::Twist const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Twist_mtimes__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Twist *arg1 = (iDynTree::Twist *) 0 ;
  iDynTree::SpatialMomentum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench result;
  
  if (!SWIG_check_num_args("Twist_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Twist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Twist_mtimes" "', argument " "1"" of type '" "iDynTree::Twist const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Twist * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMomentum,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Twist_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Twist_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp2);
  result = ((iDynTree::Twist const *)arg1)->operator *((iDynTree::SpatialMomentum const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Wrench(static_cast< const iDynTree::Wrench& >(result))), SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Twist_mtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Twist_mtimes__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMomentum, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Twist_mtimes__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Twist_mtimes'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Twist::operator *(iDynTree::Twist const &) const\n"
    "    iDynTree::Twist::operator *(iDynTree::SpatialMomentum const &) const\n");
  return 1;
}


int _wrap_new_Wrench__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Wrench *result = 0 ;
  
  if (!SWIG_check_num_args("new_Wrench",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::Wrench *)new iDynTree::Wrench();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Wrench, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Wrench__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Force *arg1 = 0 ;
  iDynTree::Torque *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench *result = 0 ;
  
  if (!SWIG_check_num_args("new_Wrench",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearForceVector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Wrench" "', argument " "1"" of type '" "iDynTree::Force const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Wrench" "', argument " "1"" of type '" "iDynTree::Force const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Force * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Wrench" "', argument " "2"" of type '" "iDynTree::Torque const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Wrench" "', argument " "2"" of type '" "iDynTree::Torque const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Torque * >(argp2);
  result = (iDynTree::Wrench *)new iDynTree::Wrench((iDynTree::Force const &)*arg1,(iDynTree::Torque const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Wrench, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Wrench__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVector *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Wrench *result = 0 ;
  
  if (!SWIG_check_num_args("new_Wrench",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Wrench" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Wrench" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp1);
  result = (iDynTree::Wrench *)new iDynTree::Wrench((iDynTree::SpatialForceVector const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Wrench, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Wrench__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Wrench *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Wrench *result = 0 ;
  
  if (!SWIG_check_num_args("new_Wrench",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Wrench" "', argument " "1"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Wrench" "', argument " "1"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Wrench * >(argp1);
  result = (iDynTree::Wrench *)new iDynTree::Wrench((iDynTree::Wrench const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Wrench, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Wrench (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Wrench__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Wrench, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Wrench__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialForceVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Wrench__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinearForceVector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__AngularForceVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Wrench__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Wrench'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Wrench::Wrench()\n"
    "    iDynTree::Wrench::Wrench(iDynTree::Force const &,iDynTree::Torque const &)\n"
    "    iDynTree::Wrench::Wrench(iDynTree::SpatialForceVector const &)\n"
    "    iDynTree::Wrench::Wrench(iDynTree::Wrench const &)\n");
  return 1;
}


int _wrap_delete_Wrench (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Wrench *arg1 = (iDynTree::Wrench *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Wrench",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Wrench" "', argument " "1"" of type '" "iDynTree::Wrench *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Wrench * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Wrench_plus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Wrench *arg1 = (iDynTree::Wrench *) 0 ;
  iDynTree::Wrench *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench result;
  
  if (!SWIG_check_num_args("Wrench_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Wrench, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Wrench_plus" "', argument " "1"" of type '" "iDynTree::Wrench const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Wrench * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Wrench_plus" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Wrench_plus" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Wrench * >(argp2);
  result = ((iDynTree::Wrench const *)arg1)->operator +((iDynTree::Wrench const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Wrench(static_cast< const iDynTree::Wrench& >(result))), SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Wrench_minus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Wrench *arg1 = (iDynTree::Wrench *) 0 ;
  iDynTree::Wrench *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench result;
  
  if (!SWIG_check_num_args("Wrench_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Wrench, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Wrench_minus" "', argument " "1"" of type '" "iDynTree::Wrench const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Wrench * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Wrench_minus" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Wrench_minus" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Wrench * >(argp2);
  result = ((iDynTree::Wrench const *)arg1)->operator -((iDynTree::Wrench const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Wrench(static_cast< const iDynTree::Wrench& >(result))), SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Wrench_uminus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Wrench *arg1 = (iDynTree::Wrench *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Wrench result;
  
  if (!SWIG_check_num_args("Wrench_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Wrench, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Wrench_uminus" "', argument " "1"" of type '" "iDynTree::Wrench const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Wrench * >(argp1);
  result = ((iDynTree::Wrench const *)arg1)->operator -();
  _out = SWIG_NewPointerObj((new iDynTree::Wrench(static_cast< const iDynTree::Wrench& >(result))), SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMomentum__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SpatialMomentum *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMomentum",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::SpatialMomentum *)new iDynTree::SpatialMomentum();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialMomentum, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMomentum__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinMomentum *arg1 = 0 ;
  iDynTree::AngMomentum *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMomentum *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMomentum",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearForceVector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialMomentum" "', argument " "1"" of type '" "iDynTree::LinMomentum const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMomentum" "', argument " "1"" of type '" "iDynTree::LinMomentum const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinMomentum * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularForceVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpatialMomentum" "', argument " "2"" of type '" "iDynTree::AngMomentum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMomentum" "', argument " "2"" of type '" "iDynTree::AngMomentum const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngMomentum * >(argp2);
  result = (iDynTree::SpatialMomentum *)new iDynTree::SpatialMomentum((iDynTree::LinMomentum const &)*arg1,(iDynTree::AngMomentum const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialMomentum, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMomentum__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVector *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMomentum *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMomentum",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialMomentum" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMomentum" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp1);
  result = (iDynTree::SpatialMomentum *)new iDynTree::SpatialMomentum((iDynTree::SpatialForceVector const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialMomentum, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMomentum__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMomentum *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMomentum *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMomentum",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialMomentum,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialMomentum" "', argument " "1"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMomentum" "', argument " "1"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp1);
  result = (iDynTree::SpatialMomentum *)new iDynTree::SpatialMomentum((iDynTree::SpatialMomentum const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialMomentum, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialMomentum (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_SpatialMomentum__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialMomentum, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialMomentum__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialForceVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialMomentum__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinearForceVector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__AngularForceVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SpatialMomentum__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_SpatialMomentum'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SpatialMomentum::SpatialMomentum()\n"
    "    iDynTree::SpatialMomentum::SpatialMomentum(iDynTree::LinMomentum const &,iDynTree::AngMomentum const &)\n"
    "    iDynTree::SpatialMomentum::SpatialMomentum(iDynTree::SpatialForceVector const &)\n"
    "    iDynTree::SpatialMomentum::SpatialMomentum(iDynTree::SpatialMomentum const &)\n");
  return 1;
}


int _wrap_delete_SpatialMomentum (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMomentum *arg1 = (iDynTree::SpatialMomentum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SpatialMomentum",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMomentum, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpatialMomentum" "', argument " "1"" of type '" "iDynTree::SpatialMomentum *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMomentum_plus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMomentum *arg1 = (iDynTree::SpatialMomentum *) 0 ;
  iDynTree::SpatialMomentum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMomentum result;
  
  if (!SWIG_check_num_args("SpatialMomentum_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMomentum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMomentum_plus" "', argument " "1"" of type '" "iDynTree::SpatialMomentum const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMomentum,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMomentum_plus" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMomentum_plus" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp2);
  result = ((iDynTree::SpatialMomentum const *)arg1)->operator +((iDynTree::SpatialMomentum const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMomentum(static_cast< const iDynTree::SpatialMomentum& >(result))), SWIGTYPE_p_iDynTree__SpatialMomentum, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMomentum_minus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMomentum *arg1 = (iDynTree::SpatialMomentum *) 0 ;
  iDynTree::SpatialMomentum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMomentum result;
  
  if (!SWIG_check_num_args("SpatialMomentum_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMomentum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMomentum_minus" "', argument " "1"" of type '" "iDynTree::SpatialMomentum const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMomentum,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMomentum_minus" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMomentum_minus" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp2);
  result = ((iDynTree::SpatialMomentum const *)arg1)->operator -((iDynTree::SpatialMomentum const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMomentum(static_cast< const iDynTree::SpatialMomentum& >(result))), SWIGTYPE_p_iDynTree__SpatialMomentum, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialMomentum_uminus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMomentum *arg1 = (iDynTree::SpatialMomentum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMomentum result;
  
  if (!SWIG_check_num_args("SpatialMomentum_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMomentum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMomentum_uminus" "', argument " "1"" of type '" "iDynTree::SpatialMomentum const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp1);
  result = ((iDynTree::SpatialMomentum const *)arg1)->operator -();
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMomentum(static_cast< const iDynTree::SpatialMomentum& >(result))), SWIGTYPE_p_iDynTree__SpatialMomentum, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialAcc__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SpatialAcc *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialAcc",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::SpatialAcc *)new iDynTree::SpatialAcc();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialAcc, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialAcc__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinAcceleration *arg1 = 0 ;
  iDynTree::AngAcceleration *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialAcc",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialAcc" "', argument " "1"" of type '" "iDynTree::LinAcceleration const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialAcc" "', argument " "1"" of type '" "iDynTree::LinAcceleration const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinAcceleration * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpatialAcc" "', argument " "2"" of type '" "iDynTree::AngAcceleration const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialAcc" "', argument " "2"" of type '" "iDynTree::AngAcceleration const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::AngAcceleration * >(argp2);
  result = (iDynTree::SpatialAcc *)new iDynTree::SpatialAcc((iDynTree::LinAcceleration const &)*arg1,(iDynTree::AngAcceleration const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialAcc, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialAcc__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVector *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialAcc",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialAcc" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialAcc" "', argument " "1"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp1);
  result = (iDynTree::SpatialAcc *)new iDynTree::SpatialAcc((iDynTree::SpatialMotionVector const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialAcc, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialAcc__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialAcc *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialAcc",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialAcc" "', argument " "1"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialAcc" "', argument " "1"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialAcc * >(argp1);
  result = (iDynTree::SpatialAcc *)new iDynTree::SpatialAcc((iDynTree::SpatialAcc const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialAcc, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialAcc (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_SpatialAcc__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialAcc, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialAcc__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialAcc__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinearMotionVector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__AngularMotionVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SpatialAcc__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_SpatialAcc'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SpatialAcc::SpatialAcc()\n"
    "    iDynTree::SpatialAcc::SpatialAcc(iDynTree::LinAcceleration const &,iDynTree::AngAcceleration const &)\n"
    "    iDynTree::SpatialAcc::SpatialAcc(iDynTree::SpatialMotionVector const &)\n"
    "    iDynTree::SpatialAcc::SpatialAcc(iDynTree::SpatialAcc const &)\n");
  return 1;
}


int _wrap_delete_SpatialAcc (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialAcc *arg1 = (iDynTree::SpatialAcc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SpatialAcc",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpatialAcc" "', argument " "1"" of type '" "iDynTree::SpatialAcc *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialAcc * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialAcc_plus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialAcc *arg1 = (iDynTree::SpatialAcc *) 0 ;
  iDynTree::SpatialAcc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("SpatialAcc_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialAcc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialAcc_plus" "', argument " "1"" of type '" "iDynTree::SpatialAcc const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialAcc * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialAcc_plus" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialAcc_plus" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialAcc * >(argp2);
  result = ((iDynTree::SpatialAcc const *)arg1)->operator +((iDynTree::SpatialAcc const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialAcc_minus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialAcc *arg1 = (iDynTree::SpatialAcc *) 0 ;
  iDynTree::SpatialAcc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("SpatialAcc_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialAcc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialAcc_minus" "', argument " "1"" of type '" "iDynTree::SpatialAcc const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialAcc * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialAcc_minus" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialAcc_minus" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialAcc * >(argp2);
  result = ((iDynTree::SpatialAcc const *)arg1)->operator -((iDynTree::SpatialAcc const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialAcc_uminus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialAcc *arg1 = (iDynTree::SpatialAcc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("SpatialAcc_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialAcc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialAcc_uminus" "', argument " "1"" of type '" "iDynTree::SpatialAcc const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialAcc * >(argp1);
  result = ((iDynTree::SpatialAcc const *)arg1)->operator -();
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ClassicalAcc__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::ClassicalAcc *result = 0 ;
  
  if (!SWIG_check_num_args("new_ClassicalAcc",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::ClassicalAcc *)new iDynTree::ClassicalAcc();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ClassicalAcc, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ClassicalAcc__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::ClassicalAcc *result = 0 ;
  
  if (!SWIG_check_num_args("new_ClassicalAcc",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClassicalAcc" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ClassicalAcc" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::ClassicalAcc *)new iDynTree::ClassicalAcc((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ClassicalAcc, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ClassicalAcc__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ClassicalAcc *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ClassicalAcc *result = 0 ;
  
  if (!SWIG_check_num_args("new_ClassicalAcc",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__ClassicalAcc,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClassicalAcc" "', argument " "1"" of type '" "iDynTree::ClassicalAcc const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClassicalAcc" "', argument " "1"" of type '" "iDynTree::ClassicalAcc const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ClassicalAcc * >(argp1);
  result = (iDynTree::ClassicalAcc *)new iDynTree::ClassicalAcc((iDynTree::ClassicalAcc const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ClassicalAcc, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ClassicalAcc (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_ClassicalAcc__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ClassicalAcc, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ClassicalAcc__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ClassicalAcc__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_ClassicalAcc'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ClassicalAcc::ClassicalAcc()\n"
    "    iDynTree::ClassicalAcc::ClassicalAcc(double const *,unsigned int const)\n"
    "    iDynTree::ClassicalAcc::ClassicalAcc(iDynTree::ClassicalAcc const &)\n");
  return 1;
}


int _wrap_delete_ClassicalAcc (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ClassicalAcc *arg1 = (iDynTree::ClassicalAcc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_ClassicalAcc",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ClassicalAcc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ClassicalAcc" "', argument " "1"" of type '" "iDynTree::ClassicalAcc *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ClassicalAcc * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ClassicalAcc_changeCoordFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ClassicalAcc *arg1 = (iDynTree::ClassicalAcc *) 0 ;
  iDynTree::RotationRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::ClassicalAcc *result = 0 ;
  
  if (!SWIG_check_num_args("ClassicalAcc_changeCoordFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ClassicalAcc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassicalAcc_changeCoordFrame" "', argument " "1"" of type '" "iDynTree::ClassicalAcc *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ClassicalAcc * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClassicalAcc_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClassicalAcc_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationRaw * >(argp2);
  result = (iDynTree::ClassicalAcc *) &(arg1)->changeCoordFrame((iDynTree::RotationRaw const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ClassicalAcc, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ClassicalAcc_Zero (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::ClassicalAcc result;
  
  if (!SWIG_check_num_args("ClassicalAcc_Zero",argc,0,0,0)) {
    SWIG_fail;
  }
  result = iDynTree::ClassicalAcc::Zero();
  _out = SWIG_NewPointerObj((new iDynTree::ClassicalAcc(static_cast< const iDynTree::ClassicalAcc& >(result))), SWIGTYPE_p_iDynTree__ClassicalAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Direction__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Direction *result = 0 ;
  
  if (!SWIG_check_num_args("new_Direction",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::Direction *)new iDynTree::Direction();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Direction, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Direction__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::Direction *result = 0 ;
  
  if (!SWIG_check_num_args("new_Direction",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Direction" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Direction" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Direction" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (iDynTree::Direction *)new iDynTree::Direction(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Direction, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Direction__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Direction *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Direction *result = 0 ;
  
  if (!SWIG_check_num_args("new_Direction",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Direction,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Direction" "', argument " "1"" of type '" "iDynTree::Direction const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Direction" "', argument " "1"" of type '" "iDynTree::Direction const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Direction * >(argp1);
  result = (iDynTree::Direction *)new iDynTree::Direction((iDynTree::Direction const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Direction, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Direction__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Direction *result = 0 ;
  
  if (!SWIG_check_num_args("new_Direction",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Direction" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Direction" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::Direction *)new iDynTree::Direction((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Direction, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Direction (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Direction__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Direction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Direction__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Direction__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Direction__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Direction'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Direction::Direction()\n"
    "    iDynTree::Direction::Direction(double,double,double)\n"
    "    iDynTree::Direction::Direction(iDynTree::Direction const &)\n"
    "    iDynTree::Direction::Direction(double const *,unsigned int const)\n");
  return 1;
}


int _wrap_delete_Direction (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Direction *arg1 = (iDynTree::Direction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Direction",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Direction, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Direction" "', argument " "1"" of type '" "iDynTree::Direction *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Direction * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Direction_Normalize__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Direction *arg1 = (iDynTree::Direction *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Direction_Normalize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Direction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Direction_Normalize" "', argument " "1"" of type '" "iDynTree::Direction *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Direction * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Direction_Normalize" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->Normalize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Direction_Normalize__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Direction *arg1 = (iDynTree::Direction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Direction_Normalize",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Direction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Direction_Normalize" "', argument " "1"" of type '" "iDynTree::Direction *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Direction * >(argp1);
  (arg1)->Normalize();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Direction_Normalize (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Direction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Direction_Normalize__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Direction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Direction_Normalize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Direction_Normalize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Direction::Normalize(double)\n"
    "    iDynTree::Direction::Normalize()\n");
  return 1;
}


int _wrap_Direction_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Direction *arg1 = (iDynTree::Direction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Direction_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Direction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Direction_toString" "', argument " "1"" of type '" "iDynTree::Direction const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Direction * >(argp1);
  result = ((iDynTree::Direction const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Direction_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Direction *arg1 = (iDynTree::Direction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Direction_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Direction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Direction_display" "', argument " "1"" of type '" "iDynTree::Direction const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Direction * >(argp1);
  result = ((iDynTree::Direction const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Direction_Default (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Direction result;
  
  if (!SWIG_check_num_args("Direction_Default",argc,0,0,0)) {
    SWIG_fail;
  }
  result = iDynTree::Direction::Default();
  _out = SWIG_NewPointerObj((new iDynTree::Direction(static_cast< const iDynTree::Direction& >(result))), SWIGTYPE_p_iDynTree__Direction, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Axis__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Axis *result = 0 ;
  
  if (!SWIG_check_num_args("new_Axis",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::Axis *)new iDynTree::Axis();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Axis, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Axis__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Direction *arg1 = 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Axis *result = 0 ;
  
  if (!SWIG_check_num_args("new_Axis",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Direction,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Axis" "', argument " "1"" of type '" "iDynTree::Direction const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Axis" "', argument " "1"" of type '" "iDynTree::Direction const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Direction * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Axis" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Axis" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = (iDynTree::Axis *)new iDynTree::Axis((iDynTree::Direction const &)*arg1,(iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Axis, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Axis__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Axis *result = 0 ;
  
  if (!SWIG_check_num_args("new_Axis",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Axis,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Axis" "', argument " "1"" of type '" "iDynTree::Axis const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Axis" "', argument " "1"" of type '" "iDynTree::Axis const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  result = (iDynTree::Axis *)new iDynTree::Axis((iDynTree::Axis const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Axis, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Axis (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Axis__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Axis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Axis__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Direction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Axis__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Axis'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Axis::Axis()\n"
    "    iDynTree::Axis::Axis(iDynTree::Direction const &,iDynTree::Position const &)\n"
    "    iDynTree::Axis::Axis(iDynTree::Axis const &)\n");
  return 1;
}


int _wrap_delete_Axis (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Axis",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Axis" "', argument " "1"" of type '" "iDynTree::Axis *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Axis_getDirection (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Direction *result = 0 ;
  
  if (!SWIG_check_num_args("Axis_getDirection",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis_getDirection" "', argument " "1"" of type '" "iDynTree::Axis const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  result = (iDynTree::Direction *) &((iDynTree::Axis const *)arg1)->getDirection();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Direction, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Axis_getOrigin (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("Axis_getOrigin",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis_getOrigin" "', argument " "1"" of type '" "iDynTree::Axis const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  result = (iDynTree::Position *) &((iDynTree::Axis const *)arg1)->getOrigin();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Axis_setDirection (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  iDynTree::Direction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Axis_setDirection",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis_setDirection" "', argument " "1"" of type '" "iDynTree::Axis *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Direction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Axis_setDirection" "', argument " "2"" of type '" "iDynTree::Direction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Axis_setDirection" "', argument " "2"" of type '" "iDynTree::Direction const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Direction * >(argp2);
  (arg1)->setDirection((iDynTree::Direction const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Axis_setOrigin (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Axis_setOrigin",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis_setOrigin" "', argument " "1"" of type '" "iDynTree::Axis *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Axis_setOrigin" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Axis_setOrigin" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  (arg1)->setOrigin((iDynTree::Position const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Axis_getRotationTransform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("Axis_getRotationTransform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis_getRotationTransform" "', argument " "1"" of type '" "iDynTree::Axis const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Axis_getRotationTransform" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((iDynTree::Axis const *)arg1)->getRotationTransform(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Axis_getRotationTwist (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("Axis_getRotationTwist",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis_getRotationTwist" "', argument " "1"" of type '" "iDynTree::Axis const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Axis_getRotationTwist" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((iDynTree::Axis const *)arg1)->getRotationTwist(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Axis_getRotationSpatialAcc (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("Axis_getRotationSpatialAcc",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis_getRotationSpatialAcc" "', argument " "1"" of type '" "iDynTree::Axis const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Axis_getRotationSpatialAcc" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = ((iDynTree::Axis const *)arg1)->getRotationSpatialAcc(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Axis_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Axis_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis_toString" "', argument " "1"" of type '" "iDynTree::Axis const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  result = ((iDynTree::Axis const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Axis_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Axis *arg1 = (iDynTree::Axis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Axis_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Axis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Axis_display" "', argument " "1"" of type '" "iDynTree::Axis const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Axis * >(argp1);
  result = ((iDynTree::Axis const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RotationalInertiaRaw__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::RotationalInertiaRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_RotationalInertiaRaw",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::RotationalInertiaRaw *)new iDynTree::RotationalInertiaRaw();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationalInertiaRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RotationalInertiaRaw__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::RotationalInertiaRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_RotationalInertiaRaw",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RotationalInertiaRaw" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RotationalInertiaRaw" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RotationalInertiaRaw" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (iDynTree::RotationalInertiaRaw *)new iDynTree::RotationalInertiaRaw((double const *)arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationalInertiaRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RotationalInertiaRaw__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationalInertiaRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::RotationalInertiaRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_RotationalInertiaRaw",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__RotationalInertiaRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RotationalInertiaRaw" "', argument " "1"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RotationalInertiaRaw" "', argument " "1"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationalInertiaRaw * >(argp1);
  result = (iDynTree::RotationalInertiaRaw *)new iDynTree::RotationalInertiaRaw((iDynTree::RotationalInertiaRaw const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationalInertiaRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RotationalInertiaRaw (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_RotationalInertiaRaw__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RotationalInertiaRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RotationalInertiaRaw__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_RotationalInertiaRaw__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_RotationalInertiaRaw'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::RotationalInertiaRaw::RotationalInertiaRaw()\n"
    "    iDynTree::RotationalInertiaRaw::RotationalInertiaRaw(double const *,unsigned int const,unsigned int const)\n"
    "    iDynTree::RotationalInertiaRaw::RotationalInertiaRaw(iDynTree::RotationalInertiaRaw const &)\n");
  return 1;
}


int _wrap_delete_RotationalInertiaRaw (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationalInertiaRaw *arg1 = (iDynTree::RotationalInertiaRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_RotationalInertiaRaw",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationalInertiaRaw, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RotationalInertiaRaw" "', argument " "1"" of type '" "iDynTree::RotationalInertiaRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationalInertiaRaw * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialInertiaRaw__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SpatialInertiaRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialInertiaRaw",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::SpatialInertiaRaw *)new iDynTree::SpatialInertiaRaw();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialInertiaRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialInertiaRaw__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  iDynTree::PositionRaw *arg2 = 0 ;
  iDynTree::RotationalInertiaRaw *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertiaRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialInertiaRaw",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SpatialInertiaRaw" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpatialInertiaRaw" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialInertiaRaw" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionRaw * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__RotationalInertiaRaw,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SpatialInertiaRaw" "', argument " "3"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialInertiaRaw" "', argument " "3"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::RotationalInertiaRaw * >(argp3);
  result = (iDynTree::SpatialInertiaRaw *)new iDynTree::SpatialInertiaRaw(arg1,(iDynTree::PositionRaw const &)*arg2,(iDynTree::RotationalInertiaRaw const &)*arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialInertiaRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialInertiaRaw__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertiaRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertiaRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialInertiaRaw",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialInertiaRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialInertiaRaw" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialInertiaRaw" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertiaRaw * >(argp1);
  result = (iDynTree::SpatialInertiaRaw *)new iDynTree::SpatialInertiaRaw((iDynTree::SpatialInertiaRaw const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialInertiaRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialInertiaRaw (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_SpatialInertiaRaw__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialInertiaRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialInertiaRaw__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__PositionRaw, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__RotationalInertiaRaw, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_SpatialInertiaRaw__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_SpatialInertiaRaw'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SpatialInertiaRaw::SpatialInertiaRaw()\n"
    "    iDynTree::SpatialInertiaRaw::SpatialInertiaRaw(double const,iDynTree::PositionRaw const &,iDynTree::RotationalInertiaRaw const &)\n"
    "    iDynTree::SpatialInertiaRaw::SpatialInertiaRaw(iDynTree::SpatialInertiaRaw const &)\n");
  return 1;
}


int _wrap_delete_SpatialInertiaRaw (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertiaRaw *arg1 = (iDynTree::SpatialInertiaRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SpatialInertiaRaw",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertiaRaw, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpatialInertiaRaw" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertiaRaw * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertiaRaw_fromRotationalInertiaWrtCenterOfMass (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertiaRaw *arg1 = (iDynTree::SpatialInertiaRaw *) 0 ;
  double arg2 ;
  iDynTree::PositionRaw *arg3 = 0 ;
  iDynTree::RotationalInertiaRaw *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SpatialInertiaRaw_fromRotationalInertiaWrtCenterOfMass",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertiaRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertiaRaw_fromRotationalInertiaWrtCenterOfMass" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertiaRaw * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpatialInertiaRaw_fromRotationalInertiaWrtCenterOfMass" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SpatialInertiaRaw_fromRotationalInertiaWrtCenterOfMass" "', argument " "3"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertiaRaw_fromRotationalInertiaWrtCenterOfMass" "', argument " "3"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::PositionRaw * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__RotationalInertiaRaw,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SpatialInertiaRaw_fromRotationalInertiaWrtCenterOfMass" "', argument " "4"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertiaRaw_fromRotationalInertiaWrtCenterOfMass" "', argument " "4"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::RotationalInertiaRaw * >(argp4);
  (arg1)->fromRotationalInertiaWrtCenterOfMass(arg2,(iDynTree::PositionRaw const &)*arg3,(iDynTree::RotationalInertiaRaw const &)*arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertiaRaw_getMass (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertiaRaw *arg1 = (iDynTree::SpatialInertiaRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("SpatialInertiaRaw_getMass",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertiaRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertiaRaw_getMass" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertiaRaw * >(argp1);
  result = (double)((iDynTree::SpatialInertiaRaw const *)arg1)->getMass();
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertiaRaw_getCenterOfMass (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertiaRaw *arg1 = (iDynTree::SpatialInertiaRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw result;
  
  if (!SWIG_check_num_args("SpatialInertiaRaw_getCenterOfMass",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertiaRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertiaRaw_getCenterOfMass" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertiaRaw * >(argp1);
  result = ((iDynTree::SpatialInertiaRaw const *)arg1)->getCenterOfMass();
  _out = SWIG_NewPointerObj((new iDynTree::PositionRaw(static_cast< const iDynTree::PositionRaw& >(result))), SWIGTYPE_p_iDynTree__PositionRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertiaRaw_getRotationalInertiaWrtFrameOrigin (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertiaRaw *arg1 = (iDynTree::SpatialInertiaRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::RotationalInertiaRaw result;
  
  if (!SWIG_check_num_args("SpatialInertiaRaw_getRotationalInertiaWrtFrameOrigin",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertiaRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertiaRaw_getRotationalInertiaWrtFrameOrigin" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertiaRaw * >(argp1);
  result = ((iDynTree::SpatialInertiaRaw const *)arg1)->getRotationalInertiaWrtFrameOrigin();
  _out = SWIG_NewPointerObj((new iDynTree::RotationalInertiaRaw(static_cast< const iDynTree::RotationalInertiaRaw& >(result))), SWIGTYPE_p_iDynTree__RotationalInertiaRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertiaRaw_getRotationalInertiaWrtCenterOfMass (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertiaRaw *arg1 = (iDynTree::SpatialInertiaRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::RotationalInertiaRaw result;
  
  if (!SWIG_check_num_args("SpatialInertiaRaw_getRotationalInertiaWrtCenterOfMass",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertiaRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertiaRaw_getRotationalInertiaWrtCenterOfMass" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertiaRaw * >(argp1);
  result = ((iDynTree::SpatialInertiaRaw const *)arg1)->getRotationalInertiaWrtCenterOfMass();
  _out = SWIG_NewPointerObj((new iDynTree::RotationalInertiaRaw(static_cast< const iDynTree::RotationalInertiaRaw& >(result))), SWIGTYPE_p_iDynTree__RotationalInertiaRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertiaRaw_combine (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertiaRaw *arg1 = 0 ;
  iDynTree::SpatialInertiaRaw *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertiaRaw result;
  
  if (!SWIG_check_num_args("SpatialInertiaRaw_combine",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialInertiaRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertiaRaw_combine" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertiaRaw_combine" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertiaRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialInertiaRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialInertiaRaw_combine" "', argument " "2"" of type '" "iDynTree::SpatialInertiaRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertiaRaw_combine" "', argument " "2"" of type '" "iDynTree::SpatialInertiaRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialInertiaRaw * >(argp2);
  result = iDynTree::SpatialInertiaRaw::combine((iDynTree::SpatialInertiaRaw const &)*arg1,(iDynTree::SpatialInertiaRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialInertiaRaw(static_cast< const iDynTree::SpatialInertiaRaw& >(result))), SWIGTYPE_p_iDynTree__SpatialInertiaRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertiaRaw_multiply (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertiaRaw *arg1 = (iDynTree::SpatialInertiaRaw *) 0 ;
  iDynTree::SpatialMotionVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("SpatialInertiaRaw_multiply",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertiaRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertiaRaw_multiply" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertiaRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialInertiaRaw_multiply" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertiaRaw_multiply" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp2);
  result = ((iDynTree::SpatialInertiaRaw const *)arg1)->multiply((iDynTree::SpatialMotionVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertiaRaw_zero (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertiaRaw *arg1 = (iDynTree::SpatialInertiaRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SpatialInertiaRaw_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertiaRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertiaRaw_zero" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertiaRaw * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialInertia__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SpatialInertia *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialInertia",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::SpatialInertia *)new iDynTree::SpatialInertia();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialInertia, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialInertia__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  iDynTree::PositionRaw *arg2 = 0 ;
  iDynTree::RotationalInertiaRaw *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertia *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialInertia",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SpatialInertia" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpatialInertia" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialInertia" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionRaw * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__RotationalInertiaRaw,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SpatialInertia" "', argument " "3"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialInertia" "', argument " "3"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::RotationalInertiaRaw * >(argp3);
  result = (iDynTree::SpatialInertia *)new iDynTree::SpatialInertia(arg1,(iDynTree::PositionRaw const &)*arg2,(iDynTree::RotationalInertiaRaw const &)*arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialInertia, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialInertia__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertiaRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertia *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialInertia",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialInertiaRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialInertia" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialInertia" "', argument " "1"" of type '" "iDynTree::SpatialInertiaRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertiaRaw * >(argp1);
  result = (iDynTree::SpatialInertia *)new iDynTree::SpatialInertia((iDynTree::SpatialInertiaRaw const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialInertia, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialInertia__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertia *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertia *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialInertia",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialInertia,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialInertia" "', argument " "1"" of type '" "iDynTree::SpatialInertia const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialInertia" "', argument " "1"" of type '" "iDynTree::SpatialInertia const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertia * >(argp1);
  result = (iDynTree::SpatialInertia *)new iDynTree::SpatialInertia((iDynTree::SpatialInertia const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialInertia, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SpatialInertia (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_SpatialInertia__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialInertia__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialInertiaRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialInertia__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__PositionRaw, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__RotationalInertiaRaw, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_SpatialInertia__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_SpatialInertia'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SpatialInertia::SpatialInertia()\n"
    "    iDynTree::SpatialInertia::SpatialInertia(double const,iDynTree::PositionRaw const &,iDynTree::RotationalInertiaRaw const &)\n"
    "    iDynTree::SpatialInertia::SpatialInertia(iDynTree::SpatialInertiaRaw const &)\n"
    "    iDynTree::SpatialInertia::SpatialInertia(iDynTree::SpatialInertia const &)\n");
  return 1;
}


int _wrap_delete_SpatialInertia (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertia *arg1 = (iDynTree::SpatialInertia *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SpatialInertia",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertia, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpatialInertia" "', argument " "1"" of type '" "iDynTree::SpatialInertia *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertia * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertia_combine (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertia *arg1 = 0 ;
  iDynTree::SpatialInertia *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertia result;
  
  if (!SWIG_check_num_args("SpatialInertia_combine",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialInertia,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertia_combine" "', argument " "1"" of type '" "iDynTree::SpatialInertia const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertia_combine" "', argument " "1"" of type '" "iDynTree::SpatialInertia const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertia * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialInertia,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialInertia_combine" "', argument " "2"" of type '" "iDynTree::SpatialInertia const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertia_combine" "', argument " "2"" of type '" "iDynTree::SpatialInertia const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialInertia * >(argp2);
  result = iDynTree::SpatialInertia::combine((iDynTree::SpatialInertia const &)*arg1,(iDynTree::SpatialInertia const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialInertia(static_cast< const iDynTree::SpatialInertia& >(result))), SWIGTYPE_p_iDynTree__SpatialInertia, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertia_asMatrix (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertia *arg1 = (iDynTree::SpatialInertia *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix6x6 result;
  
  if (!SWIG_check_num_args("SpatialInertia_asMatrix",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertia_asMatrix" "', argument " "1"" of type '" "iDynTree::SpatialInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertia * >(argp1);
  result = ((iDynTree::SpatialInertia const *)arg1)->asMatrix();
  _out = SWIG_NewPointerObj((new iDynTree::Matrix6x6(static_cast< const iDynTree::Matrix6x6& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertia_plus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertia *arg1 = (iDynTree::SpatialInertia *) 0 ;
  iDynTree::SpatialInertia *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertia result;
  
  if (!SWIG_check_num_args("SpatialInertia_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertia_plus" "', argument " "1"" of type '" "iDynTree::SpatialInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertia * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialInertia,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialInertia_plus" "', argument " "2"" of type '" "iDynTree::SpatialInertia const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertia_plus" "', argument " "2"" of type '" "iDynTree::SpatialInertia const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialInertia * >(argp2);
  result = ((iDynTree::SpatialInertia const *)arg1)->operator +((iDynTree::SpatialInertia const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialInertia(static_cast< const iDynTree::SpatialInertia& >(result))), SWIGTYPE_p_iDynTree__SpatialInertia, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertia_mtimes__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertia *arg1 = (iDynTree::SpatialInertia *) 0 ;
  iDynTree::SpatialMotionVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("SpatialInertia_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertia_mtimes" "', argument " "1"" of type '" "iDynTree::SpatialInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertia * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialInertia_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertia_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp2);
  result = ((iDynTree::SpatialInertia const *)arg1)->operator *((iDynTree::SpatialMotionVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertia_mtimes__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertia *arg1 = (iDynTree::SpatialInertia *) 0 ;
  iDynTree::Twist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMomentum result;
  
  if (!SWIG_check_num_args("SpatialInertia_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertia_mtimes" "', argument " "1"" of type '" "iDynTree::SpatialInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertia * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialInertia_mtimes" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertia_mtimes" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Twist * >(argp2);
  result = ((iDynTree::SpatialInertia const *)arg1)->operator *((iDynTree::Twist const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMomentum(static_cast< const iDynTree::SpatialMomentum& >(result))), SWIGTYPE_p_iDynTree__SpatialMomentum, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertia_mtimes__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertia *arg1 = (iDynTree::SpatialInertia *) 0 ;
  iDynTree::SpatialAcc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench result;
  
  if (!SWIG_check_num_args("SpatialInertia_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialInertia_mtimes" "', argument " "1"" of type '" "iDynTree::SpatialInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertia * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialInertia_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialInertia_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialAcc * >(argp2);
  result = ((iDynTree::SpatialInertia const *)arg1)->operator *((iDynTree::SpatialAcc const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Wrench(static_cast< const iDynTree::Wrench& >(result))), SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SpatialInertia_mtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SpatialInertia_mtimes__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialAcc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SpatialInertia_mtimes__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SpatialInertia_mtimes__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'SpatialInertia_mtimes'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SpatialInertia::operator *(iDynTree::SpatialMotionVector const &) const\n"
    "    iDynTree::SpatialInertia::operator *(iDynTree::Twist const &) const\n"
    "    iDynTree::SpatialInertia::operator *(iDynTree::SpatialAcc const &) const\n");
  return 1;
}


int _wrap_SpatialInertia_Zero (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SpatialInertia result;
  
  if (!SWIG_check_num_args("SpatialInertia_Zero",argc,0,0,0)) {
    SWIG_fail;
  }
  result = iDynTree::SpatialInertia::Zero();
  _out = SWIG_NewPointerObj((new iDynTree::SpatialInertia(static_cast< const iDynTree::SpatialInertia& >(result))), SWIGTYPE_p_iDynTree__SpatialInertia, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ArticulatedBodyInertia__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::ArticulatedBodyInertia *result = 0 ;
  
  if (!SWIG_check_num_args("new_ArticulatedBodyInertia",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::ArticulatedBodyInertia *)new iDynTree::ArticulatedBodyInertia();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ArticulatedBodyInertia__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::ArticulatedBodyInertia *result = 0 ;
  
  if (!SWIG_check_num_args("new_ArticulatedBodyInertia",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ArticulatedBodyInertia" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ArticulatedBodyInertia" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ArticulatedBodyInertia" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (iDynTree::ArticulatedBodyInertia *)new iDynTree::ArticulatedBodyInertia((double const *)arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ArticulatedBodyInertia__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialInertia *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ArticulatedBodyInertia *result = 0 ;
  
  if (!SWIG_check_num_args("new_ArticulatedBodyInertia",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialInertia,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ArticulatedBodyInertia" "', argument " "1"" of type '" "iDynTree::SpatialInertia const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ArticulatedBodyInertia" "', argument " "1"" of type '" "iDynTree::SpatialInertia const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialInertia * >(argp1);
  result = (iDynTree::ArticulatedBodyInertia *)new iDynTree::ArticulatedBodyInertia((iDynTree::SpatialInertia const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ArticulatedBodyInertia__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::ArticulatedBodyInertia *result = 0 ;
  
  if (!SWIG_check_num_args("new_ArticulatedBodyInertia",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ArticulatedBodyInertia" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ArticulatedBodyInertia" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  result = (iDynTree::ArticulatedBodyInertia *)new iDynTree::ArticulatedBodyInertia((iDynTree::ArticulatedBodyInertia const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ArticulatedBodyInertia (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_ArticulatedBodyInertia__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ArticulatedBodyInertia__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ArticulatedBodyInertia__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ArticulatedBodyInertia__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_ArticulatedBodyInertia'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ArticulatedBodyInertia::ArticulatedBodyInertia()\n"
    "    iDynTree::ArticulatedBodyInertia::ArticulatedBodyInertia(double const *,unsigned int const,unsigned int const)\n"
    "    iDynTree::ArticulatedBodyInertia::ArticulatedBodyInertia(iDynTree::SpatialInertia const &)\n"
    "    iDynTree::ArticulatedBodyInertia::ArticulatedBodyInertia(iDynTree::ArticulatedBodyInertia const &)\n");
  return 1;
}


int _wrap_delete_ArticulatedBodyInertia (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_ArticulatedBodyInertia",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ArticulatedBodyInertia" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_getLinearLinearSubmatrix__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix3x3 *result = 0 ;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_getLinearLinearSubmatrix",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_getLinearLinearSubmatrix" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  result = (iDynTree::Matrix3x3 *) &(arg1)->getLinearLinearSubmatrix();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_getLinearAngularSubmatrix__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix3x3 *result = 0 ;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_getLinearAngularSubmatrix",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_getLinearAngularSubmatrix" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  result = (iDynTree::Matrix3x3 *) &(arg1)->getLinearAngularSubmatrix();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_getAngularAngularSubmatrix__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix3x3 *result = 0 ;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_getAngularAngularSubmatrix",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_getAngularAngularSubmatrix" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  result = (iDynTree::Matrix3x3 *) &(arg1)->getAngularAngularSubmatrix();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_getLinearLinearSubmatrix__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix3x3 *result = 0 ;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_getLinearLinearSubmatrix",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_getLinearLinearSubmatrix" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  result = (iDynTree::Matrix3x3 *) &((iDynTree::ArticulatedBodyInertia const *)arg1)->getLinearLinearSubmatrix();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_getLinearLinearSubmatrix (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ArticulatedBodyInertia_getLinearLinearSubmatrix__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ArticulatedBodyInertia_getLinearLinearSubmatrix__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'ArticulatedBodyInertia_getLinearLinearSubmatrix'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ArticulatedBodyInertia::getLinearLinearSubmatrix()\n"
    "    iDynTree::ArticulatedBodyInertia::getLinearLinearSubmatrix() const\n");
  return 1;
}


int _wrap_ArticulatedBodyInertia_getLinearAngularSubmatrix__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix3x3 *result = 0 ;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_getLinearAngularSubmatrix",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_getLinearAngularSubmatrix" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  result = (iDynTree::Matrix3x3 *) &((iDynTree::ArticulatedBodyInertia const *)arg1)->getLinearAngularSubmatrix();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_getLinearAngularSubmatrix (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ArticulatedBodyInertia_getLinearAngularSubmatrix__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ArticulatedBodyInertia_getLinearAngularSubmatrix__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'ArticulatedBodyInertia_getLinearAngularSubmatrix'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ArticulatedBodyInertia::getLinearAngularSubmatrix()\n"
    "    iDynTree::ArticulatedBodyInertia::getLinearAngularSubmatrix() const\n");
  return 1;
}


int _wrap_ArticulatedBodyInertia_getAngularAngularSubmatrix__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix3x3 *result = 0 ;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_getAngularAngularSubmatrix",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_getAngularAngularSubmatrix" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  result = (iDynTree::Matrix3x3 *) &((iDynTree::ArticulatedBodyInertia const *)arg1)->getAngularAngularSubmatrix();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixFixSizeT_3_3_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_getAngularAngularSubmatrix (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ArticulatedBodyInertia_getAngularAngularSubmatrix__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ArticulatedBodyInertia_getAngularAngularSubmatrix__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'ArticulatedBodyInertia_getAngularAngularSubmatrix'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ArticulatedBodyInertia::getAngularAngularSubmatrix()\n"
    "    iDynTree::ArticulatedBodyInertia::getAngularAngularSubmatrix() const\n");
  return 1;
}


int _wrap_ArticulatedBodyInertia_combine (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = 0 ;
  iDynTree::ArticulatedBodyInertia *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::ArticulatedBodyInertia result;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_combine",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_combine" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyInertia_combine" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArticulatedBodyInertia_combine" "', argument " "2"" of type '" "iDynTree::ArticulatedBodyInertia const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyInertia_combine" "', argument " "2"" of type '" "iDynTree::ArticulatedBodyInertia const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp2);
  result = iDynTree::ArticulatedBodyInertia::combine((iDynTree::ArticulatedBodyInertia const &)*arg1,(iDynTree::ArticulatedBodyInertia const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::ArticulatedBodyInertia(static_cast< const iDynTree::ArticulatedBodyInertia& >(result))), SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_applyInverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  iDynTree::Wrench *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_applyInverse",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_applyInverse" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArticulatedBodyInertia_applyInverse" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyInertia_applyInverse" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Wrench * >(argp2);
  result = ((iDynTree::ArticulatedBodyInertia const *)arg1)->applyInverse((iDynTree::Wrench const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_asMatrix (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix6x6 result;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_asMatrix",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_asMatrix" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  result = ((iDynTree::ArticulatedBodyInertia const *)arg1)->asMatrix();
  _out = SWIG_NewPointerObj((new iDynTree::Matrix6x6(static_cast< const iDynTree::Matrix6x6& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_plus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  iDynTree::ArticulatedBodyInertia *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::ArticulatedBodyInertia result;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_plus" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArticulatedBodyInertia_plus" "', argument " "2"" of type '" "iDynTree::ArticulatedBodyInertia const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyInertia_plus" "', argument " "2"" of type '" "iDynTree::ArticulatedBodyInertia const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp2);
  result = ((iDynTree::ArticulatedBodyInertia const *)arg1)->operator +((iDynTree::ArticulatedBodyInertia const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::ArticulatedBodyInertia(static_cast< const iDynTree::ArticulatedBodyInertia& >(result))), SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_minus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  iDynTree::ArticulatedBodyInertia *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::ArticulatedBodyInertia result;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_minus" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArticulatedBodyInertia_minus" "', argument " "2"" of type '" "iDynTree::ArticulatedBodyInertia const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyInertia_minus" "', argument " "2"" of type '" "iDynTree::ArticulatedBodyInertia const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp2);
  result = ((iDynTree::ArticulatedBodyInertia const *)arg1)->operator -((iDynTree::ArticulatedBodyInertia const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::ArticulatedBodyInertia(static_cast< const iDynTree::ArticulatedBodyInertia& >(result))), SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_mtimes__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  iDynTree::SpatialMotionVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_mtimes" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArticulatedBodyInertia_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyInertia_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp2);
  result = ((iDynTree::ArticulatedBodyInertia const *)arg1)->operator *((iDynTree::SpatialMotionVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_mtimes__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  iDynTree::SpatialAcc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench result;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_mtimes" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArticulatedBodyInertia_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyInertia_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialAcc * >(argp2);
  result = ((iDynTree::ArticulatedBodyInertia const *)arg1)->operator *((iDynTree::SpatialAcc const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Wrench(static_cast< const iDynTree::Wrench& >(result))), SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_mtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialAcc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ArticulatedBodyInertia_mtimes__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ArticulatedBodyInertia_mtimes__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'ArticulatedBodyInertia_mtimes'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::ArticulatedBodyInertia::operator *(iDynTree::SpatialMotionVector const &) const\n"
    "    iDynTree::ArticulatedBodyInertia::operator *(iDynTree::SpatialAcc const &) const\n");
  return 1;
}


int _wrap_ArticulatedBodyInertia_zero (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::ArticulatedBodyInertia *arg1 = (iDynTree::ArticulatedBodyInertia *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_zero" "', argument " "1"" of type '" "iDynTree::ArticulatedBodyInertia *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ArticulatedBodyInertia_ABADyadHelper (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVector *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::ArticulatedBodyInertia result;
  
  if (!SWIG_check_num_args("ArticulatedBodyInertia_ABADyadHelper",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArticulatedBodyInertia_ABADyadHelper" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArticulatedBodyInertia_ABADyadHelper" "', argument " "1"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ArticulatedBodyInertia_ABADyadHelper" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = iDynTree::ArticulatedBodyInertia::ABADyadHelper((iDynTree::SpatialForceVector const &)*arg1,arg2);
  _out = SWIG_NewPointerObj((new iDynTree::ArticulatedBodyInertia(static_cast< const iDynTree::ArticulatedBodyInertia& >(result))), SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RotationRaw__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::RotationRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_RotationRaw",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::RotationRaw *)new iDynTree::RotationRaw();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RotationRaw__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_RotationRaw",argc,9,9,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RotationRaw" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RotationRaw" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RotationRaw" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RotationRaw" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_RotationRaw" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_RotationRaw" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_RotationRaw" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_RotationRaw" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(argv[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_RotationRaw" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  result = (iDynTree::RotationRaw *)new iDynTree::RotationRaw(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RotationRaw__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_RotationRaw",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RotationRaw" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RotationRaw" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RotationRaw" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (iDynTree::RotationRaw *)new iDynTree::RotationRaw((double const *)arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RotationRaw__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_RotationRaw",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RotationRaw" "', argument " "1"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RotationRaw" "', argument " "1"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  result = (iDynTree::RotationRaw *)new iDynTree::RotationRaw((iDynTree::RotationRaw const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationRaw, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RotationRaw (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_RotationRaw__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RotationRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RotationRaw__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_RotationRaw__SWIG_2(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_new_RotationRaw__SWIG_1(resc,resv,argc,argv);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_RotationRaw'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::RotationRaw::RotationRaw()\n"
    "    iDynTree::RotationRaw::RotationRaw(double,double,double,double,double,double,double,double,double)\n"
    "    iDynTree::RotationRaw::RotationRaw(double const *,unsigned int const,unsigned int const)\n"
    "    iDynTree::RotationRaw::RotationRaw(iDynTree::RotationRaw const &)\n");
  return 1;
}


int _wrap_delete_RotationRaw (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_RotationRaw",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RotationRaw" "', argument " "1"" of type '" "iDynTree::RotationRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_changeOrientFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  iDynTree::RotationRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw *result = 0 ;
  
  if (!SWIG_check_num_args("RotationRaw_changeOrientFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_changeOrientFrame" "', argument " "1"" of type '" "iDynTree::RotationRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationRaw_changeOrientFrame" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationRaw_changeOrientFrame" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationRaw * >(argp2);
  result = (iDynTree::RotationRaw *) &(arg1)->changeOrientFrame((iDynTree::RotationRaw const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_changeRefOrientFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  iDynTree::RotationRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw *result = 0 ;
  
  if (!SWIG_check_num_args("RotationRaw_changeRefOrientFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_changeRefOrientFrame" "', argument " "1"" of type '" "iDynTree::RotationRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationRaw_changeRefOrientFrame" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationRaw_changeRefOrientFrame" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationRaw * >(argp2);
  result = (iDynTree::RotationRaw *) &(arg1)->changeRefOrientFrame((iDynTree::RotationRaw const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = 0 ;
  iDynTree::RotationRaw *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_compose" "', argument " "1"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationRaw_compose" "', argument " "1"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationRaw_compose" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationRaw_compose" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationRaw * >(argp2);
  result = iDynTree::RotationRaw::compose((iDynTree::RotationRaw const &)*arg1,(iDynTree::RotationRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::RotationRaw(static_cast< const iDynTree::RotationRaw& >(result))), SWIGTYPE_p_iDynTree__RotationRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_inverse2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_inverse2",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_inverse2" "', argument " "1"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationRaw_inverse2" "', argument " "1"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  result = iDynTree::RotationRaw::inverse2((iDynTree::RotationRaw const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::RotationRaw(static_cast< const iDynTree::RotationRaw& >(result))), SWIGTYPE_p_iDynTree__RotationRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_changeCoordFrameOf__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  iDynTree::PositionRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::RotationRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationRaw_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationRaw_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionRaw * >(argp2);
  result = ((iDynTree::RotationRaw const *)arg1)->changeCoordFrameOf((iDynTree::PositionRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::PositionRaw(static_cast< const iDynTree::PositionRaw& >(result))), SWIGTYPE_p_iDynTree__PositionRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_changeCoordFrameOf__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  iDynTree::ClassicalAcc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::ClassicalAcc result;
  
  if (!SWIG_check_num_args("RotationRaw_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::RotationRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ClassicalAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationRaw_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::ClassicalAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationRaw_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::ClassicalAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ClassicalAcc * >(argp2);
  result = ((iDynTree::RotationRaw const *)arg1)->changeCoordFrameOf((iDynTree::ClassicalAcc const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::ClassicalAcc(static_cast< const iDynTree::ClassicalAcc& >(result))), SWIGTYPE_p_iDynTree__ClassicalAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_changeCoordFrameOf__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  iDynTree::RotationalInertiaRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::RotationalInertiaRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::RotationRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationalInertiaRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationRaw_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationRaw_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationalInertiaRaw * >(argp2);
  result = ((iDynTree::RotationRaw const *)arg1)->changeCoordFrameOf((iDynTree::RotationalInertiaRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::RotationalInertiaRaw(static_cast< const iDynTree::RotationalInertiaRaw& >(result))), SWIGTYPE_p_iDynTree__RotationalInertiaRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_changeCoordFrameOf (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RotationRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__PositionRaw, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RotationRaw_changeCoordFrameOf__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RotationRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__ClassicalAcc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RotationRaw_changeCoordFrameOf__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RotationRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__RotationalInertiaRaw, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RotationRaw_changeCoordFrameOf__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'RotationRaw_changeCoordFrameOf'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::RotationRaw::changeCoordFrameOf(iDynTree::PositionRaw const &) const\n"
    "    iDynTree::RotationRaw::changeCoordFrameOf(iDynTree::ClassicalAcc const &) const\n"
    "    iDynTree::RotationRaw::changeCoordFrameOf(iDynTree::RotationalInertiaRaw const &) const\n");
  return 1;
}


int _wrap_RotationRaw_RotX (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_RotX",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RotationRaw_RotX" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = iDynTree::RotationRaw::RotX(arg1);
  _out = SWIG_NewPointerObj((new iDynTree::RotationRaw(static_cast< const iDynTree::RotationRaw& >(result))), SWIGTYPE_p_iDynTree__RotationRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_RotY (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_RotY",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RotationRaw_RotY" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = iDynTree::RotationRaw::RotY(arg1);
  _out = SWIG_NewPointerObj((new iDynTree::RotationRaw(static_cast< const iDynTree::RotationRaw& >(result))), SWIGTYPE_p_iDynTree__RotationRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_RotZ (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_RotZ",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RotationRaw_RotZ" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = iDynTree::RotationRaw::RotZ(arg1);
  _out = SWIG_NewPointerObj((new iDynTree::RotationRaw(static_cast< const iDynTree::RotationRaw& >(result))), SWIGTYPE_p_iDynTree__RotationRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_RPY (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_RPY",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RotationRaw_RPY" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RotationRaw_RPY" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RotationRaw_RPY" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = iDynTree::RotationRaw::RPY(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj((new iDynTree::RotationRaw(static_cast< const iDynTree::RotationRaw& >(result))), SWIGTYPE_p_iDynTree__RotationRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_Identity (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::RotationRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_Identity",argc,0,0,0)) {
    SWIG_fail;
  }
  result = iDynTree::RotationRaw::Identity();
  _out = SWIG_NewPointerObj((new iDynTree::RotationRaw(static_cast< const iDynTree::RotationRaw& >(result))), SWIGTYPE_p_iDynTree__RotationRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("RotationRaw_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_toString" "', argument " "1"" of type '" "iDynTree::RotationRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  result = ((iDynTree::RotationRaw const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationRaw_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("RotationRaw_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_display" "', argument " "1"" of type '" "iDynTree::RotationRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  result = ((iDynTree::RotationRaw const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RotationSemantics__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::RotationSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_RotationSemantics",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::RotationSemantics *)new iDynTree::RotationSemantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationSemantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RotationSemantics__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  iDynTree::RotationSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_RotationSemantics",argc,4,4,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RotationSemantics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RotationSemantics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RotationSemantics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RotationSemantics" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (iDynTree::RotationSemantics *)new iDynTree::RotationSemantics(arg1,arg2,arg3,arg4);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationSemantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RotationSemantics__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::RotationSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_RotationSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RotationSemantics" "', argument " "1"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RotationSemantics" "', argument " "1"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  result = (iDynTree::RotationSemantics *)new iDynTree::RotationSemantics((iDynTree::RotationSemantics const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationSemantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RotationSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_RotationSemantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RotationSemantics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RotationSemantics__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_RotationSemantics__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_RotationSemantics'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::RotationSemantics::RotationSemantics()\n"
    "    iDynTree::RotationSemantics::RotationSemantics(int,int,int,int)\n"
    "    iDynTree::RotationSemantics::RotationSemantics(iDynTree::RotationSemantics const &)\n");
  return 1;
}


int _wrap_delete_RotationSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_RotationSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RotationSemantics" "', argument " "1"" of type '" "iDynTree::RotationSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_getOrientationFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("RotationSemantics_getOrientationFrame",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_getOrientationFrame" "', argument " "1"" of type '" "iDynTree::RotationSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  result = (int)((iDynTree::RotationSemantics const *)arg1)->getOrientationFrame();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_getBody (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("RotationSemantics_getBody",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_getBody" "', argument " "1"" of type '" "iDynTree::RotationSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  result = (int)((iDynTree::RotationSemantics const *)arg1)->getBody();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_getReferenceOrientationFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("RotationSemantics_getReferenceOrientationFrame",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_getReferenceOrientationFrame" "', argument " "1"" of type '" "iDynTree::RotationSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  result = (int)((iDynTree::RotationSemantics const *)arg1)->getReferenceOrientationFrame();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_getRefBody (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("RotationSemantics_getRefBody",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_getRefBody" "', argument " "1"" of type '" "iDynTree::RotationSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  result = (int)((iDynTree::RotationSemantics const *)arg1)->getRefBody();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_getCoordinateFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("RotationSemantics_getCoordinateFrame",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_getCoordinateFrame" "', argument " "1"" of type '" "iDynTree::RotationSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  result = (int)((iDynTree::RotationSemantics const *)arg1)->getCoordinateFrame();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_setOrientationFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RotationSemantics_setOrientationFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_setOrientationFrame" "', argument " "1"" of type '" "iDynTree::RotationSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RotationSemantics_setOrientationFrame" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setOrientationFrame(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_setBody (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RotationSemantics_setBody",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_setBody" "', argument " "1"" of type '" "iDynTree::RotationSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RotationSemantics_setBody" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setBody(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_setReferenceOrientationFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RotationSemantics_setReferenceOrientationFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_setReferenceOrientationFrame" "', argument " "1"" of type '" "iDynTree::RotationSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RotationSemantics_setReferenceOrientationFrame" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setReferenceOrientationFrame(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_setRefBody (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RotationSemantics_setRefBody",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_setRefBody" "', argument " "1"" of type '" "iDynTree::RotationSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RotationSemantics_setRefBody" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setRefBody(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_setCoordinateFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RotationSemantics_setCoordinateFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_setCoordinateFrame" "', argument " "1"" of type '" "iDynTree::RotationSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RotationSemantics_setCoordinateFrame" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setCoordinateFrame(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_changeOrientFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  iDynTree::RotationSemantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("RotationSemantics_changeOrientFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_changeOrientFrame" "', argument " "1"" of type '" "iDynTree::RotationSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationSemantics_changeOrientFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_changeOrientFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationSemantics * >(argp2);
  result = (bool)(arg1)->changeOrientFrame((iDynTree::RotationSemantics const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_changeRefOrientFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  iDynTree::RotationSemantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("RotationSemantics_changeRefOrientFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_changeRefOrientFrame" "', argument " "1"" of type '" "iDynTree::RotationSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationSemantics_changeRefOrientFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_changeRefOrientFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationSemantics * >(argp2);
  result = (bool)(arg1)->changeRefOrientFrame((iDynTree::RotationSemantics const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_changeCoordFrameOf (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  iDynTree::PositionSemantics *arg2 = 0 ;
  iDynTree::PositionSemantics *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("RotationSemantics_changeCoordFrameOf",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::RotationSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationSemantics_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionSemantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RotationSemantics_changeCoordFrameOf" "', argument " "3"" of type '" "iDynTree::PositionSemantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_changeCoordFrameOf" "', argument " "3"" of type '" "iDynTree::PositionSemantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::PositionSemantics * >(argp3);
  result = (bool)((iDynTree::RotationSemantics const *)arg1)->changeCoordFrameOf((iDynTree::PositionSemantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = 0 ;
  iDynTree::RotationSemantics *arg2 = 0 ;
  iDynTree::RotationSemantics *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("RotationSemantics_compose",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_compose" "', argument " "1"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_compose" "', argument " "1"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationSemantics_compose" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_compose" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationSemantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RotationSemantics_compose" "', argument " "3"" of type '" "iDynTree::RotationSemantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_compose" "', argument " "3"" of type '" "iDynTree::RotationSemantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::RotationSemantics * >(argp3);
  result = (bool)iDynTree::RotationSemantics::compose((iDynTree::RotationSemantics const &)*arg1,(iDynTree::RotationSemantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_inverse2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = 0 ;
  iDynTree::RotationSemantics *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("RotationSemantics_inverse2",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_inverse2" "', argument " "1"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_inverse2" "', argument " "1"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationSemantics_inverse2" "', argument " "2"" of type '" "iDynTree::RotationSemantics &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_inverse2" "', argument " "2"" of type '" "iDynTree::RotationSemantics &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationSemantics * >(argp2);
  result = (bool)iDynTree::RotationSemantics::inverse2((iDynTree::RotationSemantics const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("RotationSemantics_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_toString" "', argument " "1"" of type '" "iDynTree::RotationSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  result = ((iDynTree::RotationSemantics const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RotationSemantics_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("RotationSemantics_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_display" "', argument " "1"" of type '" "iDynTree::RotationSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  result = ((iDynTree::RotationSemantics const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Rotation__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Rotation *result = 0 ;
  
  if (!SWIG_check_num_args("new_Rotation",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::Rotation *)new iDynTree::Rotation();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Rotation, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Rotation__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  mxArray * _out;
  iDynTree::Rotation *result = 0 ;
  
  if (!SWIG_check_num_args("new_Rotation",argc,9,9,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Rotation" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Rotation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Rotation" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Rotation" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Rotation" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Rotation" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_Rotation" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_Rotation" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(argv[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_Rotation" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  result = (iDynTree::Rotation *)new iDynTree::Rotation(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Rotation, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Rotation__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Rotation *result = 0 ;
  
  if (!SWIG_check_num_args("new_Rotation",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Rotation" "', argument " "1"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Rotation" "', argument " "1"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  result = (iDynTree::Rotation *)new iDynTree::Rotation((iDynTree::RotationRaw const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Rotation, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Rotation__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Rotation *result = 0 ;
  
  if (!SWIG_check_num_args("new_Rotation",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Rotation" "', argument " "1"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Rotation" "', argument " "1"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  result = (iDynTree::Rotation *)new iDynTree::Rotation((iDynTree::Rotation const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Rotation, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Rotation (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Rotation__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Rotation__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RotationRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Rotation__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 9) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_new_Rotation__SWIG_1(resc,resv,argc,argv);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Rotation'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Rotation::Rotation()\n"
    "    iDynTree::Rotation::Rotation(double,double,double,double,double,double,double,double,double)\n"
    "    iDynTree::Rotation::Rotation(iDynTree::RotationRaw const &)\n"
    "    iDynTree::Rotation::Rotation(iDynTree::Rotation const &)\n");
  return 1;
}


int _wrap_delete_Rotation (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Rotation",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Rotation" "', argument " "1"" of type '" "iDynTree::Rotation *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_getSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::RotationSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("Rotation_getSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_getSemantics" "', argument " "1"" of type '" "iDynTree::Rotation *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  result = (iDynTree::RotationSemantics *) &(arg1)->getSemantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeOrientFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Rotation *result = 0 ;
  
  if (!SWIG_check_num_args("Rotation_changeOrientFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeOrientFrame" "', argument " "1"" of type '" "iDynTree::Rotation *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeOrientFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeOrientFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = (iDynTree::Rotation *) &(arg1)->changeOrientFrame((iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeRefOrientFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Rotation *result = 0 ;
  
  if (!SWIG_check_num_args("Rotation_changeRefOrientFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeRefOrientFrame" "', argument " "1"" of type '" "iDynTree::Rotation *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeRefOrientFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeRefOrientFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = (iDynTree::Rotation *) &(arg1)->changeRefOrientFrame((iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeCoordinateFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Rotation *result = 0 ;
  
  if (!SWIG_check_num_args("Rotation_changeCoordinateFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeCoordinateFrame" "', argument " "1"" of type '" "iDynTree::Rotation *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeCoordinateFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeCoordinateFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = (iDynTree::Rotation *) &(arg1)->changeCoordinateFrame((iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("Rotation_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_compose" "', argument " "1"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_compose" "', argument " "1"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_compose" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_compose" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = iDynTree::Rotation::compose((iDynTree::Rotation const &)*arg1,(iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_inverse2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("Rotation_inverse2",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_inverse2" "', argument " "1"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_inverse2" "', argument " "1"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  result = iDynTree::Rotation::inverse2((iDynTree::Rotation const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeCoordFrameOf__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Rotation_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->changeCoordFrameOf((iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeCoordFrameOf__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::SpatialMotionVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("Rotation_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::SpatialMotionVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVector * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->changeCoordFrameOf((iDynTree::SpatialMotionVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeCoordFrameOf__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::SpatialForceVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("Rotation_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->changeCoordFrameOf((iDynTree::SpatialForceVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeCoordFrameOf__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Twist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("Rotation_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Twist * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->changeCoordFrameOf((iDynTree::Twist const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeCoordFrameOf__SWIG_4 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::SpatialAcc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("Rotation_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialAcc * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->changeCoordFrameOf((iDynTree::SpatialAcc const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeCoordFrameOf__SWIG_5 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::SpatialMomentum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMomentum result;
  
  if (!SWIG_check_num_args("Rotation_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMomentum,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->changeCoordFrameOf((iDynTree::SpatialMomentum const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMomentum(static_cast< const iDynTree::SpatialMomentum& >(result))), SWIGTYPE_p_iDynTree__SpatialMomentum, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeCoordFrameOf__SWIG_6 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Wrench *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench result;
  
  if (!SWIG_check_num_args("Rotation_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Wrench * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->changeCoordFrameOf((iDynTree::Wrench const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Wrench(static_cast< const iDynTree::Wrench& >(result))), SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeCoordFrameOf__SWIG_7 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Direction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Direction result;
  
  if (!SWIG_check_num_args("Rotation_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Direction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::Direction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::Direction const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Direction * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->changeCoordFrameOf((iDynTree::Direction const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Direction(static_cast< const iDynTree::Direction& >(result))), SWIGTYPE_p_iDynTree__Direction, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeCoordFrameOf__SWIG_8 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Axis *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Axis result;
  
  if (!SWIG_check_num_args("Rotation_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Axis,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::Axis const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::Axis const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Axis * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->changeCoordFrameOf((iDynTree::Axis const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Axis(static_cast< const iDynTree::Axis& >(result))), SWIGTYPE_p_iDynTree__Axis, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeCoordFrameOf__SWIG_9 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::ClassicalAcc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::ClassicalAcc result;
  
  if (!SWIG_check_num_args("Rotation_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ClassicalAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::ClassicalAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::ClassicalAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ClassicalAcc * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->changeCoordFrameOf((iDynTree::ClassicalAcc const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::ClassicalAcc(static_cast< const iDynTree::ClassicalAcc& >(result))), SWIGTYPE_p_iDynTree__ClassicalAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeCoordFrameOf__SWIG_10 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::RotationalInertiaRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::RotationalInertiaRaw result;
  
  if (!SWIG_check_num_args("Rotation_changeCoordFrameOf",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeCoordFrameOf" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationalInertiaRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeCoordFrameOf" "', argument " "2"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationalInertiaRaw * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->changeCoordFrameOf((iDynTree::RotationalInertiaRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::RotationalInertiaRaw(static_cast< const iDynTree::RotationalInertiaRaw& >(result))), SWIGTYPE_p_iDynTree__RotationalInertiaRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_changeCoordFrameOf (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_changeCoordFrameOf__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_changeCoordFrameOf__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMomentum, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_changeCoordFrameOf__SWIG_5(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialAcc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_changeCoordFrameOf__SWIG_4(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_changeCoordFrameOf__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Wrench, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_changeCoordFrameOf__SWIG_6(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialForceVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_changeCoordFrameOf__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Direction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_changeCoordFrameOf__SWIG_7(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Axis, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_changeCoordFrameOf__SWIG_8(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__ClassicalAcc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_changeCoordFrameOf__SWIG_9(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__RotationalInertiaRaw, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_changeCoordFrameOf__SWIG_10(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Rotation_changeCoordFrameOf'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Rotation::changeCoordFrameOf(iDynTree::Position const &) const\n"
    "    iDynTree::Rotation::changeCoordFrameOf(iDynTree::SpatialMotionVector const &) const\n"
    "    iDynTree::Rotation::changeCoordFrameOf(iDynTree::SpatialForceVector const &) const\n"
    "    iDynTree::Rotation::changeCoordFrameOf(iDynTree::Twist const &) const\n"
    "    iDynTree::Rotation::changeCoordFrameOf(iDynTree::SpatialAcc const &) const\n"
    "    iDynTree::Rotation::changeCoordFrameOf(iDynTree::SpatialMomentum const &) const\n"
    "    iDynTree::Rotation::changeCoordFrameOf(iDynTree::Wrench const &) const\n"
    "    iDynTree::Rotation::changeCoordFrameOf(iDynTree::Direction const &) const\n"
    "    iDynTree::Rotation::changeCoordFrameOf(iDynTree::Axis const &) const\n"
    "    iDynTree::Rotation::changeCoordFrameOf(iDynTree::ClassicalAcc const &) const\n"
    "    iDynTree::Rotation::changeCoordFrameOf(iDynTree::RotationalInertiaRaw const &) const\n");
  return 1;
}


int _wrap_Rotation_mtimes__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("Rotation_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_mtimes" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->operator *((iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("Rotation_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_inverse" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  result = ((iDynTree::Rotation const *)arg1)->inverse();
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_mtimes__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Rotation_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_mtimes" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->operator *((iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_mtimes__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::SpatialForceVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("Rotation_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_mtimes" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->operator *((iDynTree::SpatialForceVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_mtimes__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Twist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("Rotation_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_mtimes" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Twist * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->operator *((iDynTree::Twist const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_mtimes__SWIG_4 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Wrench *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench result;
  
  if (!SWIG_check_num_args("Rotation_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_mtimes" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Wrench * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->operator *((iDynTree::Wrench const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Wrench(static_cast< const iDynTree::Wrench& >(result))), SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_mtimes__SWIG_5 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Direction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Direction result;
  
  if (!SWIG_check_num_args("Rotation_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_mtimes" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Direction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Direction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Direction const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Direction * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->operator *((iDynTree::Direction const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Direction(static_cast< const iDynTree::Direction& >(result))), SWIGTYPE_p_iDynTree__Direction, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_mtimes__SWIG_6 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Axis *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Axis result;
  
  if (!SWIG_check_num_args("Rotation_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_mtimes" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Axis,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Axis const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Axis const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Axis * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->operator *((iDynTree::Axis const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Axis(static_cast< const iDynTree::Axis& >(result))), SWIGTYPE_p_iDynTree__Axis, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_mtimes__SWIG_7 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::SpatialAcc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("Rotation_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_mtimes" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialAcc * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->operator *((iDynTree::SpatialAcc const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_mtimes__SWIG_8 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::SpatialMomentum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMomentum result;
  
  if (!SWIG_check_num_args("Rotation_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_mtimes" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMomentum,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->operator *((iDynTree::SpatialMomentum const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMomentum(static_cast< const iDynTree::SpatialMomentum& >(result))), SWIGTYPE_p_iDynTree__SpatialMomentum, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_mtimes__SWIG_9 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::ClassicalAcc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::ClassicalAcc result;
  
  if (!SWIG_check_num_args("Rotation_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_mtimes" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ClassicalAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::ClassicalAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::ClassicalAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ClassicalAcc * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->operator *((iDynTree::ClassicalAcc const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::ClassicalAcc(static_cast< const iDynTree::ClassicalAcc& >(result))), SWIGTYPE_p_iDynTree__ClassicalAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_mtimes__SWIG_10 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::RotationalInertiaRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::RotationalInertiaRaw result;
  
  if (!SWIG_check_num_args("Rotation_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_mtimes" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationalInertiaRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::RotationalInertiaRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationalInertiaRaw * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->operator *((iDynTree::RotationalInertiaRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::RotationalInertiaRaw(static_cast< const iDynTree::RotationalInertiaRaw& >(result))), SWIGTYPE_p_iDynTree__RotationalInertiaRaw, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_mtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_mtimes__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_mtimes__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Wrench, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_mtimes__SWIG_4(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_mtimes__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMomentum, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_mtimes__SWIG_8(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Direction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_mtimes__SWIG_5(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Axis, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_mtimes__SWIG_6(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialAcc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_mtimes__SWIG_7(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialForceVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_mtimes__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__ClassicalAcc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_mtimes__SWIG_9(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__RotationalInertiaRaw, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_mtimes__SWIG_10(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Rotation_mtimes'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Rotation::operator *(iDynTree::Rotation const &) const\n"
    "    iDynTree::Rotation::operator *(iDynTree::Position const &) const\n"
    "    iDynTree::Rotation::operator *(iDynTree::SpatialForceVector const &) const\n"
    "    iDynTree::Rotation::operator *(iDynTree::Twist const &) const\n"
    "    iDynTree::Rotation::operator *(iDynTree::Wrench const &) const\n"
    "    iDynTree::Rotation::operator *(iDynTree::Direction const &) const\n"
    "    iDynTree::Rotation::operator *(iDynTree::Axis const &) const\n"
    "    iDynTree::Rotation::operator *(iDynTree::SpatialAcc const &) const\n"
    "    iDynTree::Rotation::operator *(iDynTree::SpatialMomentum const &) const\n"
    "    iDynTree::Rotation::operator *(iDynTree::ClassicalAcc const &) const\n"
    "    iDynTree::Rotation::operator *(iDynTree::RotationalInertiaRaw const &) const\n");
  return 1;
}


int _wrap_Rotation_log (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::AngularMotionVector3 result;
  
  if (!SWIG_check_num_args("Rotation_log",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_log" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  result = ((iDynTree::Rotation const *)arg1)->log();
  _out = SWIG_NewPointerObj((new iDynTree::AngularMotionVector3(static_cast< const iDynTree::AngularMotionVector3& >(result))), SWIGTYPE_p_iDynTree__AngularMotionVector3, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_getRPY (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Rotation_getRPY",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_getRPY" "', argument " "1"" of type '" "iDynTree::Rotation *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_getRPY" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_getRPY" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Rotation_getRPY" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_getRPY" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Rotation_getRPY" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_getRPY" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  (arg1)->getRPY(*arg2,*arg3,*arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_RotX (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("Rotation_RotX",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Rotation_RotX" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = iDynTree::Rotation::RotX(arg1);
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_RotY (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("Rotation_RotY",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Rotation_RotY" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = iDynTree::Rotation::RotY(arg1);
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_RotZ (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("Rotation_RotZ",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Rotation_RotZ" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = iDynTree::Rotation::RotZ(arg1);
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_RotAxis (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Direction *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("Rotation_RotAxis",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Direction,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_RotAxis" "', argument " "1"" of type '" "iDynTree::Direction const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_RotAxis" "', argument " "1"" of type '" "iDynTree::Direction const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Direction * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation_RotAxis" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = iDynTree::Rotation::RotAxis((iDynTree::Direction const &)*arg1,arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_RPY (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("Rotation_RPY",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Rotation_RPY" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation_RPY" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Rotation_RPY" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = iDynTree::Rotation::RPY(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_Identity (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("Rotation_Identity",argc,0,0,0)) {
    SWIG_fail;
  }
  result = iDynTree::Rotation::Identity();
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Rotation_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_toString" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  result = ((iDynTree::Rotation const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Rotation_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Rotation_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_display" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  result = ((iDynTree::Rotation const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_TransformSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = 0 ;
  iDynTree::RotationSemantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::TransformSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_TransformSemantics",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TransformSemantics" "', argument " "1"" of type '" "iDynTree::PositionSemantics &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransformSemantics" "', argument " "1"" of type '" "iDynTree::PositionSemantics &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TransformSemantics" "', argument " "2"" of type '" "iDynTree::RotationSemantics &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransformSemantics" "', argument " "2"" of type '" "iDynTree::RotationSemantics &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationSemantics * >(argp2);
  result = (iDynTree::TransformSemantics *)new iDynTree::TransformSemantics(*arg1,*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__TransformSemantics, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_TransformSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_TransformSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TransformSemantics" "', argument " "1"" of type '" "iDynTree::TransformSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TransformSemantics_getRotationSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::RotationSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("TransformSemantics_getRotationSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_getRotationSemantics" "', argument " "1"" of type '" "iDynTree::TransformSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  result = (iDynTree::RotationSemantics *) &((iDynTree::TransformSemantics const *)arg1)->getRotationSemantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TransformSemantics_getPositionSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::PositionSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("TransformSemantics_getPositionSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_getPositionSemantics" "', argument " "1"" of type '" "iDynTree::TransformSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  result = (iDynTree::PositionSemantics *) &((iDynTree::TransformSemantics const *)arg1)->getPositionSemantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TransformSemantics_setRotationSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  iDynTree::RotationSemantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("TransformSemantics_setRotationSemantics",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_setRotationSemantics" "', argument " "1"" of type '" "iDynTree::TransformSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformSemantics_setRotationSemantics" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformSemantics_setRotationSemantics" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationSemantics * >(argp2);
  result = (bool)(arg1)->setRotationSemantics((iDynTree::RotationSemantics const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TransformSemantics_setPositionSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  iDynTree::PositionSemantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("TransformSemantics_setPositionSemantics",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_setPositionSemantics" "', argument " "1"" of type '" "iDynTree::TransformSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformSemantics_setPositionSemantics" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformSemantics_setPositionSemantics" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionSemantics * >(argp2);
  result = (bool)(arg1)->setPositionSemantics((iDynTree::PositionSemantics const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TransformSemantics_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("TransformSemantics_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_toString" "', argument " "1"" of type '" "iDynTree::TransformSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  result = ((iDynTree::TransformSemantics const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_TransformSemantics_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("TransformSemantics_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_display" "', argument " "1"" of type '" "iDynTree::TransformSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  result = ((iDynTree::TransformSemantics const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Transform__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Transform *result = 0 ;
  
  if (!SWIG_check_num_args("new_Transform",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::Transform *)new iDynTree::Transform();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Transform, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Transform__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Transform *result = 0 ;
  
  if (!SWIG_check_num_args("new_Transform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Transform" "', argument " "1"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Transform" "', argument " "1"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Transform" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Transform" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = (iDynTree::Transform *)new iDynTree::Transform((iDynTree::Rotation const &)*arg1,(iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Transform, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Transform__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Transform *result = 0 ;
  
  if (!SWIG_check_num_args("new_Transform",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Transform" "', argument " "1"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Transform" "', argument " "1"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = (iDynTree::Transform *)new iDynTree::Transform((iDynTree::Transform const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Transform, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Transform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Transform__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Transform__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Transform__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Transform'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Transform::Transform()\n"
    "    iDynTree::Transform::Transform(iDynTree::Rotation const &,iDynTree::Position const &)\n"
    "    iDynTree::Transform::Transform(iDynTree::Transform const &)\n");
  return 1;
}


int _wrap_delete_Transform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Transform",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Transform" "', argument " "1"" of type '" "iDynTree::Transform *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_getSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::TransformSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("Transform_getSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_getSemantics" "', argument " "1"" of type '" "iDynTree::Transform *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = (iDynTree::TransformSemantics *) &(arg1)->getSemantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_getRotation (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Rotation *result = 0 ;
  
  if (!SWIG_check_num_args("Transform_getRotation",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_getRotation" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = (iDynTree::Rotation *) &((iDynTree::Transform const *)arg1)->getRotation();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_getPosition (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("Transform_getPosition",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_getPosition" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = (iDynTree::Position *) &((iDynTree::Transform const *)arg1)->getPosition();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_setRotation (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Transform_setRotation",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_setRotation" "', argument " "1"" of type '" "iDynTree::Transform *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_setRotation" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_setRotation" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  (arg1)->setRotation((iDynTree::Rotation const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_setPosition (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Transform_setPosition",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_setPosition" "', argument " "1"" of type '" "iDynTree::Transform *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_setPosition" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_setPosition" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  (arg1)->setPosition((iDynTree::Position const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = 0 ;
  iDynTree::Transform *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("Transform_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_compose" "', argument " "1"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_compose" "', argument " "1"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_compose" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_compose" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  result = iDynTree::Transform::compose((iDynTree::Transform const &)*arg1,(iDynTree::Transform const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_inverse2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("Transform_inverse2",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_inverse2" "', argument " "1"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_inverse2" "', argument " "1"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = iDynTree::Transform::inverse2((iDynTree::Transform const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_mtimes__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::Transform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::Transform const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("Transform_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_inverse" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = ((iDynTree::Transform const *)arg1)->inverse();
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_mtimes__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_mtimes__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::SpatialForceVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVector result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialForceVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVector * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::SpatialForceVector const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVector(static_cast< const iDynTree::SpatialForceVector& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_mtimes__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::Wrench *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Wrench * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::Wrench const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Wrench(static_cast< const iDynTree::Wrench& >(result))), SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_mtimes__SWIG_4 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::Twist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Twist * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::Twist const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_mtimes__SWIG_5 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::SpatialMomentum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMomentum result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMomentum,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMomentum const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMomentum * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::SpatialMomentum const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMomentum(static_cast< const iDynTree::SpatialMomentum& >(result))), SWIGTYPE_p_iDynTree__SpatialMomentum, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_mtimes__SWIG_6 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::SpatialAcc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialAcc * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::SpatialAcc const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_mtimes__SWIG_7 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::SpatialInertia *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertia result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialInertia,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialInertia const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialInertia const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialInertia * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::SpatialInertia const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialInertia(static_cast< const iDynTree::SpatialInertia& >(result))), SWIGTYPE_p_iDynTree__SpatialInertia, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_mtimes__SWIG_8 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::ArticulatedBodyInertia *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::ArticulatedBodyInertia result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::ArticulatedBodyInertia const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::ArticulatedBodyInertia const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::ArticulatedBodyInertia * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::ArticulatedBodyInertia const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::ArticulatedBodyInertia(static_cast< const iDynTree::ArticulatedBodyInertia& >(result))), SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_mtimes__SWIG_9 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::Direction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Direction result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Direction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Direction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Direction const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Direction * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::Direction const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Direction(static_cast< const iDynTree::Direction& >(result))), SWIGTYPE_p_iDynTree__Direction, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_mtimes__SWIG_10 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::Axis *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Axis result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Axis,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Axis const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Axis const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Axis * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::Axis const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Axis(static_cast< const iDynTree::Axis& >(result))), SWIGTYPE_p_iDynTree__Axis, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_mtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Wrench, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMomentum, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_5(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_4(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialForceVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialAcc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_6(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialInertia, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_7(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_8(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Direction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_9(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Axis, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_10(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Transform_mtimes'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Transform::operator *(iDynTree::Transform const &) const\n"
    "    iDynTree::Transform::operator *(iDynTree::Position const &) const\n"
    "    iDynTree::Transform::operator *(iDynTree::SpatialForceVector const &) const\n"
    "    iDynTree::Transform::operator *(iDynTree::Wrench const &) const\n"
    "    iDynTree::Transform::operator *(iDynTree::Twist const &) const\n"
    "    iDynTree::Transform::operator *(iDynTree::SpatialMomentum const &) const\n"
    "    iDynTree::Transform::operator *(iDynTree::SpatialAcc const &) const\n"
    "    iDynTree::Transform::operator *(iDynTree::SpatialInertia const &) const\n"
    "    iDynTree::Transform::operator *(iDynTree::ArticulatedBodyInertia const &) const\n"
    "    iDynTree::Transform::operator *(iDynTree::Direction const &) const\n"
    "    iDynTree::Transform::operator *(iDynTree::Axis const &) const\n");
  return 1;
}


int _wrap_Transform_Identity (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("Transform_Identity",argc,0,0,0)) {
    SWIG_fail;
  }
  result = iDynTree::Transform::Identity();
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_asHomogeneousTransform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix4x4 result;
  
  if (!SWIG_check_num_args("Transform_asHomogeneousTransform",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_asHomogeneousTransform" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = ((iDynTree::Transform const *)arg1)->asHomogeneousTransform();
  _out = SWIG_NewPointerObj((new iDynTree::Matrix4x4(static_cast< const iDynTree::Matrix4x4& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_4_4_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_asAdjointTransform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix6x6 result;
  
  if (!SWIG_check_num_args("Transform_asAdjointTransform",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_asAdjointTransform" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = ((iDynTree::Transform const *)arg1)->asAdjointTransform();
  _out = SWIG_NewPointerObj((new iDynTree::Matrix6x6(static_cast< const iDynTree::Matrix6x6& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_asAdjointTransformWrench (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Matrix6x6 result;
  
  if (!SWIG_check_num_args("Transform_asAdjointTransformWrench",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_asAdjointTransformWrench" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = ((iDynTree::Transform const *)arg1)->asAdjointTransformWrench();
  _out = SWIG_NewPointerObj((new iDynTree::Matrix6x6(static_cast< const iDynTree::Matrix6x6& >(result))), SWIGTYPE_p_iDynTree__MatrixFixSizeT_6_6_t, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_log (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("Transform_log",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_log" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = ((iDynTree::Transform const *)arg1)->log();
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Transform_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_toString" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = ((iDynTree::Transform const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Transform_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Transform_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_display" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = ((iDynTree::Transform const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LINK_INVALID_INDEX_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkIndex arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LINK_INVALID_INDEX_set",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "LINK_INVALID_INDEX_set" "', argument " "1"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg1 = static_cast< iDynTree::LinkIndex >(val1);
  iDynTree::LINK_INVALID_INDEX = arg1;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LINK_INVALID_INDEX_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("LINK_INVALID_INDEX_get",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::LinkIndex)iDynTree::LINK_INVALID_INDEX;
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LINK_INVALID_NAME_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LINK_INVALID_NAME_set",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LINK_INVALID_NAME_set" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LINK_INVALID_NAME_set" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  iDynTree::LINK_INVALID_NAME = *arg1;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_LINK_INVALID_NAME_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  std::string *result = 0 ;
  
  if (!SWIG_check_num_args("LINK_INVALID_NAME_get",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (std::string *) &iDynTree::LINK_INVALID_NAME;
  _out = SWIG_From_std_string(static_cast< std::string >(*result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_JOINT_INVALID_INDEX_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("JOINT_INVALID_INDEX_set",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JOINT_INVALID_INDEX_set" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  iDynTree::JOINT_INVALID_INDEX = arg1;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_JOINT_INVALID_INDEX_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("JOINT_INVALID_INDEX_get",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (int)iDynTree::JOINT_INVALID_INDEX;
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_JOINT_INVALID_NAME_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("JOINT_INVALID_NAME_set",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JOINT_INVALID_NAME_set" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JOINT_INVALID_NAME_set" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  iDynTree::JOINT_INVALID_NAME = *arg1;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_JOINT_INVALID_NAME_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  std::string *result = 0 ;
  
  if (!SWIG_check_num_args("JOINT_INVALID_NAME_get",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (std::string *) &iDynTree::JOINT_INVALID_NAME;
  _out = SWIG_From_std_string(static_cast< std::string >(*result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FRAME_INVALID_INDEX_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FRAME_INVALID_INDEX_set",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FRAME_INVALID_INDEX_set" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  iDynTree::FRAME_INVALID_INDEX = arg1;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FRAME_INVALID_INDEX_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("FRAME_INVALID_INDEX_get",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (int)iDynTree::FRAME_INVALID_INDEX;
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FRAME_INVALID_NAME_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FRAME_INVALID_NAME_set",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FRAME_INVALID_NAME_set" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FRAME_INVALID_NAME_set" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  iDynTree::FRAME_INVALID_NAME = *arg1;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_FRAME_INVALID_NAME_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  std::string *result = 0 ;
  
  if (!SWIG_check_num_args("FRAME_INVALID_NAME_get",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (std::string *) &iDynTree::FRAME_INVALID_NAME;
  _out = SWIG_From_std_string(static_cast< std::string >(*result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkPositions__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::LinkPositions *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkPositions",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LinkPositions" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (iDynTree::LinkPositions *)new iDynTree::LinkPositions(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkPositions, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkPositions__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::LinkPositions *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkPositions",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::LinkPositions *)new iDynTree::LinkPositions();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkPositions, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkPositions__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkPositions *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkPositions",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinkPositions" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinkPositions" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::LinkPositions *)new iDynTree::LinkPositions((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkPositions, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkPositions (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_LinkPositions__SWIG_1(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinkPositions__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LinkPositions__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_LinkPositions'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkPositions::LinkPositions(unsigned int)\n"
    "    iDynTree::LinkPositions::LinkPositions()\n"
    "    iDynTree::LinkPositions::LinkPositions(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkPositions_resize__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkPositions *arg1 = (iDynTree::LinkPositions *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkPositions_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkPositions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkPositions_resize" "', argument " "1"" of type '" "iDynTree::LinkPositions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkPositions * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkPositions_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkPositions_resize__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkPositions *arg1 = (iDynTree::LinkPositions *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkPositions_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkPositions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkPositions_resize" "', argument " "1"" of type '" "iDynTree::LinkPositions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkPositions * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkPositions_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkPositions_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkPositions_resize (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkPositions, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LinkPositions_resize__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkPositions, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkPositions_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkPositions_resize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkPositions::resize(unsigned int)\n"
    "    iDynTree::LinkPositions::resize(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkPositions_paren__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkPositions *arg1 = (iDynTree::LinkPositions *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Transform *result = 0 ;
  
  if (!SWIG_check_num_args("LinkPositions_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkPositions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkPositions_paren" "', argument " "1"" of type '" "iDynTree::LinkPositions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkPositions * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkPositions_paren" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::Transform *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkPositions_paren__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkPositions *arg1 = (iDynTree::LinkPositions *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Transform *result = 0 ;
  
  if (!SWIG_check_num_args("LinkPositions_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkPositions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkPositions_paren" "', argument " "1"" of type '" "iDynTree::LinkPositions const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkPositions * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkPositions_paren" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::Transform *) &((iDynTree::LinkPositions const *)arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkPositions_paren (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkPositions, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkPositions_paren__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkPositions, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkPositions_paren__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkPositions_paren'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkPositions::operator ()(iDynTree::LinkIndex const)\n"
    "    iDynTree::LinkPositions::operator ()(iDynTree::LinkIndex const) const\n");
  return 1;
}


int _wrap_delete_LinkPositions (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkPositions *arg1 = (iDynTree::LinkPositions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_LinkPositions",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkPositions, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinkPositions" "', argument " "1"" of type '" "iDynTree::LinkPositions *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkPositions * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkWrenches__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::LinkWrenches *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkWrenches",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LinkWrenches" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (iDynTree::LinkWrenches *)new iDynTree::LinkWrenches(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkWrenches, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkWrenches__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::LinkWrenches *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkWrenches",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::LinkWrenches *)new iDynTree::LinkWrenches();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkWrenches, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkWrenches__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkWrenches *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkWrenches",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinkWrenches" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinkWrenches" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::LinkWrenches *)new iDynTree::LinkWrenches((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkWrenches, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkWrenches (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_LinkWrenches__SWIG_1(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinkWrenches__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LinkWrenches__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_LinkWrenches'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkWrenches::LinkWrenches(unsigned int)\n"
    "    iDynTree::LinkWrenches::LinkWrenches()\n"
    "    iDynTree::LinkWrenches::LinkWrenches(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkWrenches_resize__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkWrenches *arg1 = (iDynTree::LinkWrenches *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkWrenches_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkWrenches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkWrenches_resize" "', argument " "1"" of type '" "iDynTree::LinkWrenches *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkWrenches * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkWrenches_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkWrenches_resize__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkWrenches *arg1 = (iDynTree::LinkWrenches *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkWrenches_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkWrenches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkWrenches_resize" "', argument " "1"" of type '" "iDynTree::LinkWrenches *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkWrenches * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkWrenches_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkWrenches_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkWrenches_resize (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkWrenches, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LinkWrenches_resize__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkWrenches, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkWrenches_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkWrenches_resize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkWrenches::resize(unsigned int)\n"
    "    iDynTree::LinkWrenches::resize(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkWrenches_paren__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkWrenches *arg1 = (iDynTree::LinkWrenches *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench *result = 0 ;
  
  if (!SWIG_check_num_args("LinkWrenches_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkWrenches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkWrenches_paren" "', argument " "1"" of type '" "iDynTree::LinkWrenches *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkWrenches * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkWrenches_paren" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::Wrench *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Wrench, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkWrenches_paren__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkWrenches *arg1 = (iDynTree::LinkWrenches *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench *result = 0 ;
  
  if (!SWIG_check_num_args("LinkWrenches_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkWrenches, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkWrenches_paren" "', argument " "1"" of type '" "iDynTree::LinkWrenches const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkWrenches * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkWrenches_paren" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::Wrench *) &((iDynTree::LinkWrenches const *)arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Wrench, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkWrenches_paren (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkWrenches, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkWrenches_paren__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkWrenches, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkWrenches_paren__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkWrenches_paren'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkWrenches::operator ()(iDynTree::LinkIndex const)\n"
    "    iDynTree::LinkWrenches::operator ()(iDynTree::LinkIndex const) const\n");
  return 1;
}


int _wrap_delete_LinkWrenches (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkWrenches *arg1 = (iDynTree::LinkWrenches *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_LinkWrenches",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkWrenches, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinkWrenches" "', argument " "1"" of type '" "iDynTree::LinkWrenches *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkWrenches * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkInertias__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::LinkInertias *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkInertias",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LinkInertias" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (iDynTree::LinkInertias *)new iDynTree::LinkInertias(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkInertias, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkInertias__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::LinkInertias *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkInertias",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::LinkInertias *)new iDynTree::LinkInertias();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkInertias, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkInertias__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkInertias *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkInertias",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinkInertias" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinkInertias" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::LinkInertias *)new iDynTree::LinkInertias((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkInertias, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkInertias (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_LinkInertias__SWIG_1(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinkInertias__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LinkInertias__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_LinkInertias'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkInertias::LinkInertias(unsigned int)\n"
    "    iDynTree::LinkInertias::LinkInertias()\n"
    "    iDynTree::LinkInertias::LinkInertias(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkInertias_resize__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkInertias *arg1 = (iDynTree::LinkInertias *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkInertias_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkInertias, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkInertias_resize" "', argument " "1"" of type '" "iDynTree::LinkInertias *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkInertias * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkInertias_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkInertias_resize__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkInertias *arg1 = (iDynTree::LinkInertias *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkInertias_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkInertias, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkInertias_resize" "', argument " "1"" of type '" "iDynTree::LinkInertias *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkInertias * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkInertias_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkInertias_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkInertias_resize (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkInertias, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LinkInertias_resize__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkInertias, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkInertias_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkInertias_resize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkInertias::resize(unsigned int)\n"
    "    iDynTree::LinkInertias::resize(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkInertias_paren__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkInertias *arg1 = (iDynTree::LinkInertias *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertia *result = 0 ;
  
  if (!SWIG_check_num_args("LinkInertias_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkInertias, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkInertias_paren" "', argument " "1"" of type '" "iDynTree::LinkInertias *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkInertias * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkInertias_paren" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::SpatialInertia *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialInertia, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkInertias_paren__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkInertias *arg1 = (iDynTree::LinkInertias *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertia *result = 0 ;
  
  if (!SWIG_check_num_args("LinkInertias_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkInertias, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkInertias_paren" "', argument " "1"" of type '" "iDynTree::LinkInertias const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkInertias * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkInertias_paren" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::SpatialInertia *) &((iDynTree::LinkInertias const *)arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialInertia, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkInertias_paren (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkInertias, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkInertias_paren__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkInertias, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkInertias_paren__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkInertias_paren'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkInertias::operator ()(iDynTree::LinkIndex const)\n"
    "    iDynTree::LinkInertias::operator ()(iDynTree::LinkIndex const) const\n");
  return 1;
}


int _wrap_delete_LinkInertias (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkInertias *arg1 = (iDynTree::LinkInertias *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_LinkInertias",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkInertias, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinkInertias" "', argument " "1"" of type '" "iDynTree::LinkInertias *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkInertias * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkArticulatedBodyInertias__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::LinkArticulatedBodyInertias *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkArticulatedBodyInertias",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LinkArticulatedBodyInertias" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (iDynTree::LinkArticulatedBodyInertias *)new iDynTree::LinkArticulatedBodyInertias(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkArticulatedBodyInertias__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::LinkArticulatedBodyInertias *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkArticulatedBodyInertias",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::LinkArticulatedBodyInertias *)new iDynTree::LinkArticulatedBodyInertias();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkArticulatedBodyInertias__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkArticulatedBodyInertias *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkArticulatedBodyInertias",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinkArticulatedBodyInertias" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinkArticulatedBodyInertias" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::LinkArticulatedBodyInertias *)new iDynTree::LinkArticulatedBodyInertias((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkArticulatedBodyInertias (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_LinkArticulatedBodyInertias__SWIG_1(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinkArticulatedBodyInertias__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LinkArticulatedBodyInertias__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_LinkArticulatedBodyInertias'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkArticulatedBodyInertias::LinkArticulatedBodyInertias(unsigned int)\n"
    "    iDynTree::LinkArticulatedBodyInertias::LinkArticulatedBodyInertias()\n"
    "    iDynTree::LinkArticulatedBodyInertias::LinkArticulatedBodyInertias(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkArticulatedBodyInertias_resize__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkArticulatedBodyInertias *arg1 = (iDynTree::LinkArticulatedBodyInertias *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkArticulatedBodyInertias_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkArticulatedBodyInertias_resize" "', argument " "1"" of type '" "iDynTree::LinkArticulatedBodyInertias *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkArticulatedBodyInertias * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkArticulatedBodyInertias_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkArticulatedBodyInertias_resize__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkArticulatedBodyInertias *arg1 = (iDynTree::LinkArticulatedBodyInertias *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkArticulatedBodyInertias_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkArticulatedBodyInertias_resize" "', argument " "1"" of type '" "iDynTree::LinkArticulatedBodyInertias *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkArticulatedBodyInertias * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkArticulatedBodyInertias_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkArticulatedBodyInertias_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkArticulatedBodyInertias_resize (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LinkArticulatedBodyInertias_resize__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkArticulatedBodyInertias_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkArticulatedBodyInertias_resize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkArticulatedBodyInertias::resize(unsigned int)\n"
    "    iDynTree::LinkArticulatedBodyInertias::resize(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkArticulatedBodyInertias_paren__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkArticulatedBodyInertias *arg1 = (iDynTree::LinkArticulatedBodyInertias *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::ArticulatedBodyInertia *result = 0 ;
  
  if (!SWIG_check_num_args("LinkArticulatedBodyInertias_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkArticulatedBodyInertias_paren" "', argument " "1"" of type '" "iDynTree::LinkArticulatedBodyInertias *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkArticulatedBodyInertias * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkArticulatedBodyInertias_paren" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::ArticulatedBodyInertia *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkArticulatedBodyInertias_paren__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkArticulatedBodyInertias *arg1 = (iDynTree::LinkArticulatedBodyInertias *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::ArticulatedBodyInertia *result = 0 ;
  
  if (!SWIG_check_num_args("LinkArticulatedBodyInertias_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkArticulatedBodyInertias_paren" "', argument " "1"" of type '" "iDynTree::LinkArticulatedBodyInertias const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkArticulatedBodyInertias * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkArticulatedBodyInertias_paren" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::ArticulatedBodyInertia *) &((iDynTree::LinkArticulatedBodyInertias const *)arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__ArticulatedBodyInertia, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkArticulatedBodyInertias_paren (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkArticulatedBodyInertias_paren__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkArticulatedBodyInertias_paren__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkArticulatedBodyInertias_paren'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkArticulatedBodyInertias::operator ()(iDynTree::LinkIndex const)\n"
    "    iDynTree::LinkArticulatedBodyInertias::operator ()(iDynTree::LinkIndex const) const\n");
  return 1;
}


int _wrap_delete_LinkArticulatedBodyInertias (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkArticulatedBodyInertias *arg1 = (iDynTree::LinkArticulatedBodyInertias *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_LinkArticulatedBodyInertias",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkArticulatedBodyInertias, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinkArticulatedBodyInertias" "', argument " "1"" of type '" "iDynTree::LinkArticulatedBodyInertias *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkArticulatedBodyInertias * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkVelArray__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::LinkVelArray *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkVelArray",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LinkVelArray" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (iDynTree::LinkVelArray *)new iDynTree::LinkVelArray(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkVelArray, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkVelArray__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::LinkVelArray *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkVelArray",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::LinkVelArray *)new iDynTree::LinkVelArray();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkVelArray, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkVelArray__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkVelArray *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkVelArray",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinkVelArray" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinkVelArray" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::LinkVelArray *)new iDynTree::LinkVelArray((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkVelArray, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkVelArray (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_LinkVelArray__SWIG_1(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinkVelArray__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LinkVelArray__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_LinkVelArray'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkVelArray::LinkVelArray(unsigned int)\n"
    "    iDynTree::LinkVelArray::LinkVelArray()\n"
    "    iDynTree::LinkVelArray::LinkVelArray(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkVelArray_resize__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkVelArray *arg1 = (iDynTree::LinkVelArray *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkVelArray_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkVelArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkVelArray_resize" "', argument " "1"" of type '" "iDynTree::LinkVelArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkVelArray * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkVelArray_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkVelArray_resize__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkVelArray *arg1 = (iDynTree::LinkVelArray *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkVelArray_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkVelArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkVelArray_resize" "', argument " "1"" of type '" "iDynTree::LinkVelArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkVelArray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkVelArray_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkVelArray_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkVelArray_resize (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkVelArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LinkVelArray_resize__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkVelArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkVelArray_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkVelArray_resize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkVelArray::resize(unsigned int)\n"
    "    iDynTree::LinkVelArray::resize(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkVelArray_paren__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkVelArray *arg1 = (iDynTree::LinkVelArray *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Twist *result = 0 ;
  
  if (!SWIG_check_num_args("LinkVelArray_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkVelArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkVelArray_paren" "', argument " "1"" of type '" "iDynTree::LinkVelArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkVelArray * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkVelArray_paren" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::Twist *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Twist, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkVelArray_paren__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkVelArray *arg1 = (iDynTree::LinkVelArray *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Twist *result = 0 ;
  
  if (!SWIG_check_num_args("LinkVelArray_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkVelArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkVelArray_paren" "', argument " "1"" of type '" "iDynTree::LinkVelArray const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkVelArray * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkVelArray_paren" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::Twist *) &((iDynTree::LinkVelArray const *)arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Twist, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkVelArray_paren (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkVelArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkVelArray_paren__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkVelArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkVelArray_paren__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkVelArray_paren'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkVelArray::operator ()(iDynTree::LinkIndex const)\n"
    "    iDynTree::LinkVelArray::operator ()(iDynTree::LinkIndex const) const\n");
  return 1;
}


int _wrap_delete_LinkVelArray (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkVelArray *arg1 = (iDynTree::LinkVelArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_LinkVelArray",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkVelArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinkVelArray" "', argument " "1"" of type '" "iDynTree::LinkVelArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkVelArray * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkAccArray__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::LinkAccArray *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkAccArray",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LinkAccArray" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (iDynTree::LinkAccArray *)new iDynTree::LinkAccArray(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkAccArray, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkAccArray__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::LinkAccArray *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkAccArray",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::LinkAccArray *)new iDynTree::LinkAccArray();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkAccArray, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkAccArray__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkAccArray *result = 0 ;
  
  if (!SWIG_check_num_args("new_LinkAccArray",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinkAccArray" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinkAccArray" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::LinkAccArray *)new iDynTree::LinkAccArray((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__LinkAccArray, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_LinkAccArray (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_LinkAccArray__SWIG_1(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinkAccArray__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LinkAccArray__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_LinkAccArray'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkAccArray::LinkAccArray(unsigned int)\n"
    "    iDynTree::LinkAccArray::LinkAccArray()\n"
    "    iDynTree::LinkAccArray::LinkAccArray(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkAccArray_resize__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkAccArray *arg1 = (iDynTree::LinkAccArray *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkAccArray_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkAccArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkAccArray_resize" "', argument " "1"" of type '" "iDynTree::LinkAccArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkAccArray * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkAccArray_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkAccArray_resize__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkAccArray *arg1 = (iDynTree::LinkAccArray *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("LinkAccArray_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkAccArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkAccArray_resize" "', argument " "1"" of type '" "iDynTree::LinkAccArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkAccArray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinkAccArray_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinkAccArray_resize" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  (arg1)->resize((iDynTree::Model const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkAccArray_resize (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkAccArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LinkAccArray_resize__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkAccArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkAccArray_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkAccArray_resize'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkAccArray::resize(unsigned int)\n"
    "    iDynTree::LinkAccArray::resize(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_LinkAccArray_paren__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkAccArray *arg1 = (iDynTree::LinkAccArray *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc *result = 0 ;
  
  if (!SWIG_check_num_args("LinkAccArray_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkAccArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkAccArray_paren" "', argument " "1"" of type '" "iDynTree::LinkAccArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkAccArray * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkAccArray_paren" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::SpatialAcc *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialAcc, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkAccArray_paren__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkAccArray *arg1 = (iDynTree::LinkAccArray *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc *result = 0 ;
  
  if (!SWIG_check_num_args("LinkAccArray_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkAccArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkAccArray_paren" "', argument " "1"" of type '" "iDynTree::LinkAccArray const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkAccArray * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinkAccArray_paren" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::SpatialAcc *) &((iDynTree::LinkAccArray const *)arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialAcc, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_LinkAccArray_paren (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkAccArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkAccArray_paren__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__LinkAccArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LinkAccArray_paren__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'LinkAccArray_paren'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::LinkAccArray::operator ()(iDynTree::LinkIndex const)\n"
    "    iDynTree::LinkAccArray::operator ()(iDynTree::LinkIndex const) const\n");
  return 1;
}


int _wrap_LinkAccArray_getNrOfLinks (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkAccArray *arg1 = (iDynTree::LinkAccArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("LinkAccArray_getNrOfLinks",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkAccArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinkAccArray_getNrOfLinks" "', argument " "1"" of type '" "iDynTree::LinkAccArray const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkAccArray * >(argp1);
  result = (unsigned int)((iDynTree::LinkAccArray const *)arg1)->getNrOfLinks();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_LinkAccArray (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkAccArray *arg1 = (iDynTree::LinkAccArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_LinkAccArray",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__LinkAccArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinkAccArray" "', argument " "1"" of type '" "iDynTree::LinkAccArray *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::LinkAccArray * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Link (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Link *result = 0 ;
  
  if (!SWIG_check_num_args("new_Link",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::Link *)new iDynTree::Link();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Link, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Link (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Link *arg1 = (iDynTree::Link *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Link",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Link, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Link" "', argument " "1"" of type '" "iDynTree::Link *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Link * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Link_setInertia (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Link *arg1 = (iDynTree::Link *) 0 ;
  iDynTree::SpatialInertia *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Link_setInertia",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Link, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Link_setInertia" "', argument " "1"" of type '" "iDynTree::Link *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Link * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialInertia,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Link_setInertia" "', argument " "2"" of type '" "iDynTree::SpatialInertia &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Link_setInertia" "', argument " "2"" of type '" "iDynTree::SpatialInertia &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialInertia * >(argp2);
  (arg1)->setInertia(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Link_getInertia (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Link *arg1 = (iDynTree::Link *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertia *result = 0 ;
  
  if (!SWIG_check_num_args("Link_getInertia",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Link, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Link_getInertia" "', argument " "1"" of type '" "iDynTree::Link const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Link * >(argp1);
  result = (iDynTree::SpatialInertia *) &((iDynTree::Link const *)arg1)->getInertia();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialInertia, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Link_setIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Link *arg1 = (iDynTree::Link *) 0 ;
  iDynTree::LinkIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Link_setIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Link, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Link_setIndex" "', argument " "1"" of type '" "iDynTree::Link *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Link * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Link_setIndex" "', argument " "2"" of type '" "iDynTree::LinkIndex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Link_setIndex" "', argument " "2"" of type '" "iDynTree::LinkIndex &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::LinkIndex * >(argp2);
  (arg1)->setIndex(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Link_getIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Link *arg1 = (iDynTree::Link *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("Link_getIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Link, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Link_getIndex" "', argument " "1"" of type '" "iDynTree::Link const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Link * >(argp1);
  result = (iDynTree::LinkIndex)((iDynTree::Link const *)arg1)->getIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_IJoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_IJoint",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IJoint" "', argument " "1"" of type '" "iDynTree::IJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_clone (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::IJoint *result = 0 ;
  
  if (!SWIG_check_num_args("IJoint_clone",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_clone" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  result = (iDynTree::IJoint *)((iDynTree::IJoint const *)arg1)->clone();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_getNrOfPosCoords (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("IJoint_getNrOfPosCoords",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_getNrOfPosCoords" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  result = (unsigned int)((iDynTree::IJoint const *)arg1)->getNrOfPosCoords();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_getNrOfDOFs (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("IJoint_getNrOfDOFs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_getNrOfDOFs" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  result = (unsigned int)((iDynTree::IJoint const *)arg1)->getNrOfDOFs();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_setAttachedLinks (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  iDynTree::LinkIndex arg2 ;
  iDynTree::LinkIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("IJoint_setAttachedLinks",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_setAttachedLinks" "', argument " "1"" of type '" "iDynTree::IJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IJoint_setAttachedLinks" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IJoint_setAttachedLinks" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  (arg1)->setAttachedLinks(arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_setRestTransform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  iDynTree::Transform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("IJoint_setRestTransform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_setRestTransform" "', argument " "1"" of type '" "iDynTree::IJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IJoint_setRestTransform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_setRestTransform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  (arg1)->setRestTransform((iDynTree::Transform const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_getFirstAttachedLink (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("IJoint_getFirstAttachedLink",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_getFirstAttachedLink" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  result = (iDynTree::LinkIndex)((iDynTree::IJoint const *)arg1)->getFirstAttachedLink();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_getSecondAttachedLink (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("IJoint_getSecondAttachedLink",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_getSecondAttachedLink" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  result = (iDynTree::LinkIndex)((iDynTree::IJoint const *)arg1)->getSecondAttachedLink();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_getRestTransform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  iDynTree::LinkIndex arg2 ;
  iDynTree::LinkIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("IJoint_getRestTransform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_getRestTransform" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IJoint_getRestTransform" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IJoint_getRestTransform" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  result = ((iDynTree::IJoint const *)arg1)->getRestTransform(arg2,arg3);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_getTransform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  iDynTree::IRawVector *arg2 = 0 ;
  iDynTree::LinkIndex arg3 ;
  iDynTree::LinkIndex arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("IJoint_getTransform",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_getTransform" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IJoint_getTransform" "', argument " "2"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_getTransform" "', argument " "2"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::IRawVector * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IJoint_getTransform" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IJoint_getTransform" "', argument " "4"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg4 = static_cast< iDynTree::LinkIndex >(val4);
  result = ((iDynTree::IJoint const *)arg1)->getTransform((iDynTree::IRawVector const &)*arg2,arg3,arg4);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_getMotionSubspaceVector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  int arg2 ;
  iDynTree::LinkIndex arg3 ;
  iDynTree::LinkIndex arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("IJoint_getMotionSubspaceVector",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_getMotionSubspaceVector" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IJoint_getMotionSubspaceVector" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IJoint_getMotionSubspaceVector" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IJoint_getMotionSubspaceVector" "', argument " "4"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg4 = static_cast< iDynTree::LinkIndex >(val4);
  result = ((iDynTree::IJoint const *)arg1)->getMotionSubspaceVector(arg2,arg3,arg4);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_computeChildPosVelAcc (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  iDynTree::IRawVector *arg2 = 0 ;
  iDynTree::IRawVector *arg3 = 0 ;
  iDynTree::IRawVector *arg4 = 0 ;
  iDynTree::LinkPositions *arg5 = 0 ;
  iDynTree::LinkVelArray *arg6 = 0 ;
  iDynTree::LinkAccArray *arg7 = 0 ;
  iDynTree::LinkIndex arg8 ;
  iDynTree::LinkIndex arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("IJoint_computeChildPosVelAcc",argc,9,9,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_computeChildPosVelAcc" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IJoint_computeChildPosVelAcc" "', argument " "2"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildPosVelAcc" "', argument " "2"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::IRawVector * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IJoint_computeChildPosVelAcc" "', argument " "3"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildPosVelAcc" "', argument " "3"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::IRawVector * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IJoint_computeChildPosVelAcc" "', argument " "4"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildPosVelAcc" "', argument " "4"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::IRawVector * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__LinkPositions,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IJoint_computeChildPosVelAcc" "', argument " "5"" of type '" "iDynTree::LinkPositions &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildPosVelAcc" "', argument " "5"" of type '" "iDynTree::LinkPositions &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::LinkPositions * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "IJoint_computeChildPosVelAcc" "', argument " "6"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildPosVelAcc" "', argument " "6"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::LinkVelArray * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "IJoint_computeChildPosVelAcc" "', argument " "7"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildPosVelAcc" "', argument " "7"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  arg7 = reinterpret_cast< iDynTree::LinkAccArray * >(argp7);
  ecode8 = SWIG_AsVal_int(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "IJoint_computeChildPosVelAcc" "', argument " "8"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg8 = static_cast< iDynTree::LinkIndex >(val8);
  ecode9 = SWIG_AsVal_int(argv[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "IJoint_computeChildPosVelAcc" "', argument " "9"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg9 = static_cast< iDynTree::LinkIndex >(val9);
  ((iDynTree::IJoint const *)arg1)->computeChildPosVelAcc((iDynTree::IRawVector const &)*arg2,(iDynTree::IRawVector const &)*arg3,(iDynTree::IRawVector const &)*arg4,*arg5,*arg6,*arg7,arg8,arg9);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_computeChildVelAcc (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  iDynTree::IRawVector *arg2 = 0 ;
  iDynTree::IRawVector *arg3 = 0 ;
  iDynTree::IRawVector *arg4 = 0 ;
  iDynTree::LinkVelArray *arg5 = 0 ;
  iDynTree::LinkAccArray *arg6 = 0 ;
  iDynTree::LinkIndex arg7 ;
  iDynTree::LinkIndex arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("IJoint_computeChildVelAcc",argc,8,8,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_computeChildVelAcc" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IJoint_computeChildVelAcc" "', argument " "2"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildVelAcc" "', argument " "2"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::IRawVector * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IJoint_computeChildVelAcc" "', argument " "3"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildVelAcc" "', argument " "3"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::IRawVector * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IJoint_computeChildVelAcc" "', argument " "4"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildVelAcc" "', argument " "4"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::IRawVector * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IJoint_computeChildVelAcc" "', argument " "5"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildVelAcc" "', argument " "5"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::LinkVelArray * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "IJoint_computeChildVelAcc" "', argument " "6"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeChildVelAcc" "', argument " "6"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::LinkAccArray * >(argp6);
  ecode7 = SWIG_AsVal_int(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "IJoint_computeChildVelAcc" "', argument " "7"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg7 = static_cast< iDynTree::LinkIndex >(val7);
  ecode8 = SWIG_AsVal_int(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "IJoint_computeChildVelAcc" "', argument " "8"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg8 = static_cast< iDynTree::LinkIndex >(val8);
  ((iDynTree::IJoint const *)arg1)->computeChildVelAcc((iDynTree::IRawVector const &)*arg2,(iDynTree::IRawVector const &)*arg3,(iDynTree::IRawVector const &)*arg4,*arg5,*arg6,arg7,arg8);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_computeJointTorque (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  iDynTree::IRawVector *arg2 = 0 ;
  iDynTree::Wrench *arg3 = 0 ;
  iDynTree::LinkIndex arg4 ;
  iDynTree::LinkIndex arg5 ;
  iDynTree::IRawVector *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("IJoint_computeJointTorque",argc,6,6,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_computeJointTorque" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IJoint_computeJointTorque" "', argument " "2"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeJointTorque" "', argument " "2"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::IRawVector * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IJoint_computeJointTorque" "', argument " "3"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeJointTorque" "', argument " "3"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Wrench * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IJoint_computeJointTorque" "', argument " "4"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg4 = static_cast< iDynTree::LinkIndex >(val4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IJoint_computeJointTorque" "', argument " "5"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg5 = static_cast< iDynTree::LinkIndex >(val5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "IJoint_computeJointTorque" "', argument " "6"" of type '" "iDynTree::IRawVector &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_computeJointTorque" "', argument " "6"" of type '" "iDynTree::IRawVector &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::IRawVector * >(argp6);
  ((iDynTree::IJoint const *)arg1)->computeJointTorque((iDynTree::IRawVector const &)*arg2,(iDynTree::Wrench const &)*arg3,arg4,arg5,*arg6);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_setIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  iDynTree::JointIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("IJoint_setIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_setIndex" "', argument " "1"" of type '" "iDynTree::IJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IJoint_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IJoint_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::JointIndex * >(argp2);
  (arg1)->setIndex(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_getIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointIndex result;
  
  if (!SWIG_check_num_args("IJoint_getIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_getIndex" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  result = (iDynTree::JointIndex)((iDynTree::IJoint const *)arg1)->getIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_setPosCoordsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("IJoint_setPosCoordsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_setPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::IJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IJoint_setPosCoordsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setPosCoordsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_getPosCoordsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("IJoint_getPosCoordsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_getPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  result = ((iDynTree::IJoint const *)arg1)->getPosCoordsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_setDOFsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("IJoint_setDOFsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_setDOFsOffset" "', argument " "1"" of type '" "iDynTree::IJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IJoint_setDOFsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setDOFsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_IJoint_getDOFsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IJoint *arg1 = (iDynTree::IJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("IJoint_getDOFsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IJoint_getDOFsOffset" "', argument " "1"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IJoint * >(argp1);
  result = ((iDynTree::IJoint const *)arg1)->getDOFsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FixedJoint__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkIndex arg1 ;
  iDynTree::LinkIndex arg2 ;
  iDynTree::Transform *arg3 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  iDynTree::FixedJoint *result = 0 ;
  
  if (!SWIG_check_num_args("new_FixedJoint",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FixedJoint" "', argument " "1"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg1 = static_cast< iDynTree::LinkIndex >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FixedJoint" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_FixedJoint" "', argument " "3"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FixedJoint" "', argument " "3"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Transform * >(argp3);
  result = (iDynTree::FixedJoint *)new iDynTree::FixedJoint(arg1,arg2,(iDynTree::Transform const &)*arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__FixedJoint, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FixedJoint__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::FixedJoint *result = 0 ;
  
  if (!SWIG_check_num_args("new_FixedJoint",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__FixedJoint,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FixedJoint" "', argument " "1"" of type '" "iDynTree::FixedJoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FixedJoint" "', argument " "1"" of type '" "iDynTree::FixedJoint const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  result = (iDynTree::FixedJoint *)new iDynTree::FixedJoint((iDynTree::FixedJoint const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__FixedJoint, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_FixedJoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__FixedJoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FixedJoint__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_FixedJoint__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_FixedJoint'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::FixedJoint::FixedJoint(iDynTree::LinkIndex const,iDynTree::LinkIndex const,iDynTree::Transform const &)\n"
    "    iDynTree::FixedJoint::FixedJoint(iDynTree::FixedJoint const &)\n");
  return 1;
}


int _wrap_delete_FixedJoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_FixedJoint",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FixedJoint" "', argument " "1"" of type '" "iDynTree::FixedJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_clone (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::IJoint *result = 0 ;
  
  if (!SWIG_check_num_args("FixedJoint_clone",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_clone" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  result = (iDynTree::IJoint *)((iDynTree::FixedJoint const *)arg1)->clone();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_getNrOfPosCoords (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("FixedJoint_getNrOfPosCoords",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_getNrOfPosCoords" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  result = (unsigned int)((iDynTree::FixedJoint const *)arg1)->getNrOfPosCoords();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_getNrOfDOFs (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("FixedJoint_getNrOfDOFs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_getNrOfDOFs" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  result = (unsigned int)((iDynTree::FixedJoint const *)arg1)->getNrOfDOFs();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_setAttachedLinks (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  iDynTree::LinkIndex arg2 ;
  iDynTree::LinkIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FixedJoint_setAttachedLinks",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_setAttachedLinks" "', argument " "1"" of type '" "iDynTree::FixedJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FixedJoint_setAttachedLinks" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FixedJoint_setAttachedLinks" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  (arg1)->setAttachedLinks(arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_setRestTransform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  iDynTree::Transform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FixedJoint_setRestTransform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_setRestTransform" "', argument " "1"" of type '" "iDynTree::FixedJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FixedJoint_setRestTransform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_setRestTransform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  (arg1)->setRestTransform((iDynTree::Transform const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_getFirstAttachedLink (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("FixedJoint_getFirstAttachedLink",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_getFirstAttachedLink" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  result = (iDynTree::LinkIndex)((iDynTree::FixedJoint const *)arg1)->getFirstAttachedLink();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_getSecondAttachedLink (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("FixedJoint_getSecondAttachedLink",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_getSecondAttachedLink" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  result = (iDynTree::LinkIndex)((iDynTree::FixedJoint const *)arg1)->getSecondAttachedLink();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_getRestTransform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  iDynTree::LinkIndex arg2 ;
  iDynTree::LinkIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("FixedJoint_getRestTransform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_getRestTransform" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FixedJoint_getRestTransform" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FixedJoint_getRestTransform" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  result = ((iDynTree::FixedJoint const *)arg1)->getRestTransform(arg2,arg3);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_getTransform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  iDynTree::IRawVector *arg2 = 0 ;
  iDynTree::LinkIndex arg3 ;
  iDynTree::LinkIndex arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("FixedJoint_getTransform",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_getTransform" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FixedJoint_getTransform" "', argument " "2"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_getTransform" "', argument " "2"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::IRawVector * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FixedJoint_getTransform" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FixedJoint_getTransform" "', argument " "4"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg4 = static_cast< iDynTree::LinkIndex >(val4);
  result = ((iDynTree::FixedJoint const *)arg1)->getTransform((iDynTree::IRawVector const &)*arg2,arg3,arg4);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_getMotionSubspaceVector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  int arg2 ;
  iDynTree::LinkIndex arg3 ;
  iDynTree::LinkIndex arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("FixedJoint_getMotionSubspaceVector",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_getMotionSubspaceVector" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FixedJoint_getMotionSubspaceVector" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FixedJoint_getMotionSubspaceVector" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FixedJoint_getMotionSubspaceVector" "', argument " "4"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg4 = static_cast< iDynTree::LinkIndex >(val4);
  result = ((iDynTree::FixedJoint const *)arg1)->getMotionSubspaceVector(arg2,arg3,arg4);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_computeChildPosVelAcc (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  iDynTree::IRawVector *arg2 = 0 ;
  iDynTree::IRawVector *arg3 = 0 ;
  iDynTree::IRawVector *arg4 = 0 ;
  iDynTree::LinkPositions *arg5 = 0 ;
  iDynTree::LinkVelArray *arg6 = 0 ;
  iDynTree::LinkAccArray *arg7 = 0 ;
  iDynTree::LinkIndex arg8 ;
  iDynTree::LinkIndex arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FixedJoint_computeChildPosVelAcc",argc,9,9,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "2"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "2"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::IRawVector * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "3"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "3"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::IRawVector * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "4"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "4"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::IRawVector * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__LinkPositions,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "5"" of type '" "iDynTree::LinkPositions &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "5"" of type '" "iDynTree::LinkPositions &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::LinkPositions * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "6"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "6"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::LinkVelArray * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "7"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "7"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  arg7 = reinterpret_cast< iDynTree::LinkAccArray * >(argp7);
  ecode8 = SWIG_AsVal_int(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "8"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg8 = static_cast< iDynTree::LinkIndex >(val8);
  ecode9 = SWIG_AsVal_int(argv[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "FixedJoint_computeChildPosVelAcc" "', argument " "9"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg9 = static_cast< iDynTree::LinkIndex >(val9);
  ((iDynTree::FixedJoint const *)arg1)->computeChildPosVelAcc((iDynTree::IRawVector const &)*arg2,(iDynTree::IRawVector const &)*arg3,(iDynTree::IRawVector const &)*arg4,*arg5,*arg6,*arg7,arg8,arg9);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_computeChildVelAcc (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  iDynTree::IRawVector *arg2 = 0 ;
  iDynTree::IRawVector *arg3 = 0 ;
  iDynTree::IRawVector *arg4 = 0 ;
  iDynTree::LinkVelArray *arg5 = 0 ;
  iDynTree::LinkAccArray *arg6 = 0 ;
  iDynTree::LinkIndex arg7 ;
  iDynTree::LinkIndex arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FixedJoint_computeChildVelAcc",argc,8,8,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_computeChildVelAcc" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FixedJoint_computeChildVelAcc" "', argument " "2"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildVelAcc" "', argument " "2"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::IRawVector * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FixedJoint_computeChildVelAcc" "', argument " "3"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildVelAcc" "', argument " "3"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::IRawVector * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FixedJoint_computeChildVelAcc" "', argument " "4"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildVelAcc" "', argument " "4"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::IRawVector * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "FixedJoint_computeChildVelAcc" "', argument " "5"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildVelAcc" "', argument " "5"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::LinkVelArray * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "FixedJoint_computeChildVelAcc" "', argument " "6"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeChildVelAcc" "', argument " "6"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::LinkAccArray * >(argp6);
  ecode7 = SWIG_AsVal_int(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "FixedJoint_computeChildVelAcc" "', argument " "7"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg7 = static_cast< iDynTree::LinkIndex >(val7);
  ecode8 = SWIG_AsVal_int(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "FixedJoint_computeChildVelAcc" "', argument " "8"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg8 = static_cast< iDynTree::LinkIndex >(val8);
  ((iDynTree::FixedJoint const *)arg1)->computeChildVelAcc((iDynTree::IRawVector const &)*arg2,(iDynTree::IRawVector const &)*arg3,(iDynTree::IRawVector const &)*arg4,*arg5,*arg6,arg7,arg8);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_computeJointTorque (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  iDynTree::IRawVector *arg2 = 0 ;
  iDynTree::Wrench *arg3 = 0 ;
  iDynTree::LinkIndex arg4 ;
  iDynTree::LinkIndex arg5 ;
  iDynTree::IRawVector *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FixedJoint_computeJointTorque",argc,6,6,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_computeJointTorque" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FixedJoint_computeJointTorque" "', argument " "2"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeJointTorque" "', argument " "2"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::IRawVector * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FixedJoint_computeJointTorque" "', argument " "3"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeJointTorque" "', argument " "3"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Wrench * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FixedJoint_computeJointTorque" "', argument " "4"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg4 = static_cast< iDynTree::LinkIndex >(val4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FixedJoint_computeJointTorque" "', argument " "5"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg5 = static_cast< iDynTree::LinkIndex >(val5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "FixedJoint_computeJointTorque" "', argument " "6"" of type '" "iDynTree::IRawVector &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_computeJointTorque" "', argument " "6"" of type '" "iDynTree::IRawVector &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::IRawVector * >(argp6);
  ((iDynTree::FixedJoint const *)arg1)->computeJointTorque((iDynTree::IRawVector const &)*arg2,(iDynTree::Wrench const &)*arg3,arg4,arg5,*arg6);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_setIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  iDynTree::JointIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FixedJoint_setIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_setIndex" "', argument " "1"" of type '" "iDynTree::FixedJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FixedJoint_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedJoint_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::JointIndex * >(argp2);
  (arg1)->setIndex(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_getIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointIndex result;
  
  if (!SWIG_check_num_args("FixedJoint_getIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_getIndex" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  result = (iDynTree::JointIndex)((iDynTree::FixedJoint const *)arg1)->getIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_setPosCoordsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FixedJoint_setPosCoordsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_setPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::FixedJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FixedJoint_setPosCoordsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setPosCoordsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_getPosCoordsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("FixedJoint_getPosCoordsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_getPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  result = ((iDynTree::FixedJoint const *)arg1)->getPosCoordsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_setDOFsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("FixedJoint_setDOFsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_setDOFsOffset" "', argument " "1"" of type '" "iDynTree::FixedJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FixedJoint_setDOFsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setDOFsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_FixedJoint_getDOFsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::FixedJoint *arg1 = (iDynTree::FixedJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("FixedJoint_getDOFsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__FixedJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedJoint_getDOFsOffset" "', argument " "1"" of type '" "iDynTree::FixedJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::FixedJoint * >(argp1);
  result = ((iDynTree::FixedJoint const *)arg1)->getDOFsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_MovableJointImpl1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 1,1 > *arg1 = (iDynTree::MovableJointImpl< 1,1 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_MovableJointImpl1",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_1_1_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MovableJointImpl1" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 1,1 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 1,1 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl1_getNrOfPosCoords (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 1,1 > *arg1 = (iDynTree::MovableJointImpl< 1,1 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MovableJointImpl1_getNrOfPosCoords",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_1_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl1_getNrOfPosCoords" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 1,1 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 1,1 > * >(argp1);
  result = (unsigned int)((iDynTree::MovableJointImpl< 1,1 > const *)arg1)->getNrOfPosCoords();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl1_getNrOfDOFs (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 1,1 > *arg1 = (iDynTree::MovableJointImpl< 1,1 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MovableJointImpl1_getNrOfDOFs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_1_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl1_getNrOfDOFs" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 1,1 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 1,1 > * >(argp1);
  result = (unsigned int)((iDynTree::MovableJointImpl< 1,1 > const *)arg1)->getNrOfDOFs();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl1_setIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 1,1 > *arg1 = (iDynTree::MovableJointImpl< 1,1 > *) 0 ;
  iDynTree::JointIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl1_setIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_1_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl1_setIndex" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 1,1 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 1,1 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MovableJointImpl1_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MovableJointImpl1_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::JointIndex * >(argp2);
  (arg1)->setIndex(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl1_getIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 1,1 > *arg1 = (iDynTree::MovableJointImpl< 1,1 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointIndex result;
  
  if (!SWIG_check_num_args("MovableJointImpl1_getIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_1_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl1_getIndex" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 1,1 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 1,1 > * >(argp1);
  result = (iDynTree::JointIndex)((iDynTree::MovableJointImpl< 1,1 > const *)arg1)->getIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl1_setPosCoordsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 1,1 > *arg1 = (iDynTree::MovableJointImpl< 1,1 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl1_setPosCoordsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_1_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl1_setPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 1,1 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 1,1 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MovableJointImpl1_setPosCoordsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setPosCoordsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl1_getPosCoordsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 1,1 > *arg1 = (iDynTree::MovableJointImpl< 1,1 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("MovableJointImpl1_getPosCoordsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_1_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl1_getPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 1,1 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 1,1 > * >(argp1);
  result = ((iDynTree::MovableJointImpl< 1,1 > const *)arg1)->getPosCoordsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl1_setDOFsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 1,1 > *arg1 = (iDynTree::MovableJointImpl< 1,1 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl1_setDOFsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_1_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl1_setDOFsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 1,1 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 1,1 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MovableJointImpl1_setDOFsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setDOFsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl1_getDOFsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 1,1 > *arg1 = (iDynTree::MovableJointImpl< 1,1 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("MovableJointImpl1_getDOFsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_1_1_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl1_getDOFsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 1,1 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 1,1 > * >(argp1);
  result = ((iDynTree::MovableJointImpl< 1,1 > const *)arg1)->getDOFsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_MovableJointImpl2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 2,2 > *arg1 = (iDynTree::MovableJointImpl< 2,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_MovableJointImpl2",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_2_2_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MovableJointImpl2" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 2,2 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 2,2 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl2_getNrOfPosCoords (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 2,2 > *arg1 = (iDynTree::MovableJointImpl< 2,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MovableJointImpl2_getNrOfPosCoords",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_2_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl2_getNrOfPosCoords" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 2,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 2,2 > * >(argp1);
  result = (unsigned int)((iDynTree::MovableJointImpl< 2,2 > const *)arg1)->getNrOfPosCoords();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl2_getNrOfDOFs (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 2,2 > *arg1 = (iDynTree::MovableJointImpl< 2,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MovableJointImpl2_getNrOfDOFs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_2_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl2_getNrOfDOFs" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 2,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 2,2 > * >(argp1);
  result = (unsigned int)((iDynTree::MovableJointImpl< 2,2 > const *)arg1)->getNrOfDOFs();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl2_setIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 2,2 > *arg1 = (iDynTree::MovableJointImpl< 2,2 > *) 0 ;
  iDynTree::JointIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl2_setIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_2_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl2_setIndex" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 2,2 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 2,2 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MovableJointImpl2_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MovableJointImpl2_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::JointIndex * >(argp2);
  (arg1)->setIndex(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl2_getIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 2,2 > *arg1 = (iDynTree::MovableJointImpl< 2,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointIndex result;
  
  if (!SWIG_check_num_args("MovableJointImpl2_getIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_2_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl2_getIndex" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 2,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 2,2 > * >(argp1);
  result = (iDynTree::JointIndex)((iDynTree::MovableJointImpl< 2,2 > const *)arg1)->getIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl2_setPosCoordsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 2,2 > *arg1 = (iDynTree::MovableJointImpl< 2,2 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl2_setPosCoordsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_2_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl2_setPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 2,2 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 2,2 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MovableJointImpl2_setPosCoordsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setPosCoordsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl2_getPosCoordsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 2,2 > *arg1 = (iDynTree::MovableJointImpl< 2,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("MovableJointImpl2_getPosCoordsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_2_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl2_getPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 2,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 2,2 > * >(argp1);
  result = ((iDynTree::MovableJointImpl< 2,2 > const *)arg1)->getPosCoordsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl2_setDOFsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 2,2 > *arg1 = (iDynTree::MovableJointImpl< 2,2 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl2_setDOFsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_2_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl2_setDOFsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 2,2 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 2,2 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MovableJointImpl2_setDOFsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setDOFsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl2_getDOFsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 2,2 > *arg1 = (iDynTree::MovableJointImpl< 2,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("MovableJointImpl2_getDOFsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_2_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl2_getDOFsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 2,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 2,2 > * >(argp1);
  result = ((iDynTree::MovableJointImpl< 2,2 > const *)arg1)->getDOFsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_MovableJointImpl3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 3,3 > *arg1 = (iDynTree::MovableJointImpl< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_MovableJointImpl3",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_3_3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MovableJointImpl3" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 3,3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 3,3 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl3_getNrOfPosCoords (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 3,3 > *arg1 = (iDynTree::MovableJointImpl< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MovableJointImpl3_getNrOfPosCoords",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl3_getNrOfPosCoords" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 3,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 3,3 > * >(argp1);
  result = (unsigned int)((iDynTree::MovableJointImpl< 3,3 > const *)arg1)->getNrOfPosCoords();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl3_getNrOfDOFs (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 3,3 > *arg1 = (iDynTree::MovableJointImpl< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MovableJointImpl3_getNrOfDOFs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl3_getNrOfDOFs" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 3,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 3,3 > * >(argp1);
  result = (unsigned int)((iDynTree::MovableJointImpl< 3,3 > const *)arg1)->getNrOfDOFs();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl3_setIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 3,3 > *arg1 = (iDynTree::MovableJointImpl< 3,3 > *) 0 ;
  iDynTree::JointIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl3_setIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl3_setIndex" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 3,3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 3,3 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MovableJointImpl3_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MovableJointImpl3_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::JointIndex * >(argp2);
  (arg1)->setIndex(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl3_getIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 3,3 > *arg1 = (iDynTree::MovableJointImpl< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointIndex result;
  
  if (!SWIG_check_num_args("MovableJointImpl3_getIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl3_getIndex" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 3,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 3,3 > * >(argp1);
  result = (iDynTree::JointIndex)((iDynTree::MovableJointImpl< 3,3 > const *)arg1)->getIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl3_setPosCoordsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 3,3 > *arg1 = (iDynTree::MovableJointImpl< 3,3 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl3_setPosCoordsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl3_setPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 3,3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 3,3 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MovableJointImpl3_setPosCoordsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setPosCoordsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl3_getPosCoordsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 3,3 > *arg1 = (iDynTree::MovableJointImpl< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("MovableJointImpl3_getPosCoordsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl3_getPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 3,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 3,3 > * >(argp1);
  result = ((iDynTree::MovableJointImpl< 3,3 > const *)arg1)->getPosCoordsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl3_setDOFsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 3,3 > *arg1 = (iDynTree::MovableJointImpl< 3,3 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl3_setDOFsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl3_setDOFsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 3,3 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 3,3 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MovableJointImpl3_setDOFsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setDOFsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl3_getDOFsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 3,3 > *arg1 = (iDynTree::MovableJointImpl< 3,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("MovableJointImpl3_getDOFsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_3_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl3_getDOFsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 3,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 3,3 > * >(argp1);
  result = ((iDynTree::MovableJointImpl< 3,3 > const *)arg1)->getDOFsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_MovableJointImpl4 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 4,4 > *arg1 = (iDynTree::MovableJointImpl< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_MovableJointImpl4",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_4_4_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MovableJointImpl4" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 4,4 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 4,4 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl4_getNrOfPosCoords (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 4,4 > *arg1 = (iDynTree::MovableJointImpl< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MovableJointImpl4_getNrOfPosCoords",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl4_getNrOfPosCoords" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 4,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 4,4 > * >(argp1);
  result = (unsigned int)((iDynTree::MovableJointImpl< 4,4 > const *)arg1)->getNrOfPosCoords();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl4_getNrOfDOFs (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 4,4 > *arg1 = (iDynTree::MovableJointImpl< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MovableJointImpl4_getNrOfDOFs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl4_getNrOfDOFs" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 4,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 4,4 > * >(argp1);
  result = (unsigned int)((iDynTree::MovableJointImpl< 4,4 > const *)arg1)->getNrOfDOFs();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl4_setIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 4,4 > *arg1 = (iDynTree::MovableJointImpl< 4,4 > *) 0 ;
  iDynTree::JointIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl4_setIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl4_setIndex" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 4,4 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 4,4 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MovableJointImpl4_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MovableJointImpl4_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::JointIndex * >(argp2);
  (arg1)->setIndex(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl4_getIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 4,4 > *arg1 = (iDynTree::MovableJointImpl< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointIndex result;
  
  if (!SWIG_check_num_args("MovableJointImpl4_getIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl4_getIndex" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 4,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 4,4 > * >(argp1);
  result = (iDynTree::JointIndex)((iDynTree::MovableJointImpl< 4,4 > const *)arg1)->getIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl4_setPosCoordsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 4,4 > *arg1 = (iDynTree::MovableJointImpl< 4,4 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl4_setPosCoordsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl4_setPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 4,4 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 4,4 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MovableJointImpl4_setPosCoordsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setPosCoordsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl4_getPosCoordsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 4,4 > *arg1 = (iDynTree::MovableJointImpl< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("MovableJointImpl4_getPosCoordsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl4_getPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 4,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 4,4 > * >(argp1);
  result = ((iDynTree::MovableJointImpl< 4,4 > const *)arg1)->getPosCoordsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl4_setDOFsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 4,4 > *arg1 = (iDynTree::MovableJointImpl< 4,4 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl4_setDOFsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl4_setDOFsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 4,4 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 4,4 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MovableJointImpl4_setDOFsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setDOFsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl4_getDOFsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 4,4 > *arg1 = (iDynTree::MovableJointImpl< 4,4 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("MovableJointImpl4_getDOFsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_4_4_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl4_getDOFsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 4,4 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 4,4 > * >(argp1);
  result = ((iDynTree::MovableJointImpl< 4,4 > const *)arg1)->getDOFsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_MovableJointImpl5 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 5,5 > *arg1 = (iDynTree::MovableJointImpl< 5,5 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_MovableJointImpl5",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_5_5_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MovableJointImpl5" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 5,5 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 5,5 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl5_getNrOfPosCoords (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 5,5 > *arg1 = (iDynTree::MovableJointImpl< 5,5 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MovableJointImpl5_getNrOfPosCoords",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_5_5_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl5_getNrOfPosCoords" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 5,5 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 5,5 > * >(argp1);
  result = (unsigned int)((iDynTree::MovableJointImpl< 5,5 > const *)arg1)->getNrOfPosCoords();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl5_getNrOfDOFs (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 5,5 > *arg1 = (iDynTree::MovableJointImpl< 5,5 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MovableJointImpl5_getNrOfDOFs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_5_5_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl5_getNrOfDOFs" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 5,5 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 5,5 > * >(argp1);
  result = (unsigned int)((iDynTree::MovableJointImpl< 5,5 > const *)arg1)->getNrOfDOFs();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl5_setIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 5,5 > *arg1 = (iDynTree::MovableJointImpl< 5,5 > *) 0 ;
  iDynTree::JointIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl5_setIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_5_5_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl5_setIndex" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 5,5 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 5,5 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MovableJointImpl5_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MovableJointImpl5_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::JointIndex * >(argp2);
  (arg1)->setIndex(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl5_getIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 5,5 > *arg1 = (iDynTree::MovableJointImpl< 5,5 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointIndex result;
  
  if (!SWIG_check_num_args("MovableJointImpl5_getIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_5_5_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl5_getIndex" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 5,5 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 5,5 > * >(argp1);
  result = (iDynTree::JointIndex)((iDynTree::MovableJointImpl< 5,5 > const *)arg1)->getIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl5_setPosCoordsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 5,5 > *arg1 = (iDynTree::MovableJointImpl< 5,5 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl5_setPosCoordsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_5_5_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl5_setPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 5,5 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 5,5 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MovableJointImpl5_setPosCoordsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setPosCoordsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl5_getPosCoordsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 5,5 > *arg1 = (iDynTree::MovableJointImpl< 5,5 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("MovableJointImpl5_getPosCoordsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_5_5_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl5_getPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 5,5 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 5,5 > * >(argp1);
  result = ((iDynTree::MovableJointImpl< 5,5 > const *)arg1)->getPosCoordsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl5_setDOFsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 5,5 > *arg1 = (iDynTree::MovableJointImpl< 5,5 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl5_setDOFsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_5_5_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl5_setDOFsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 5,5 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 5,5 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MovableJointImpl5_setDOFsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setDOFsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl5_getDOFsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 5,5 > *arg1 = (iDynTree::MovableJointImpl< 5,5 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("MovableJointImpl5_getDOFsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_5_5_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl5_getDOFsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 5,5 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 5,5 > * >(argp1);
  result = ((iDynTree::MovableJointImpl< 5,5 > const *)arg1)->getDOFsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_MovableJointImpl6 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 6,6 > *arg1 = (iDynTree::MovableJointImpl< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_MovableJointImpl6",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_6_6_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MovableJointImpl6" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 6,6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 6,6 > * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl6_getNrOfPosCoords (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 6,6 > *arg1 = (iDynTree::MovableJointImpl< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MovableJointImpl6_getNrOfPosCoords",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl6_getNrOfPosCoords" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 6,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 6,6 > * >(argp1);
  result = (unsigned int)((iDynTree::MovableJointImpl< 6,6 > const *)arg1)->getNrOfPosCoords();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl6_getNrOfDOFs (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 6,6 > *arg1 = (iDynTree::MovableJointImpl< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MovableJointImpl6_getNrOfDOFs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl6_getNrOfDOFs" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 6,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 6,6 > * >(argp1);
  result = (unsigned int)((iDynTree::MovableJointImpl< 6,6 > const *)arg1)->getNrOfDOFs();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl6_setIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 6,6 > *arg1 = (iDynTree::MovableJointImpl< 6,6 > *) 0 ;
  iDynTree::JointIndex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl6_setIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl6_setIndex" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 6,6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 6,6 > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MovableJointImpl6_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MovableJointImpl6_setIndex" "', argument " "2"" of type '" "iDynTree::JointIndex &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::JointIndex * >(argp2);
  (arg1)->setIndex(*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl6_getIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 6,6 > *arg1 = (iDynTree::MovableJointImpl< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointIndex result;
  
  if (!SWIG_check_num_args("MovableJointImpl6_getIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl6_getIndex" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 6,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 6,6 > * >(argp1);
  result = (iDynTree::JointIndex)((iDynTree::MovableJointImpl< 6,6 > const *)arg1)->getIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl6_setPosCoordsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 6,6 > *arg1 = (iDynTree::MovableJointImpl< 6,6 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl6_setPosCoordsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl6_setPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 6,6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 6,6 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MovableJointImpl6_setPosCoordsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setPosCoordsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl6_getPosCoordsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 6,6 > *arg1 = (iDynTree::MovableJointImpl< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("MovableJointImpl6_getPosCoordsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl6_getPosCoordsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 6,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 6,6 > * >(argp1);
  result = ((iDynTree::MovableJointImpl< 6,6 > const *)arg1)->getPosCoordsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl6_setDOFsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 6,6 > *arg1 = (iDynTree::MovableJointImpl< 6,6 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MovableJointImpl6_setDOFsOffset",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl6_setDOFsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 6,6 > *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 6,6 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MovableJointImpl6_setDOFsOffset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->setDOFsOffset(arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MovableJointImpl6_getDOFsOffset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MovableJointImpl< 6,6 > *arg1 = (iDynTree::MovableJointImpl< 6,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("MovableJointImpl6_getDOFsOffset",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MovableJointImplT_6_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MovableJointImpl6_getDOFsOffset" "', argument " "1"" of type '" "iDynTree::MovableJointImpl< 6,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MovableJointImpl< 6,6 > * >(argp1);
  result = ((iDynTree::MovableJointImpl< 6,6 > const *)arg1)->getDOFsOffset();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RevoluteJoint__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::LinkIndex arg1 ;
  iDynTree::LinkIndex arg2 ;
  iDynTree::Transform *arg3 = 0 ;
  iDynTree::Axis *arg4 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  mxArray * _out;
  iDynTree::RevoluteJoint *result = 0 ;
  
  if (!SWIG_check_num_args("new_RevoluteJoint",argc,4,4,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RevoluteJoint" "', argument " "1"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg1 = static_cast< iDynTree::LinkIndex >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RevoluteJoint" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_RevoluteJoint" "', argument " "3"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RevoluteJoint" "', argument " "3"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Transform * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__Axis,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_RevoluteJoint" "', argument " "4"" of type '" "iDynTree::Axis const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RevoluteJoint" "', argument " "4"" of type '" "iDynTree::Axis const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::Axis * >(argp4);
  result = (iDynTree::RevoluteJoint *)new iDynTree::RevoluteJoint(arg1,arg2,(iDynTree::Transform const &)*arg3,(iDynTree::Axis const &)*arg4);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RevoluteJoint, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RevoluteJoint__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::RevoluteJoint *result = 0 ;
  
  if (!SWIG_check_num_args("new_RevoluteJoint",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__RevoluteJoint,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RevoluteJoint" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RevoluteJoint" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  result = (iDynTree::RevoluteJoint *)new iDynTree::RevoluteJoint((iDynTree::RevoluteJoint const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RevoluteJoint, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_RevoluteJoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RevoluteJoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RevoluteJoint__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__Axis, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_RevoluteJoint__SWIG_0(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_RevoluteJoint'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::RevoluteJoint::RevoluteJoint(iDynTree::LinkIndex const,iDynTree::LinkIndex const,iDynTree::Transform const &,iDynTree::Axis const &)\n"
    "    iDynTree::RevoluteJoint::RevoluteJoint(iDynTree::RevoluteJoint const &)\n");
  return 1;
}


int _wrap_delete_RevoluteJoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_RevoluteJoint",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RevoluteJoint" "', argument " "1"" of type '" "iDynTree::RevoluteJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_clone (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::IJoint *result = 0 ;
  
  if (!SWIG_check_num_args("RevoluteJoint_clone",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_clone" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  result = (iDynTree::IJoint *)((iDynTree::RevoluteJoint const *)arg1)->clone();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_setAttachedLinks (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  iDynTree::LinkIndex arg2 ;
  iDynTree::LinkIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RevoluteJoint_setAttachedLinks",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_setAttachedLinks" "', argument " "1"" of type '" "iDynTree::RevoluteJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RevoluteJoint_setAttachedLinks" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RevoluteJoint_setAttachedLinks" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  (arg1)->setAttachedLinks(arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_setRestTransform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  iDynTree::Transform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RevoluteJoint_setRestTransform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_setRestTransform" "', argument " "1"" of type '" "iDynTree::RevoluteJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RevoluteJoint_setRestTransform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_setRestTransform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  (arg1)->setRestTransform((iDynTree::Transform const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_setAxis (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  iDynTree::Axis *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RevoluteJoint_setAxis",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_setAxis" "', argument " "1"" of type '" "iDynTree::RevoluteJoint *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Axis,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RevoluteJoint_setAxis" "', argument " "2"" of type '" "iDynTree::Axis const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_setAxis" "', argument " "2"" of type '" "iDynTree::Axis const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Axis * >(argp2);
  (arg1)->setAxis((iDynTree::Axis const &)*arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_getFirstAttachedLink (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("RevoluteJoint_getFirstAttachedLink",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_getFirstAttachedLink" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  result = (iDynTree::LinkIndex)((iDynTree::RevoluteJoint const *)arg1)->getFirstAttachedLink();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_getSecondAttachedLink (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("RevoluteJoint_getSecondAttachedLink",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_getSecondAttachedLink" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  result = (iDynTree::LinkIndex)((iDynTree::RevoluteJoint const *)arg1)->getSecondAttachedLink();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_getAxis (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Axis result;
  
  if (!SWIG_check_num_args("RevoluteJoint_getAxis",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_getAxis" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RevoluteJoint_getAxis" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = ((iDynTree::RevoluteJoint const *)arg1)->getAxis(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Axis(static_cast< const iDynTree::Axis& >(result))), SWIGTYPE_p_iDynTree__Axis, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_getRestTransform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  iDynTree::LinkIndex arg2 ;
  iDynTree::LinkIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("RevoluteJoint_getRestTransform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_getRestTransform" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RevoluteJoint_getRestTransform" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RevoluteJoint_getRestTransform" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  result = ((iDynTree::RevoluteJoint const *)arg1)->getRestTransform(arg2,arg3);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_getTransform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  iDynTree::IRawVector *arg2 = 0 ;
  iDynTree::LinkIndex arg3 ;
  iDynTree::LinkIndex arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("RevoluteJoint_getTransform",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_getTransform" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RevoluteJoint_getTransform" "', argument " "2"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_getTransform" "', argument " "2"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::IRawVector * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RevoluteJoint_getTransform" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RevoluteJoint_getTransform" "', argument " "4"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg4 = static_cast< iDynTree::LinkIndex >(val4);
  result = ((iDynTree::RevoluteJoint const *)arg1)->getTransform((iDynTree::IRawVector const &)*arg2,arg3,arg4);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_getMotionSubspaceVector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  int arg2 ;
  iDynTree::LinkIndex arg3 ;
  iDynTree::LinkIndex arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVector result;
  
  if (!SWIG_check_num_args("RevoluteJoint_getMotionSubspaceVector",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_getMotionSubspaceVector" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RevoluteJoint_getMotionSubspaceVector" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RevoluteJoint_getMotionSubspaceVector" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RevoluteJoint_getMotionSubspaceVector" "', argument " "4"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg4 = static_cast< iDynTree::LinkIndex >(val4);
  result = ((iDynTree::RevoluteJoint const *)arg1)->getMotionSubspaceVector(arg2,arg3,arg4);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVector(static_cast< const iDynTree::SpatialMotionVector& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVector, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_computeChildPosVelAcc (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  iDynTree::IRawVector *arg2 = 0 ;
  iDynTree::IRawVector *arg3 = 0 ;
  iDynTree::IRawVector *arg4 = 0 ;
  iDynTree::LinkPositions *arg5 = 0 ;
  iDynTree::LinkVelArray *arg6 = 0 ;
  iDynTree::LinkAccArray *arg7 = 0 ;
  iDynTree::LinkIndex arg8 ;
  iDynTree::LinkIndex arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RevoluteJoint_computeChildPosVelAcc",argc,9,9,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "2"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "2"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::IRawVector * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "3"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "3"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::IRawVector * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "4"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "4"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::IRawVector * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__LinkPositions,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "5"" of type '" "iDynTree::LinkPositions &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "5"" of type '" "iDynTree::LinkPositions &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::LinkPositions * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "6"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "6"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::LinkVelArray * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "7"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "7"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  arg7 = reinterpret_cast< iDynTree::LinkAccArray * >(argp7);
  ecode8 = SWIG_AsVal_int(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "8"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg8 = static_cast< iDynTree::LinkIndex >(val8);
  ecode9 = SWIG_AsVal_int(argv[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "RevoluteJoint_computeChildPosVelAcc" "', argument " "9"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg9 = static_cast< iDynTree::LinkIndex >(val9);
  ((iDynTree::RevoluteJoint const *)arg1)->computeChildPosVelAcc((iDynTree::IRawVector const &)*arg2,(iDynTree::IRawVector const &)*arg3,(iDynTree::IRawVector const &)*arg4,*arg5,*arg6,*arg7,arg8,arg9);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_computeChildVelAcc (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  iDynTree::IRawVector *arg2 = 0 ;
  iDynTree::IRawVector *arg3 = 0 ;
  iDynTree::IRawVector *arg4 = 0 ;
  iDynTree::LinkVelArray *arg5 = 0 ;
  iDynTree::LinkAccArray *arg6 = 0 ;
  iDynTree::LinkIndex arg7 ;
  iDynTree::LinkIndex arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RevoluteJoint_computeChildVelAcc",argc,8,8,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_computeChildVelAcc" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RevoluteJoint_computeChildVelAcc" "', argument " "2"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildVelAcc" "', argument " "2"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::IRawVector * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RevoluteJoint_computeChildVelAcc" "', argument " "3"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildVelAcc" "', argument " "3"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::IRawVector * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RevoluteJoint_computeChildVelAcc" "', argument " "4"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildVelAcc" "', argument " "4"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::IRawVector * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__LinkVelArray,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "RevoluteJoint_computeChildVelAcc" "', argument " "5"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildVelAcc" "', argument " "5"" of type '" "iDynTree::LinkVelArray &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::LinkVelArray * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__LinkAccArray,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "RevoluteJoint_computeChildVelAcc" "', argument " "6"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeChildVelAcc" "', argument " "6"" of type '" "iDynTree::LinkAccArray &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::LinkAccArray * >(argp6);
  ecode7 = SWIG_AsVal_int(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "RevoluteJoint_computeChildVelAcc" "', argument " "7"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg7 = static_cast< iDynTree::LinkIndex >(val7);
  ecode8 = SWIG_AsVal_int(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "RevoluteJoint_computeChildVelAcc" "', argument " "8"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg8 = static_cast< iDynTree::LinkIndex >(val8);
  ((iDynTree::RevoluteJoint const *)arg1)->computeChildVelAcc((iDynTree::IRawVector const &)*arg2,(iDynTree::IRawVector const &)*arg3,(iDynTree::IRawVector const &)*arg4,*arg5,*arg6,arg7,arg8);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_RevoluteJoint_computeJointTorque (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RevoluteJoint *arg1 = (iDynTree::RevoluteJoint *) 0 ;
  iDynTree::IRawVector *arg2 = 0 ;
  iDynTree::Wrench *arg3 = 0 ;
  iDynTree::LinkIndex arg4 ;
  iDynTree::LinkIndex arg5 ;
  iDynTree::IRawVector *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RevoluteJoint_computeJointTorque",argc,6,6,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RevoluteJoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevoluteJoint_computeJointTorque" "', argument " "1"" of type '" "iDynTree::RevoluteJoint const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RevoluteJoint * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RevoluteJoint_computeJointTorque" "', argument " "2"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeJointTorque" "', argument " "2"" of type '" "iDynTree::IRawVector const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::IRawVector * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RevoluteJoint_computeJointTorque" "', argument " "3"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeJointTorque" "', argument " "3"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Wrench * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RevoluteJoint_computeJointTorque" "', argument " "4"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg4 = static_cast< iDynTree::LinkIndex >(val4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RevoluteJoint_computeJointTorque" "', argument " "5"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg5 = static_cast< iDynTree::LinkIndex >(val5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__IRawVector,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "RevoluteJoint_computeJointTorque" "', argument " "6"" of type '" "iDynTree::IRawVector &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RevoluteJoint_computeJointTorque" "', argument " "6"" of type '" "iDynTree::IRawVector &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::IRawVector * >(argp6);
  ((iDynTree::RevoluteJoint const *)arg1)->computeJointTorque((iDynTree::IRawVector const &)*arg2,(iDynTree::Wrench const &)*arg3,arg4,arg5,*arg6);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Traversal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Traversal *result = 0 ;
  
  if (!SWIG_check_num_args("new_Traversal",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::Traversal *)new iDynTree::Traversal();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Traversal, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Traversal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Traversal *arg1 = (iDynTree::Traversal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Traversal",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Traversal, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Traversal" "', argument " "1"" of type '" "iDynTree::Traversal *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Traversal * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Traversal_getNrOfVisitedLinks (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Traversal *arg1 = (iDynTree::Traversal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Traversal_getNrOfVisitedLinks",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Traversal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Traversal_getNrOfVisitedLinks" "', argument " "1"" of type '" "iDynTree::Traversal const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Traversal * >(argp1);
  result = (unsigned int)((iDynTree::Traversal const *)arg1)->getNrOfVisitedLinks();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Traversal_getLink (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Traversal *arg1 = (iDynTree::Traversal *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Link *result = 0 ;
  
  if (!SWIG_check_num_args("Traversal_getLink",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Traversal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Traversal_getLink" "', argument " "1"" of type '" "iDynTree::Traversal const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Traversal * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Traversal_getLink" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::Link *)((iDynTree::Traversal const *)arg1)->getLink(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Link, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Traversal_getParentLink (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Traversal *arg1 = (iDynTree::Traversal *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Link *result = 0 ;
  
  if (!SWIG_check_num_args("Traversal_getParentLink",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Traversal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Traversal_getParentLink" "', argument " "1"" of type '" "iDynTree::Traversal const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Traversal * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Traversal_getParentLink" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::Link *)((iDynTree::Traversal const *)arg1)->getParentLink(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Link, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Traversal_getParentJoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Traversal *arg1 = (iDynTree::Traversal *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::IJoint *result = 0 ;
  
  if (!SWIG_check_num_args("Traversal_getParentJoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Traversal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Traversal_getParentJoint" "', argument " "1"" of type '" "iDynTree::Traversal const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Traversal * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Traversal_getParentJoint" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::IJoint *)((iDynTree::Traversal const *)arg1)->getParentJoint(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Traversal_getParentLinkFromLinkIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Traversal *arg1 = (iDynTree::Traversal *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Link *result = 0 ;
  
  if (!SWIG_check_num_args("Traversal_getParentLinkFromLinkIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Traversal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Traversal_getParentLinkFromLinkIndex" "', argument " "1"" of type '" "iDynTree::Traversal const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Traversal * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Traversal_getParentLinkFromLinkIndex" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::Link *)((iDynTree::Traversal const *)arg1)->getParentLinkFromLinkIndex(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Link, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Traversal_getParentJointFromLinkIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Traversal *arg1 = (iDynTree::Traversal *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::IJoint *result = 0 ;
  
  if (!SWIG_check_num_args("Traversal_getParentJointFromLinkIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Traversal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Traversal_getParentJointFromLinkIndex" "', argument " "1"" of type '" "iDynTree::Traversal const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Traversal * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Traversal_getParentJointFromLinkIndex" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (iDynTree::IJoint *)((iDynTree::Traversal const *)arg1)->getParentJointFromLinkIndex(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Traversal_reset__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Traversal *arg1 = (iDynTree::Traversal *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Traversal_reset",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Traversal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Traversal_reset" "', argument " "1"" of type '" "iDynTree::Traversal *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Traversal * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Traversal_reset" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Traversal_reset" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (bool)(arg1)->reset(arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Traversal_reset__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Traversal *arg1 = (iDynTree::Traversal *) 0 ;
  unsigned int arg2 ;
  iDynTree::Model *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Traversal_reset",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Traversal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Traversal_reset" "', argument " "1"" of type '" "iDynTree::Traversal *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Traversal * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Traversal_reset" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Traversal_reset" "', argument " "3"" of type '" "iDynTree::Model &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Traversal_reset" "', argument " "3"" of type '" "iDynTree::Model &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Model * >(argp3);
  result = (bool)(arg1)->reset(arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Traversal_reset (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Traversal, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Traversal_reset__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Traversal, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Traversal_reset__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Traversal_reset'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Traversal::reset(unsigned int,unsigned int)\n"
    "    iDynTree::Traversal::reset(unsigned int,iDynTree::Model &)\n");
  return 1;
}


int _wrap_Traversal_setTraversalElement (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Traversal *arg1 = (iDynTree::Traversal *) 0 ;
  unsigned int arg2 ;
  iDynTree::Link *arg3 = (iDynTree::Link *) 0 ;
  iDynTree::IJoint *arg4 = (iDynTree::IJoint *) 0 ;
  iDynTree::Link *arg5 = (iDynTree::Link *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Traversal_setTraversalElement",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Traversal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Traversal_setTraversalElement" "', argument " "1"" of type '" "iDynTree::Traversal *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Traversal * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Traversal_setTraversalElement" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3,SWIGTYPE_p_iDynTree__Link, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Traversal_setTraversalElement" "', argument " "3"" of type '" "iDynTree::Link const *""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Link * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Traversal_setTraversalElement" "', argument " "4"" of type '" "iDynTree::IJoint const *""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::IJoint * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5,SWIGTYPE_p_iDynTree__Link, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Traversal_setTraversalElement" "', argument " "5"" of type '" "iDynTree::Link const *""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::Link * >(argp5);
  result = (bool)(arg1)->setTraversalElement(arg2,(iDynTree::Link const *)arg3,(iDynTree::IJoint const *)arg4,(iDynTree::Link const *)arg5);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Neighbor_neighborLink_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Neighbor *arg1 = (iDynTree::Neighbor *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Neighbor_neighborLink_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Neighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Neighbor_neighborLink_set" "', argument " "1"" of type '" "iDynTree::Neighbor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Neighbor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Neighbor_neighborLink_set" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  if (arg1) (arg1)->neighborLink = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Neighbor_neighborLink_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Neighbor *arg1 = (iDynTree::Neighbor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("Neighbor_neighborLink_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Neighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Neighbor_neighborLink_get" "', argument " "1"" of type '" "iDynTree::Neighbor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Neighbor * >(argp1);
  result = (iDynTree::LinkIndex) ((arg1)->neighborLink);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Neighbor_neighborJoint_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Neighbor *arg1 = (iDynTree::Neighbor *) 0 ;
  iDynTree::JointIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Neighbor_neighborJoint_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Neighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Neighbor_neighborJoint_set" "', argument " "1"" of type '" "iDynTree::Neighbor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Neighbor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Neighbor_neighborJoint_set" "', argument " "2"" of type '" "iDynTree::JointIndex""'");
  } 
  arg2 = static_cast< iDynTree::JointIndex >(val2);
  if (arg1) (arg1)->neighborJoint = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Neighbor_neighborJoint_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Neighbor *arg1 = (iDynTree::Neighbor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::JointIndex result;
  
  if (!SWIG_check_num_args("Neighbor_neighborJoint_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Neighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Neighbor_neighborJoint_get" "', argument " "1"" of type '" "iDynTree::Neighbor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Neighbor * >(argp1);
  result = (iDynTree::JointIndex) ((arg1)->neighborJoint);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Neighbor (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Neighbor *result = 0 ;
  
  if (!SWIG_check_num_args("new_Neighbor",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::Neighbor *)new iDynTree::Neighbor();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Neighbor, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Neighbor (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Neighbor *arg1 = (iDynTree::Neighbor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Neighbor",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Neighbor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Neighbor" "', argument " "1"" of type '" "iDynTree::Neighbor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Neighbor * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Model__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Model *result = 0 ;
  
  if (!SWIG_check_num_args("new_Model",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::Model *)new iDynTree::Model();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Model, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Model__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Model *result = 0 ;
  
  if (!SWIG_check_num_args("new_Model",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Model" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Model" "', argument " "1"" of type '" "iDynTree::Model const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::Model *)new iDynTree::Model((iDynTree::Model const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Model, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Model (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Model__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Model__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Model'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Model::Model()\n"
    "    iDynTree::Model::Model(iDynTree::Model const &)\n");
  return 1;
}


int _wrap_delete_Model (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Model",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Model" "', argument " "1"" of type '" "iDynTree::Model *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getNrOfLinks (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("Model_getNrOfLinks",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getNrOfLinks" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = ((iDynTree::Model const *)arg1)->getNrOfLinks();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getLinkName (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Model_getLinkName",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getLinkName" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_getLinkName" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = ((iDynTree::Model const *)arg1)->getLinkName(arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getLinkIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("Model_getLinkIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getLinkIndex" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_getLinkIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_getLinkIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (iDynTree::LinkIndex)((iDynTree::Model const *)arg1)->getLinkIndex((std::string const &)*arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_Model_addLink (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  std::string *arg2 = 0 ;
  iDynTree::Link *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("Model_addLink",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_addLink" "', argument " "1"" of type '" "iDynTree::Model *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_addLink" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_addLink" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Link,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Model_addLink" "', argument " "3"" of type '" "iDynTree::Link const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_addLink" "', argument " "3"" of type '" "iDynTree::Link const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Link * >(argp3);
  result = (iDynTree::LinkIndex)(arg1)->addLink((std::string const &)*arg2,(iDynTree::Link const &)*arg3);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_Model_getNrOfJoints (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("Model_getNrOfJoints",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getNrOfJoints" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = ((iDynTree::Model const *)arg1)->getNrOfJoints();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getJointName (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::JointIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Model_getJointName",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getJointName" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_getJointName" "', argument " "2"" of type '" "iDynTree::JointIndex""'");
  } 
  arg2 = static_cast< iDynTree::JointIndex >(val2);
  result = ((iDynTree::Model const *)arg1)->getJointName(arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getJointIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  iDynTree::JointIndex result;
  
  if (!SWIG_check_num_args("Model_getJointIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getJointIndex" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_getJointIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_getJointIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (iDynTree::JointIndex)((iDynTree::Model const *)arg1)->getJointIndex((std::string const &)*arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_Model_addJoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  std::string *arg2 = 0 ;
  iDynTree::IJointConstPtr arg3 = (iDynTree::IJointConstPtr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  iDynTree::JointIndex result;
  
  if (!SWIG_check_num_args("Model_addJoint",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_addJoint" "', argument " "1"" of type '" "iDynTree::Model *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_addJoint" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_addJoint" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[2], &argp3,SWIGTYPE_p_iDynTree__IJoint, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Model_addJoint" "', argument " "3"" of type '" "iDynTree::IJointConstPtr""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::IJointConstPtr >(argp3);
  result = (iDynTree::JointIndex)(arg1)->addJoint((std::string const &)*arg2,arg3);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_Model_getNrOfPosCoords (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("Model_getNrOfPosCoords",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getNrOfPosCoords" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = ((iDynTree::Model const *)arg1)->getNrOfPosCoords();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getNrOfDOFs (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("Model_getNrOfDOFs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getNrOfDOFs" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = ((iDynTree::Model const *)arg1)->getNrOfDOFs();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getNrOfFrames (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  size_t result;
  
  if (!SWIG_check_num_args("Model_getNrOfFrames",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getNrOfFrames" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = ((iDynTree::Model const *)arg1)->getNrOfFrames();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_addAdditionalFrameToLink (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  iDynTree::Transform arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Model_addAdditionalFrameToLink",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_addAdditionalFrameToLink" "', argument " "1"" of type '" "iDynTree::Model *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_addAdditionalFrameToLink" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_addAdditionalFrameToLink" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Model_addAdditionalFrameToLink" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_addAdditionalFrameToLink" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__Transform,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Model_addAdditionalFrameToLink" "', argument " "4"" of type '" "iDynTree::Transform""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_addAdditionalFrameToLink" "', argument " "4"" of type '" "iDynTree::Transform""'");
    } else {
      arg4 = *(reinterpret_cast< iDynTree::Transform * >(argp4));
    }
  }
  result = (bool)(arg1)->addAdditionalFrameToLink((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_Model_getFrameName (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::FrameIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Model_getFrameName",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getFrameName" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_getFrameName" "', argument " "2"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg2 = static_cast< iDynTree::FrameIndex >(val2);
  result = ((iDynTree::Model const *)arg1)->getFrameName(arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getFrameIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  iDynTree::FrameIndex result;
  
  if (!SWIG_check_num_args("Model_getFrameIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getFrameIndex" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_getFrameIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_getFrameIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (iDynTree::FrameIndex)((iDynTree::Model const *)arg1)->getFrameIndex((std::string const &)*arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_Model_getFrameTransform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::FrameIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("Model_getFrameTransform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getFrameTransform" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_getFrameTransform" "', argument " "2"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg2 = static_cast< iDynTree::FrameIndex >(val2);
  result = ((iDynTree::Model const *)arg1)->getFrameTransform(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getFrameLink (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::FrameIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("Model_getFrameLink",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getFrameLink" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_getFrameLink" "', argument " "2"" of type '" "iDynTree::FrameIndex""'");
  } 
  arg2 = static_cast< iDynTree::FrameIndex >(val2);
  result = (iDynTree::LinkIndex)((iDynTree::Model const *)arg1)->getFrameLink(arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getNrOfNeighbors (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Model_getNrOfNeighbors",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getNrOfNeighbors" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_getNrOfNeighbors" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (unsigned int)((iDynTree::Model const *)arg1)->getNrOfNeighbors(arg2);
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getNeighbor (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::LinkIndex arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::Neighbor result;
  
  if (!SWIG_check_num_args("Model_getNeighbor",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getNeighbor" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_getNeighbor" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Model_getNeighbor" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = ((iDynTree::Model const *)arg1)->getNeighbor(arg2,arg3);
  _out = SWIG_NewPointerObj((new iDynTree::Neighbor(static_cast< const iDynTree::Neighbor& >(result))), SWIGTYPE_p_iDynTree__Neighbor, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_setDefaultBaseLink (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::LinkIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Model_setDefaultBaseLink",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_setDefaultBaseLink" "', argument " "1"" of type '" "iDynTree::Model *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Model_setDefaultBaseLink" "', argument " "2"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg2 = static_cast< iDynTree::LinkIndex >(val2);
  result = (bool)(arg1)->setDefaultBaseLink(arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_getDefaultBaseLink (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::LinkIndex result;
  
  if (!SWIG_check_num_args("Model_getDefaultBaseLink",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getDefaultBaseLink" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  result = (iDynTree::LinkIndex)((iDynTree::Model const *)arg1)->getDefaultBaseLink();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_computeFullTreeTraversal__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::Traversal *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Model_computeFullTreeTraversal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_computeFullTreeTraversal" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Traversal,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_computeFullTreeTraversal" "', argument " "2"" of type '" "iDynTree::Traversal &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_computeFullTreeTraversal" "', argument " "2"" of type '" "iDynTree::Traversal &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Traversal * >(argp2);
  result = (bool)((iDynTree::Model const *)arg1)->computeFullTreeTraversal(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_computeFullTreeTraversal__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Model *arg1 = (iDynTree::Model *) 0 ;
  iDynTree::Traversal *arg2 = 0 ;
  iDynTree::LinkIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Model_computeFullTreeTraversal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_computeFullTreeTraversal" "', argument " "1"" of type '" "iDynTree::Model const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Model * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Traversal,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_computeFullTreeTraversal" "', argument " "2"" of type '" "iDynTree::Traversal &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_computeFullTreeTraversal" "', argument " "2"" of type '" "iDynTree::Traversal &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Traversal * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Model_computeFullTreeTraversal" "', argument " "3"" of type '" "iDynTree::LinkIndex""'");
  } 
  arg3 = static_cast< iDynTree::LinkIndex >(val3);
  result = (bool)((iDynTree::Model const *)arg1)->computeFullTreeTraversal(*arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Model_computeFullTreeTraversal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Traversal, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Model_computeFullTreeTraversal__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Traversal, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Model_computeFullTreeTraversal__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'Model_computeFullTreeTraversal'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Model::computeFullTreeTraversal(iDynTree::Traversal &) const\n"
    "    iDynTree::Model::computeFullTreeTraversal(iDynTree::Traversal &,iDynTree::LinkIndex const) const\n");
  return 1;
}


int _wrap_modelFromURDF (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  iDynTree::Model *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("modelFromURDF",argc,2,2,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "modelFromURDF" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "modelFromURDF" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "modelFromURDF" "', argument " "2"" of type '" "iDynTree::Model &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "modelFromURDF" "', argument " "2"" of type '" "iDynTree::Model &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)iDynTree::modelFromURDF((std::string const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_modelFromURDFString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  iDynTree::Model *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("modelFromURDFString",argc,2,2,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "modelFromURDFString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "modelFromURDFString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "modelFromURDFString" "', argument " "2"" of type '" "iDynTree::Model &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "modelFromURDFString" "', argument " "2"" of type '" "iDynTree::Model &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  result = (bool)iDynTree::modelFromURDFString((std::string const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_NR_OF_SENSOR_TYPES_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("NR_OF_SENSOR_TYPES_get",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (int)(int)iDynTree::NR_OF_SENSOR_TYPES;
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Sensor (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Sensor *arg1 = (iDynTree::Sensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Sensor",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Sensor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Sensor" "', argument " "1"" of type '" "iDynTree::Sensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Sensor * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Sensor_getName (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Sensor *arg1 = (iDynTree::Sensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Sensor_getName",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Sensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sensor_getName" "', argument " "1"" of type '" "iDynTree::Sensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Sensor * >(argp1);
  result = ((iDynTree::Sensor const *)arg1)->getName();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Sensor_getSensorType (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Sensor *arg1 = (iDynTree::Sensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SensorType result;
  
  if (!SWIG_check_num_args("Sensor_getSensorType",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Sensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sensor_getSensorType" "', argument " "1"" of type '" "iDynTree::Sensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Sensor * >(argp1);
  result = (iDynTree::SensorType)((iDynTree::Sensor const *)arg1)->getSensorType();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Sensor_getParent (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Sensor *arg1 = (iDynTree::Sensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Sensor_getParent",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Sensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sensor_getParent" "', argument " "1"" of type '" "iDynTree::Sensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Sensor * >(argp1);
  result = ((iDynTree::Sensor const *)arg1)->getParent();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Sensor_getParentIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Sensor *arg1 = (iDynTree::Sensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("Sensor_getParentIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Sensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sensor_getParentIndex" "', argument " "1"" of type '" "iDynTree::Sensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Sensor * >(argp1);
  result = (int)((iDynTree::Sensor const *)arg1)->getParentIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Sensor_isValid (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Sensor *arg1 = (iDynTree::Sensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Sensor_isValid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Sensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sensor_isValid" "', argument " "1"" of type '" "iDynTree::Sensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Sensor * >(argp1);
  result = (bool)((iDynTree::Sensor const *)arg1)->isValid();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Sensor_setName (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Sensor *arg1 = (iDynTree::Sensor *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Sensor_setName",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Sensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sensor_setName" "', argument " "1"" of type '" "iDynTree::Sensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Sensor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sensor_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sensor_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setName((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_Sensor_setParent (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Sensor *arg1 = (iDynTree::Sensor *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Sensor_setParent",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Sensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sensor_setParent" "', argument " "1"" of type '" "iDynTree::Sensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Sensor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sensor_setParent" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sensor_setParent" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setParent((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_Sensor_setParentIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Sensor *arg1 = (iDynTree::Sensor *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Sensor_setParentIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Sensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sensor_setParentIndex" "', argument " "1"" of type '" "iDynTree::Sensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Sensor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sensor_setParentIndex" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  result = (bool)(arg1)->setParentIndex((int const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Sensor_clone (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Sensor *arg1 = (iDynTree::Sensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Sensor *result = 0 ;
  
  if (!SWIG_check_num_args("Sensor_clone",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Sensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sensor_clone" "', argument " "1"" of type '" "iDynTree::Sensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Sensor * >(argp1);
  result = (iDynTree::Sensor *)((iDynTree::Sensor const *)arg1)->clone();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Sensor, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SensorsList__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SensorsList *result = 0 ;
  
  if (!SWIG_check_num_args("new_SensorsList",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::SensorsList *)new iDynTree::SensorsList();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SensorsList, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SensorsList__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsList *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SensorsList *result = 0 ;
  
  if (!SWIG_check_num_args("new_SensorsList",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SensorsList,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SensorsList" "', argument " "1"" of type '" "iDynTree::SensorsList const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SensorsList" "', argument " "1"" of type '" "iDynTree::SensorsList const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsList * >(argp1);
  result = (iDynTree::SensorsList *)new iDynTree::SensorsList((iDynTree::SensorsList const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SensorsList, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SensorsList (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_SensorsList__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SensorsList, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SensorsList__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_SensorsList'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SensorsList::SensorsList()\n"
    "    iDynTree::SensorsList::SensorsList(iDynTree::SensorsList const &)\n");
  return 1;
}


int _wrap_delete_SensorsList (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsList *arg1 = (iDynTree::SensorsList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SensorsList",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsList, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SensorsList" "', argument " "1"" of type '" "iDynTree::SensorsList *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsList * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsList_addSensor (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsList *arg1 = (iDynTree::SensorsList *) 0 ;
  iDynTree::Sensor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("SensorsList_addSensor",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsList_addSensor" "', argument " "1"" of type '" "iDynTree::SensorsList *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsList * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Sensor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SensorsList_addSensor" "', argument " "2"" of type '" "iDynTree::Sensor const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SensorsList_addSensor" "', argument " "2"" of type '" "iDynTree::Sensor const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Sensor * >(argp2);
  result = (int)(arg1)->addSensor((iDynTree::Sensor const &)*arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsList_getNrOfSensors (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsList *arg1 = (iDynTree::SensorsList *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("SensorsList_getNrOfSensors",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsList_getNrOfSensors" "', argument " "1"" of type '" "iDynTree::SensorsList const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsList * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsList_getNrOfSensors" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  result = (unsigned int)((iDynTree::SensorsList const *)arg1)->getNrOfSensors((iDynTree::SensorType const &)*arg2);
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsList_getSensorIndex__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsList *arg1 = (iDynTree::SensorsList *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  std::string *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SensorsList_getSensorIndex",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsList_getSensorIndex" "', argument " "1"" of type '" "iDynTree::SensorsList const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsList * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsList_getSensorIndex" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SensorsList_getSensorIndex" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SensorsList_getSensorIndex" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SensorsList_getSensorIndex" "', argument " "4"" of type '" "unsigned int &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SensorsList_getSensorIndex" "', argument " "4"" of type '" "unsigned int &""'"); 
  }
  arg4 = reinterpret_cast< unsigned int * >(argp4);
  result = (bool)((iDynTree::SensorsList const *)arg1)->getSensorIndex((iDynTree::SensorType const &)*arg2,(std::string const &)*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_SensorsList_getSensorIndex__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsList *arg1 = (iDynTree::SensorsList *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("SensorsList_getSensorIndex",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsList_getSensorIndex" "', argument " "1"" of type '" "iDynTree::SensorsList const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsList * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsList_getSensorIndex" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SensorsList_getSensorIndex" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SensorsList_getSensorIndex" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (int)((iDynTree::SensorsList const *)arg1)->getSensorIndex((iDynTree::SensorType const &)*arg2,(std::string const &)*arg3);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_SensorsList_getSensorIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SensorsList, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SensorsList_getSensorIndex__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SensorsList, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_unsigned_int, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SensorsList_getSensorIndex__SWIG_0(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'SensorsList_getSensorIndex'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SensorsList::getSensorIndex(iDynTree::SensorType const &,std::string const &,unsigned int &) const\n"
    "    iDynTree::SensorsList::getSensorIndex(iDynTree::SensorType const &,std::string const &) const\n");
  return 1;
}


int _wrap_SensorsList_getSensor (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsList *arg1 = (iDynTree::SensorsList *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::Sensor *result = 0 ;
  
  if (!SWIG_check_num_args("SensorsList_getSensor",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsList_getSensor" "', argument " "1"" of type '" "iDynTree::SensorsList const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsList * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsList_getSensor" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SensorsList_getSensor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (iDynTree::Sensor *)((iDynTree::SensorsList const *)arg1)->getSensor((iDynTree::SensorType const &)*arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Sensor, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsList_getSixAxisForceTorqueSensor (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsList *arg1 = (iDynTree::SensorsList *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SixAxisForceTorqueSensor *result = 0 ;
  
  if (!SWIG_check_num_args("SensorsList_getSixAxisForceTorqueSensor",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsList_getSixAxisForceTorqueSensor" "', argument " "1"" of type '" "iDynTree::SensorsList const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsList * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsList_getSixAxisForceTorqueSensor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (iDynTree::SixAxisForceTorqueSensor *)iDynTree_SensorsList_getSixAxisForceTorqueSensor((iDynTree::SensorsList const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SensorsMeasurements__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SensorsMeasurements *result = 0 ;
  
  if (!SWIG_check_num_args("new_SensorsMeasurements",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::SensorsMeasurements *)new iDynTree::SensorsMeasurements();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SensorsMeasurements, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SensorsMeasurements__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsMeasurements *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SensorsMeasurements *result = 0 ;
  
  if (!SWIG_check_num_args("new_SensorsMeasurements",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SensorsMeasurements,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SensorsMeasurements" "', argument " "1"" of type '" "iDynTree::SensorsMeasurements const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SensorsMeasurements" "', argument " "1"" of type '" "iDynTree::SensorsMeasurements const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp1);
  result = (iDynTree::SensorsMeasurements *)new iDynTree::SensorsMeasurements((iDynTree::SensorsMeasurements const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SensorsMeasurements, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SensorsMeasurements (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_SensorsMeasurements__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SensorsMeasurements, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SensorsMeasurements__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_SensorsMeasurements'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SensorsMeasurements::SensorsMeasurements()\n"
    "    iDynTree::SensorsMeasurements::SensorsMeasurements(iDynTree::SensorsMeasurements const &)\n");
  return 1;
}


int _wrap_delete_SensorsMeasurements (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsMeasurements *arg1 = (iDynTree::SensorsMeasurements *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SensorsMeasurements",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsMeasurements, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SensorsMeasurements" "', argument " "1"" of type '" "iDynTree::SensorsMeasurements *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsMeasurements_setNrOfSensors (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsMeasurements *arg1 = (iDynTree::SensorsMeasurements *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SensorsMeasurements_setNrOfSensors",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsMeasurements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsMeasurements_setNrOfSensors" "', argument " "1"" of type '" "iDynTree::SensorsMeasurements *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsMeasurements_setNrOfSensors" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SensorsMeasurements_setNrOfSensors" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (bool)(arg1)->setNrOfSensors((iDynTree::SensorType const &)*arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsMeasurements_getNrOfSensors (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsMeasurements *arg1 = (iDynTree::SensorsMeasurements *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("SensorsMeasurements_getNrOfSensors",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsMeasurements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsMeasurements_getNrOfSensors" "', argument " "1"" of type '" "iDynTree::SensorsMeasurements const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsMeasurements_getNrOfSensors" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  result = (unsigned int)((iDynTree::SensorsMeasurements const *)arg1)->getNrOfSensors((iDynTree::SensorType const &)*arg2);
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsMeasurements_setMeasurement__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsMeasurements *arg1 = (iDynTree::SensorsMeasurements *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  iDynTree::Wrench *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SensorsMeasurements_setMeasurement",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsMeasurements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsMeasurements_setMeasurement" "', argument " "1"" of type '" "iDynTree::SensorsMeasurements *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsMeasurements_setMeasurement" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SensorsMeasurements_setMeasurement" "', argument " "3"" of type '" "unsigned int""'");
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SensorsMeasurements_setMeasurement" "', argument " "4"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SensorsMeasurements_setMeasurement" "', argument " "4"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::Wrench * >(argp4);
  result = (bool)(arg1)->setMeasurement((iDynTree::SensorType const &)*arg2,(unsigned int const &)*arg3,(iDynTree::Wrench const &)*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsMeasurements_setMeasurement__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsMeasurements *arg1 = (iDynTree::SensorsMeasurements *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  iDynTree::LinAcceleration *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SensorsMeasurements_setMeasurement",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsMeasurements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsMeasurements_setMeasurement" "', argument " "1"" of type '" "iDynTree::SensorsMeasurements *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsMeasurements_setMeasurement" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SensorsMeasurements_setMeasurement" "', argument " "3"" of type '" "unsigned int""'");
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SensorsMeasurements_setMeasurement" "', argument " "4"" of type '" "iDynTree::LinAcceleration const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SensorsMeasurements_setMeasurement" "', argument " "4"" of type '" "iDynTree::LinAcceleration const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinAcceleration * >(argp4);
  result = (bool)(arg1)->setMeasurement((iDynTree::SensorType const &)*arg2,(unsigned int const &)*arg3,(iDynTree::LinAcceleration const &)*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsMeasurements_setMeasurement__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsMeasurements *arg1 = (iDynTree::SensorsMeasurements *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  iDynTree::AngVelocity *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SensorsMeasurements_setMeasurement",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsMeasurements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsMeasurements_setMeasurement" "', argument " "1"" of type '" "iDynTree::SensorsMeasurements *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsMeasurements_setMeasurement" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SensorsMeasurements_setMeasurement" "', argument " "3"" of type '" "unsigned int""'");
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SensorsMeasurements_setMeasurement" "', argument " "4"" of type '" "iDynTree::AngVelocity const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SensorsMeasurements_setMeasurement" "', argument " "4"" of type '" "iDynTree::AngVelocity const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::AngVelocity * >(argp4);
  result = (bool)(arg1)->setMeasurement((iDynTree::SensorType const &)*arg2,(unsigned int const &)*arg3,(iDynTree::AngVelocity const &)*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsMeasurements_setMeasurement (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SensorsMeasurements, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__Wrench, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SensorsMeasurements_setMeasurement__SWIG_0(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SensorsMeasurements, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__LinearMotionVector3, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SensorsMeasurements_setMeasurement__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SensorsMeasurements, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__AngularMotionVector3, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SensorsMeasurements_setMeasurement__SWIG_2(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'SensorsMeasurements_setMeasurement'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SensorsMeasurements::setMeasurement(iDynTree::SensorType const &,unsigned int const &,iDynTree::Wrench const &)\n"
    "    iDynTree::SensorsMeasurements::setMeasurement(iDynTree::SensorType const &,unsigned int const &,iDynTree::LinAcceleration const &)\n"
    "    iDynTree::SensorsMeasurements::setMeasurement(iDynTree::SensorType const &,unsigned int const &,iDynTree::AngVelocity const &)\n");
  return 1;
}


int _wrap_SensorsMeasurements_getMeasurement__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsMeasurements *arg1 = (iDynTree::SensorsMeasurements *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  iDynTree::Wrench *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SensorsMeasurements_getMeasurement",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsMeasurements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsMeasurements_getMeasurement" "', argument " "1"" of type '" "iDynTree::SensorsMeasurements const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsMeasurements_getMeasurement" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SensorsMeasurements_getMeasurement" "', argument " "3"" of type '" "unsigned int""'");
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SensorsMeasurements_getMeasurement" "', argument " "4"" of type '" "iDynTree::Wrench &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SensorsMeasurements_getMeasurement" "', argument " "4"" of type '" "iDynTree::Wrench &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::Wrench * >(argp4);
  result = (bool)((iDynTree::SensorsMeasurements const *)arg1)->getMeasurement((iDynTree::SensorType const &)*arg2,(unsigned int const &)*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsMeasurements_getMeasurement__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsMeasurements *arg1 = (iDynTree::SensorsMeasurements *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  iDynTree::LinAcceleration *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SensorsMeasurements_getMeasurement",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsMeasurements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsMeasurements_getMeasurement" "', argument " "1"" of type '" "iDynTree::SensorsMeasurements const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsMeasurements_getMeasurement" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SensorsMeasurements_getMeasurement" "', argument " "3"" of type '" "unsigned int""'");
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SensorsMeasurements_getMeasurement" "', argument " "4"" of type '" "iDynTree::LinAcceleration &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SensorsMeasurements_getMeasurement" "', argument " "4"" of type '" "iDynTree::LinAcceleration &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinAcceleration * >(argp4);
  result = (bool)((iDynTree::SensorsMeasurements const *)arg1)->getMeasurement((iDynTree::SensorType const &)*arg2,(unsigned int const &)*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsMeasurements_getMeasurement__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SensorsMeasurements *arg1 = (iDynTree::SensorsMeasurements *) 0 ;
  iDynTree::SensorType *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  iDynTree::AngVelocity *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  iDynTree::SensorType temp2 ;
  unsigned int temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SensorsMeasurements_getMeasurement",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SensorsMeasurements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SensorsMeasurements_getMeasurement" "', argument " "1"" of type '" "iDynTree::SensorsMeasurements const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SensorsMeasurements_getMeasurement" "', argument " "2"" of type '" "iDynTree::SensorType const &""'");
  } else {
    temp2 = static_cast< iDynTree::SensorType >(val2);
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SensorsMeasurements_getMeasurement" "', argument " "3"" of type '" "unsigned int""'");
  } 
  temp3 = static_cast< unsigned int >(val3);
  arg3 = &temp3;
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SensorsMeasurements_getMeasurement" "', argument " "4"" of type '" "iDynTree::AngVelocity &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SensorsMeasurements_getMeasurement" "', argument " "4"" of type '" "iDynTree::AngVelocity &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::AngVelocity * >(argp4);
  result = (bool)((iDynTree::SensorsMeasurements const *)arg1)->getMeasurement((iDynTree::SensorType const &)*arg2,(unsigned int const &)*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SensorsMeasurements_getMeasurement (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SensorsMeasurements, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__Wrench, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SensorsMeasurements_getMeasurement__SWIG_0(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SensorsMeasurements, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__LinearMotionVector3, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SensorsMeasurements_getMeasurement__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SensorsMeasurements, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__AngularMotionVector3, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SensorsMeasurements_getMeasurement__SWIG_2(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'SensorsMeasurements_getMeasurement'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SensorsMeasurements::getMeasurement(iDynTree::SensorType const &,unsigned int const &,iDynTree::Wrench &) const\n"
    "    iDynTree::SensorsMeasurements::getMeasurement(iDynTree::SensorType const &,unsigned int const &,iDynTree::LinAcceleration &) const\n"
    "    iDynTree::SensorsMeasurements::getMeasurement(iDynTree::SensorType const &,unsigned int const &,iDynTree::AngVelocity &) const\n");
  return 1;
}


int _wrap_new_SixAxisForceTorqueSensor__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SixAxisForceTorqueSensor *result = 0 ;
  
  if (!SWIG_check_num_args("new_SixAxisForceTorqueSensor",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::SixAxisForceTorqueSensor *)new iDynTree::SixAxisForceTorqueSensor();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SixAxisForceTorqueSensor__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SixAxisForceTorqueSensor *result = 0 ;
  
  if (!SWIG_check_num_args("new_SixAxisForceTorqueSensor",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SixAxisForceTorqueSensor" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SixAxisForceTorqueSensor" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  result = (iDynTree::SixAxisForceTorqueSensor *)new iDynTree::SixAxisForceTorqueSensor((iDynTree::SixAxisForceTorqueSensor const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SixAxisForceTorqueSensor (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_SixAxisForceTorqueSensor__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SixAxisForceTorqueSensor__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_SixAxisForceTorqueSensor'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::SixAxisForceTorqueSensor::SixAxisForceTorqueSensor()\n"
    "    iDynTree::SixAxisForceTorqueSensor::SixAxisForceTorqueSensor(iDynTree::SixAxisForceTorqueSensor const &)\n");
  return 1;
}


int _wrap_delete_SixAxisForceTorqueSensor (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_SixAxisForceTorqueSensor",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SixAxisForceTorqueSensor" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_setName (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_setName",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_setName" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SixAxisForceTorqueSensor_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SixAxisForceTorqueSensor_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setName((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_setFirstLinkSensorTransform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  int arg2 ;
  iDynTree::Transform *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_setFirstLinkSensorTransform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_setFirstLinkSensorTransform" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SixAxisForceTorqueSensor_setFirstLinkSensorTransform" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SixAxisForceTorqueSensor_setFirstLinkSensorTransform" "', argument " "3"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SixAxisForceTorqueSensor_setFirstLinkSensorTransform" "', argument " "3"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Transform * >(argp3);
  result = (bool)((iDynTree::SixAxisForceTorqueSensor const *)arg1)->setFirstLinkSensorTransform(arg2,(iDynTree::Transform const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_setSecondLinkSensorTransform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  int arg2 ;
  iDynTree::Transform *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_setSecondLinkSensorTransform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_setSecondLinkSensorTransform" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SixAxisForceTorqueSensor_setSecondLinkSensorTransform" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SixAxisForceTorqueSensor_setSecondLinkSensorTransform" "', argument " "3"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SixAxisForceTorqueSensor_setSecondLinkSensorTransform" "', argument " "3"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Transform * >(argp3);
  result = (bool)((iDynTree::SixAxisForceTorqueSensor const *)arg1)->setSecondLinkSensorTransform(arg2,(iDynTree::Transform const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_getFirstLinkIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_getFirstLinkIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_getFirstLinkIndex" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  result = (int)((iDynTree::SixAxisForceTorqueSensor const *)arg1)->getFirstLinkIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_getSecondLinkIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_getSecondLinkIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_getSecondLinkIndex" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  result = (int)((iDynTree::SixAxisForceTorqueSensor const *)arg1)->getSecondLinkIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_setFirstLinkName (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_setFirstLinkName",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_setFirstLinkName" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SixAxisForceTorqueSensor_setFirstLinkName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SixAxisForceTorqueSensor_setFirstLinkName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setFirstLinkName((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_setSecondLinkName (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_setSecondLinkName",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_setSecondLinkName" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SixAxisForceTorqueSensor_setSecondLinkName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SixAxisForceTorqueSensor_setSecondLinkName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setSecondLinkName((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_getFirstLinkName (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_getFirstLinkName",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_getFirstLinkName" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  result = ((iDynTree::SixAxisForceTorqueSensor const *)arg1)->getFirstLinkName();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_getSecondLinkName (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_getSecondLinkName",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_getSecondLinkName" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  result = ((iDynTree::SixAxisForceTorqueSensor const *)arg1)->getSecondLinkName();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_setParent (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_setParent",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_setParent" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SixAxisForceTorqueSensor_setParent" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SixAxisForceTorqueSensor_setParent" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setParent((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_setParentIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_setParentIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_setParentIndex" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SixAxisForceTorqueSensor_setParentIndex" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  result = (bool)(arg1)->setParentIndex((int const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_setAppliedWrenchLink (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_setAppliedWrenchLink",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_setAppliedWrenchLink" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SixAxisForceTorqueSensor_setAppliedWrenchLink" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)(arg1)->setAppliedWrenchLink(arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_getName (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_getName",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_getName" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  result = ((iDynTree::SixAxisForceTorqueSensor const *)arg1)->getName();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_getSensorType (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SensorType result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_getSensorType",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_getSensorType" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  result = (iDynTree::SensorType)((iDynTree::SixAxisForceTorqueSensor const *)arg1)->getSensorType();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_getParent (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_getParent",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_getParent" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  result = ((iDynTree::SixAxisForceTorqueSensor const *)arg1)->getParent();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_getParentIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_getParentIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_getParentIndex" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  result = (int)((iDynTree::SixAxisForceTorqueSensor const *)arg1)->getParentIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_isValid (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_isValid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_isValid" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  result = (bool)((iDynTree::SixAxisForceTorqueSensor const *)arg1)->isValid();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_clone (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Sensor *result = 0 ;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_clone",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_clone" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  result = (iDynTree::Sensor *)((iDynTree::SixAxisForceTorqueSensor const *)arg1)->clone();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Sensor, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_getAppliedWrenchLink (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_getAppliedWrenchLink",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_getAppliedWrenchLink" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  result = (int)((iDynTree::SixAxisForceTorqueSensor const *)arg1)->getAppliedWrenchLink();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_isLinkAttachedToSensor (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_isLinkAttachedToSensor",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_isLinkAttachedToSensor" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SixAxisForceTorqueSensor_isLinkAttachedToSensor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)((iDynTree::SixAxisForceTorqueSensor const *)arg1)->isLinkAttachedToSensor(arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_getLinkSensorTransform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  int arg2 ;
  iDynTree::Transform *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_getLinkSensorTransform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_getLinkSensorTransform" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SixAxisForceTorqueSensor_getLinkSensorTransform" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SixAxisForceTorqueSensor_getLinkSensorTransform" "', argument " "3"" of type '" "iDynTree::Transform &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SixAxisForceTorqueSensor_getLinkSensorTransform" "', argument " "3"" of type '" "iDynTree::Transform &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Transform * >(argp3);
  result = (bool)((iDynTree::SixAxisForceTorqueSensor const *)arg1)->getLinkSensorTransform(arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SixAxisForceTorqueSensor_getWrenchAppliedOnLink (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SixAxisForceTorqueSensor *arg1 = (iDynTree::SixAxisForceTorqueSensor *) 0 ;
  int arg2 ;
  iDynTree::Wrench *arg3 = 0 ;
  iDynTree::Wrench *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SixAxisForceTorqueSensor_getWrenchAppliedOnLink",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SixAxisForceTorqueSensor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SixAxisForceTorqueSensor_getWrenchAppliedOnLink" "', argument " "1"" of type '" "iDynTree::SixAxisForceTorqueSensor const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SixAxisForceTorqueSensor * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SixAxisForceTorqueSensor_getWrenchAppliedOnLink" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SixAxisForceTorqueSensor_getWrenchAppliedOnLink" "', argument " "3"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SixAxisForceTorqueSensor_getWrenchAppliedOnLink" "', argument " "3"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Wrench * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SixAxisForceTorqueSensor_getWrenchAppliedOnLink" "', argument " "4"" of type '" "iDynTree::Wrench &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SixAxisForceTorqueSensor_getWrenchAppliedOnLink" "', argument " "4"" of type '" "iDynTree::Wrench &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::Wrench * >(argp4);
  result = (bool)((iDynTree::SixAxisForceTorqueSensor const *)arg1)->getWrenchAppliedOnLink(arg2,(iDynTree::Wrench const &)*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Accelerometer__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Accelerometer *result = 0 ;
  
  if (!SWIG_check_num_args("new_Accelerometer",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::Accelerometer *)new iDynTree::Accelerometer();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Accelerometer, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Accelerometer__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Accelerometer *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Accelerometer *result = 0 ;
  
  if (!SWIG_check_num_args("new_Accelerometer",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Accelerometer,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Accelerometer" "', argument " "1"" of type '" "iDynTree::Accelerometer const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Accelerometer" "', argument " "1"" of type '" "iDynTree::Accelerometer const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Accelerometer * >(argp1);
  result = (iDynTree::Accelerometer *)new iDynTree::Accelerometer((iDynTree::Accelerometer const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Accelerometer, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Accelerometer (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Accelerometer__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Accelerometer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Accelerometer__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Accelerometer'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Accelerometer::Accelerometer()\n"
    "    iDynTree::Accelerometer::Accelerometer(iDynTree::Accelerometer const &)\n");
  return 1;
}


int _wrap_delete_Accelerometer (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Accelerometer *arg1 = (iDynTree::Accelerometer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Accelerometer",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Accelerometer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Accelerometer" "', argument " "1"" of type '" "iDynTree::Accelerometer *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Accelerometer * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Accelerometer_setName (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Accelerometer *arg1 = (iDynTree::Accelerometer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Accelerometer_setName",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Accelerometer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accelerometer_setName" "', argument " "1"" of type '" "iDynTree::Accelerometer *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Accelerometer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accelerometer_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accelerometer_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setName((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_Accelerometer_setLinkSensorTransform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Accelerometer *arg1 = (iDynTree::Accelerometer *) 0 ;
  iDynTree::Transform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Accelerometer_setLinkSensorTransform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Accelerometer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accelerometer_setLinkSensorTransform" "', argument " "1"" of type '" "iDynTree::Accelerometer const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Accelerometer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accelerometer_setLinkSensorTransform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accelerometer_setLinkSensorTransform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  result = (bool)((iDynTree::Accelerometer const *)arg1)->setLinkSensorTransform((iDynTree::Transform const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Accelerometer_getParentLinkIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Accelerometer *arg1 = (iDynTree::Accelerometer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("Accelerometer_getParentLinkIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Accelerometer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accelerometer_getParentLinkIndex" "', argument " "1"" of type '" "iDynTree::Accelerometer const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Accelerometer * >(argp1);
  result = (int)((iDynTree::Accelerometer const *)arg1)->getParentLinkIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Accelerometer_setParentLinkName (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Accelerometer *arg1 = (iDynTree::Accelerometer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Accelerometer_setParentLinkName",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Accelerometer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accelerometer_setParentLinkName" "', argument " "1"" of type '" "iDynTree::Accelerometer *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Accelerometer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accelerometer_setParentLinkName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accelerometer_setParentLinkName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setParentLinkName((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_Accelerometer_getParentLinkName (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Accelerometer *arg1 = (iDynTree::Accelerometer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Accelerometer_getParentLinkName",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Accelerometer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accelerometer_getParentLinkName" "', argument " "1"" of type '" "iDynTree::Accelerometer const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Accelerometer * >(argp1);
  result = ((iDynTree::Accelerometer const *)arg1)->getParentLinkName();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Accelerometer_setParent (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Accelerometer *arg1 = (iDynTree::Accelerometer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Accelerometer_setParent",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Accelerometer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accelerometer_setParent" "', argument " "1"" of type '" "iDynTree::Accelerometer *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Accelerometer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accelerometer_setParent" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accelerometer_setParent" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setParent((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_Accelerometer_setParentIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Accelerometer *arg1 = (iDynTree::Accelerometer *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Accelerometer_setParentIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Accelerometer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accelerometer_setParentIndex" "', argument " "1"" of type '" "iDynTree::Accelerometer *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Accelerometer * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Accelerometer_setParentIndex" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  result = (bool)(arg1)->setParentIndex((int const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Accelerometer_getLinkIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Accelerometer *arg1 = (iDynTree::Accelerometer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("Accelerometer_getLinkIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Accelerometer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accelerometer_getLinkIndex" "', argument " "1"" of type '" "iDynTree::Accelerometer const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Accelerometer * >(argp1);
  result = (int)((iDynTree::Accelerometer const *)arg1)->getLinkIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Accelerometer_getName (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Accelerometer *arg1 = (iDynTree::Accelerometer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Accelerometer_getName",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Accelerometer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accelerometer_getName" "', argument " "1"" of type '" "iDynTree::Accelerometer const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Accelerometer * >(argp1);
  result = ((iDynTree::Accelerometer const *)arg1)->getName();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Accelerometer_getSensorType (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Accelerometer *arg1 = (iDynTree::Accelerometer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SensorType result;
  
  if (!SWIG_check_num_args("Accelerometer_getSensorType",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Accelerometer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accelerometer_getSensorType" "', argument " "1"" of type '" "iDynTree::Accelerometer const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Accelerometer * >(argp1);
  result = (iDynTree::SensorType)((iDynTree::Accelerometer const *)arg1)->getSensorType();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Accelerometer_getParent (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Accelerometer *arg1 = (iDynTree::Accelerometer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Accelerometer_getParent",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Accelerometer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accelerometer_getParent" "', argument " "1"" of type '" "iDynTree::Accelerometer const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Accelerometer * >(argp1);
  result = ((iDynTree::Accelerometer const *)arg1)->getParent();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Accelerometer_getParentIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Accelerometer *arg1 = (iDynTree::Accelerometer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("Accelerometer_getParentIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Accelerometer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accelerometer_getParentIndex" "', argument " "1"" of type '" "iDynTree::Accelerometer const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Accelerometer * >(argp1);
  result = (int)((iDynTree::Accelerometer const *)arg1)->getParentIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Accelerometer_isValid (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Accelerometer *arg1 = (iDynTree::Accelerometer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Accelerometer_isValid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Accelerometer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accelerometer_isValid" "', argument " "1"" of type '" "iDynTree::Accelerometer const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Accelerometer * >(argp1);
  result = (bool)((iDynTree::Accelerometer const *)arg1)->isValid();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Accelerometer_clone (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Accelerometer *arg1 = (iDynTree::Accelerometer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Sensor *result = 0 ;
  
  if (!SWIG_check_num_args("Accelerometer_clone",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Accelerometer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accelerometer_clone" "', argument " "1"" of type '" "iDynTree::Accelerometer const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Accelerometer * >(argp1);
  result = (iDynTree::Sensor *)((iDynTree::Accelerometer const *)arg1)->clone();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Sensor, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Accelerometer_getLinkSensorTransform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Accelerometer *arg1 = (iDynTree::Accelerometer *) 0 ;
  iDynTree::Transform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Accelerometer_getLinkSensorTransform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Accelerometer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accelerometer_getLinkSensorTransform" "', argument " "1"" of type '" "iDynTree::Accelerometer const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Accelerometer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accelerometer_getLinkSensorTransform" "', argument " "2"" of type '" "iDynTree::Transform &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accelerometer_getLinkSensorTransform" "', argument " "2"" of type '" "iDynTree::Transform &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  result = (bool)((iDynTree::Accelerometer const *)arg1)->getLinkSensorTransform(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Accelerometer_predictMeasurement (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Accelerometer *arg1 = (iDynTree::Accelerometer *) 0 ;
  iDynTree::SpatialAcc *arg2 = 0 ;
  iDynTree::Twist *arg3 = 0 ;
  iDynTree::LinAcceleration *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Accelerometer_predictMeasurement",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Accelerometer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Accelerometer_predictMeasurement" "', argument " "1"" of type '" "iDynTree::Accelerometer *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Accelerometer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Accelerometer_predictMeasurement" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accelerometer_predictMeasurement" "', argument " "2"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialAcc * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Accelerometer_predictMeasurement" "', argument " "3"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accelerometer_predictMeasurement" "', argument " "3"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Twist * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Accelerometer_predictMeasurement" "', argument " "4"" of type '" "iDynTree::LinAcceleration &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Accelerometer_predictMeasurement" "', argument " "4"" of type '" "iDynTree::LinAcceleration &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::LinAcceleration * >(argp4);
  result = (bool)(arg1)->predictMeasurement((iDynTree::SpatialAcc const &)*arg2,(iDynTree::Twist const &)*arg3,*arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Gyroscope__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Gyroscope *result = 0 ;
  
  if (!SWIG_check_num_args("new_Gyroscope",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::Gyroscope *)new iDynTree::Gyroscope();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Gyroscope, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Gyroscope__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Gyroscope *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Gyroscope *result = 0 ;
  
  if (!SWIG_check_num_args("new_Gyroscope",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Gyroscope,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Gyroscope" "', argument " "1"" of type '" "iDynTree::Gyroscope const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Gyroscope" "', argument " "1"" of type '" "iDynTree::Gyroscope const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Gyroscope * >(argp1);
  result = (iDynTree::Gyroscope *)new iDynTree::Gyroscope((iDynTree::Gyroscope const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Gyroscope, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Gyroscope (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Gyroscope__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Gyroscope, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Gyroscope__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'new_Gyroscope'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Gyroscope::Gyroscope()\n"
    "    iDynTree::Gyroscope::Gyroscope(iDynTree::Gyroscope const &)\n");
  return 1;
}


int _wrap_delete_Gyroscope (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Gyroscope *arg1 = (iDynTree::Gyroscope *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_Gyroscope",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Gyroscope, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Gyroscope" "', argument " "1"" of type '" "iDynTree::Gyroscope *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Gyroscope * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Gyroscope_setName (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Gyroscope *arg1 = (iDynTree::Gyroscope *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Gyroscope_setName",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Gyroscope, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gyroscope_setName" "', argument " "1"" of type '" "iDynTree::Gyroscope *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Gyroscope * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Gyroscope_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Gyroscope_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setName((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_Gyroscope_setLinkSensorTransform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Gyroscope *arg1 = (iDynTree::Gyroscope *) 0 ;
  iDynTree::Transform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Gyroscope_setLinkSensorTransform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Gyroscope, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gyroscope_setLinkSensorTransform" "', argument " "1"" of type '" "iDynTree::Gyroscope const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Gyroscope * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Gyroscope_setLinkSensorTransform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Gyroscope_setLinkSensorTransform" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  result = (bool)((iDynTree::Gyroscope const *)arg1)->setLinkSensorTransform((iDynTree::Transform const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Gyroscope_setParent (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Gyroscope *arg1 = (iDynTree::Gyroscope *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Gyroscope_setParent",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Gyroscope, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gyroscope_setParent" "', argument " "1"" of type '" "iDynTree::Gyroscope *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Gyroscope * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Gyroscope_setParent" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Gyroscope_setParent" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setParent((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_Gyroscope_setParentIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Gyroscope *arg1 = (iDynTree::Gyroscope *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Gyroscope_setParentIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Gyroscope, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gyroscope_setParentIndex" "', argument " "1"" of type '" "iDynTree::Gyroscope *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Gyroscope * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Gyroscope_setParentIndex" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  result = (bool)(arg1)->setParentIndex((int const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Gyroscope_getName (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Gyroscope *arg1 = (iDynTree::Gyroscope *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Gyroscope_getName",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Gyroscope, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gyroscope_getName" "', argument " "1"" of type '" "iDynTree::Gyroscope const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Gyroscope * >(argp1);
  result = ((iDynTree::Gyroscope const *)arg1)->getName();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Gyroscope_getSensorType (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Gyroscope *arg1 = (iDynTree::Gyroscope *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SensorType result;
  
  if (!SWIG_check_num_args("Gyroscope_getSensorType",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Gyroscope, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gyroscope_getSensorType" "', argument " "1"" of type '" "iDynTree::Gyroscope const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Gyroscope * >(argp1);
  result = (iDynTree::SensorType)((iDynTree::Gyroscope const *)arg1)->getSensorType();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Gyroscope_getParent (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Gyroscope *arg1 = (iDynTree::Gyroscope *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Gyroscope_getParent",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Gyroscope, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gyroscope_getParent" "', argument " "1"" of type '" "iDynTree::Gyroscope const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Gyroscope * >(argp1);
  result = ((iDynTree::Gyroscope const *)arg1)->getParent();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Gyroscope_getParentIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Gyroscope *arg1 = (iDynTree::Gyroscope *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("Gyroscope_getParentIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Gyroscope, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gyroscope_getParentIndex" "', argument " "1"" of type '" "iDynTree::Gyroscope const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Gyroscope * >(argp1);
  result = (int)((iDynTree::Gyroscope const *)arg1)->getParentIndex();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Gyroscope_isValid (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Gyroscope *arg1 = (iDynTree::Gyroscope *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Gyroscope_isValid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Gyroscope, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gyroscope_isValid" "', argument " "1"" of type '" "iDynTree::Gyroscope const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Gyroscope * >(argp1);
  result = (bool)((iDynTree::Gyroscope const *)arg1)->isValid();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Gyroscope_clone (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Gyroscope *arg1 = (iDynTree::Gyroscope *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Sensor *result = 0 ;
  
  if (!SWIG_check_num_args("Gyroscope_clone",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Gyroscope, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gyroscope_clone" "', argument " "1"" of type '" "iDynTree::Gyroscope const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Gyroscope * >(argp1);
  result = (iDynTree::Sensor *)((iDynTree::Gyroscope const *)arg1)->clone();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Sensor, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Gyroscope_getLinkSensorTransform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Gyroscope *arg1 = (iDynTree::Gyroscope *) 0 ;
  iDynTree::Transform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Gyroscope_getLinkSensorTransform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Gyroscope, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gyroscope_getLinkSensorTransform" "', argument " "1"" of type '" "iDynTree::Gyroscope const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Gyroscope * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Gyroscope_getLinkSensorTransform" "', argument " "2"" of type '" "iDynTree::Transform &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Gyroscope_getLinkSensorTransform" "', argument " "2"" of type '" "iDynTree::Transform &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  result = (bool)((iDynTree::Gyroscope const *)arg1)->getLinkSensorTransform(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Gyroscope_predictMeasurement (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Gyroscope *arg1 = (iDynTree::Gyroscope *) 0 ;
  iDynTree::Twist *arg2 = 0 ;
  iDynTree::AngVelocity *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Gyroscope_predictMeasurement",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Gyroscope, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gyroscope_predictMeasurement" "', argument " "1"" of type '" "iDynTree::Gyroscope *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Gyroscope * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Gyroscope_predictMeasurement" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Gyroscope_predictMeasurement" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Twist * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__AngularMotionVector3,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Gyroscope_predictMeasurement" "', argument " "3"" of type '" "iDynTree::AngVelocity &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Gyroscope_predictMeasurement" "', argument " "3"" of type '" "iDynTree::AngVelocity &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::AngVelocity * >(argp3);
  result = (bool)(arg1)->predictMeasurement((iDynTree::Twist const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_PredictSensorsMeasurements (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::PredictSensorsMeasurements *result = 0 ;
  
  if (!SWIG_check_num_args("new_PredictSensorsMeasurements",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::PredictSensorsMeasurements *)new iDynTree::PredictSensorsMeasurements();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PredictSensorsMeasurements, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PredictSensorsMeasurements_makePrediction__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PredictSensorsMeasurements *arg1 = (iDynTree::PredictSensorsMeasurements *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  iDynTree::Traversal *arg3 = 0 ;
  iDynTree::FreeFloatingPos *arg4 = 0 ;
  iDynTree::FreeFloatingVel *arg5 = 0 ;
  iDynTree::FreeFloatingAcc *arg6 = 0 ;
  iDynTree::LinAcceleration *arg7 = 0 ;
  iDynTree::SensorsList *arg8 = 0 ;
  iDynTree::SensorsMeasurements *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("PredictSensorsMeasurements_makePrediction",argc,9,9,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PredictSensorsMeasurements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "1"" of type '" "iDynTree::PredictSensorsMeasurements *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PredictSensorsMeasurements * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Traversal,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "3"" of type '" "iDynTree::Traversal const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "3"" of type '" "iDynTree::Traversal const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Traversal * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__FreeFloatingPos,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "4"" of type '" "iDynTree::FreeFloatingPos const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "4"" of type '" "iDynTree::FreeFloatingPos const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::FreeFloatingPos * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__FreeFloatingVel,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "5"" of type '" "iDynTree::FreeFloatingVel const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "5"" of type '" "iDynTree::FreeFloatingVel const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::FreeFloatingVel * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__FreeFloatingAcc,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "6"" of type '" "iDynTree::FreeFloatingAcc &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "6"" of type '" "iDynTree::FreeFloatingAcc &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::FreeFloatingAcc * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "7"" of type '" "iDynTree::LinAcceleration const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "7"" of type '" "iDynTree::LinAcceleration const &""'"); 
  }
  arg7 = reinterpret_cast< iDynTree::LinAcceleration * >(argp7);
  res8 = SWIG_ConvertPtr(argv[7], &argp8, SWIGTYPE_p_iDynTree__SensorsList,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "8"" of type '" "iDynTree::SensorsList const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "8"" of type '" "iDynTree::SensorsList const &""'"); 
  }
  arg8 = reinterpret_cast< iDynTree::SensorsList * >(argp8);
  res9 = SWIG_ConvertPtr(argv[8], &argp9, SWIGTYPE_p_iDynTree__SensorsMeasurements,  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "9"" of type '" "iDynTree::SensorsMeasurements &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "9"" of type '" "iDynTree::SensorsMeasurements &""'"); 
  }
  arg9 = reinterpret_cast< iDynTree::SensorsMeasurements * >(argp9);
  result = (bool)(arg1)->makePrediction((iDynTree::Model const &)*arg2,(iDynTree::Traversal const &)*arg3,(iDynTree::FreeFloatingPos const &)*arg4,(iDynTree::FreeFloatingVel const &)*arg5,*arg6,(iDynTree::LinAcceleration const &)*arg7,(iDynTree::SensorsList const &)*arg8,*arg9);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PredictSensorsMeasurements_makePrediction__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PredictSensorsMeasurements *arg1 = (iDynTree::PredictSensorsMeasurements *) 0 ;
  iDynTree::Model *arg2 = 0 ;
  iDynTree::Traversal *arg3 = 0 ;
  iDynTree::FreeFloatingPos *arg4 = 0 ;
  iDynTree::FreeFloatingVel *arg5 = 0 ;
  iDynTree::FreeFloatingAcc *arg6 = 0 ;
  iDynTree::LinAcceleration *arg7 = 0 ;
  iDynTree::SensorsList *arg8 = 0 ;
  iDynTree::VectorDynSize *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("PredictSensorsMeasurements_makePrediction",argc,9,9,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PredictSensorsMeasurements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "1"" of type '" "iDynTree::PredictSensorsMeasurements *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PredictSensorsMeasurements * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "2"" of type '" "iDynTree::Model const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Model * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Traversal,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "3"" of type '" "iDynTree::Traversal const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "3"" of type '" "iDynTree::Traversal const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Traversal * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__FreeFloatingPos,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "4"" of type '" "iDynTree::FreeFloatingPos const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "4"" of type '" "iDynTree::FreeFloatingPos const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::FreeFloatingPos * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__FreeFloatingVel,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "5"" of type '" "iDynTree::FreeFloatingVel const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "5"" of type '" "iDynTree::FreeFloatingVel const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::FreeFloatingVel * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__FreeFloatingAcc,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "6"" of type '" "iDynTree::FreeFloatingAcc &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "6"" of type '" "iDynTree::FreeFloatingAcc &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::FreeFloatingAcc * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_iDynTree__LinearMotionVector3,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "7"" of type '" "iDynTree::LinAcceleration const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "7"" of type '" "iDynTree::LinAcceleration const &""'"); 
  }
  arg7 = reinterpret_cast< iDynTree::LinAcceleration * >(argp7);
  res8 = SWIG_ConvertPtr(argv[7], &argp8, SWIGTYPE_p_iDynTree__SensorsList,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "8"" of type '" "iDynTree::SensorsList const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "8"" of type '" "iDynTree::SensorsList const &""'"); 
  }
  arg8 = reinterpret_cast< iDynTree::SensorsList * >(argp8);
  res9 = SWIG_ConvertPtr(argv[8], &argp9, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "9"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PredictSensorsMeasurements_makePrediction" "', argument " "9"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg9 = reinterpret_cast< iDynTree::VectorDynSize * >(argp9);
  result = (bool)(arg1)->makePrediction((iDynTree::Model const &)*arg2,(iDynTree::Traversal const &)*arg3,(iDynTree::FreeFloatingPos const &)*arg4,(iDynTree::FreeFloatingVel const &)*arg5,*arg6,(iDynTree::LinAcceleration const &)*arg7,(iDynTree::SensorsList const &)*arg8,*arg9);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PredictSensorsMeasurements_makePrediction (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__PredictSensorsMeasurements, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__Traversal, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__FreeFloatingPos, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_iDynTree__FreeFloatingVel, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_iDynTree__FreeFloatingAcc, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_iDynTree__LinearMotionVector3, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_iDynTree__SensorsList, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_iDynTree__SensorsMeasurements, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_PredictSensorsMeasurements_makePrediction__SWIG_0(resc,resv,argc,argv);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__PredictSensorsMeasurements, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Model, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__Traversal, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__FreeFloatingPos, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_iDynTree__FreeFloatingVel, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_iDynTree__FreeFloatingAcc, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_iDynTree__LinearMotionVector3, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_iDynTree__SensorsList, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_PredictSensorsMeasurements_makePrediction__SWIG_1(resc,resv,argc,argv);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'PredictSensorsMeasurements_makePrediction'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::PredictSensorsMeasurements::makePrediction(iDynTree::Model const &,iDynTree::Traversal const &,iDynTree::FreeFloatingPos const &,iDynTree::FreeFloatingVel const &,iDynTree::FreeFloatingAcc &,iDynTree::LinAcceleration const &,iDynTree::SensorsList const &,iDynTree::SensorsMeasurements &)\n"
    "    iDynTree::PredictSensorsMeasurements::makePrediction(iDynTree::Model const &,iDynTree::Traversal const &,iDynTree::FreeFloatingPos const &,iDynTree::FreeFloatingVel const &,iDynTree::FreeFloatingAcc &,iDynTree::LinAcceleration const &,iDynTree::SensorsList const &,iDynTree::VectorDynSize &)\n");
  return 1;
}


int _wrap_delete_PredictSensorsMeasurements (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PredictSensorsMeasurements *arg1 = (iDynTree::PredictSensorsMeasurements *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_PredictSensorsMeasurements",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PredictSensorsMeasurements, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PredictSensorsMeasurements" "', argument " "1"" of type '" "iDynTree::PredictSensorsMeasurements *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PredictSensorsMeasurements * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_sensorsListFromURDF (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  iDynTree::SensorsList *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("sensorsListFromURDF",argc,2,2,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sensorsListFromURDF" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sensorsListFromURDF" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SensorsList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sensorsListFromURDF" "', argument " "2"" of type '" "iDynTree::SensorsList &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sensorsListFromURDF" "', argument " "2"" of type '" "iDynTree::SensorsList &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SensorsList * >(argp2);
  result = (bool)iDynTree::sensorsListFromURDF((std::string const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_sensorsListFromURDFString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  iDynTree::SensorsList *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("sensorsListFromURDFString",argc,2,2,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sensorsListFromURDFString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sensorsListFromURDFString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SensorsList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sensorsListFromURDFString" "', argument " "2"" of type '" "iDynTree::SensorsList &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sensorsListFromURDFString" "', argument " "2"" of type '" "iDynTree::SensorsList &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SensorsList * >(argp2);
  result = (bool)iDynTree::sensorsListFromURDFString((std::string const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_DynamicsRegressorParameter_category_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParameter *arg1 = (iDynTree::Regressors::DynamicsRegressorParameter *) 0 ;
  iDynTree::Regressors::DynamicsRegressorParameterCategory arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("DynamicsRegressorParameter_category_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParameter_category_set" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsRegressorParameter_category_set" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParameterCategory""'");
  } 
  arg2 = static_cast< iDynTree::Regressors::DynamicsRegressorParameterCategory >(val2);
  if (arg1) (arg1)->category = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParameter_category_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParameter *arg1 = (iDynTree::Regressors::DynamicsRegressorParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Regressors::DynamicsRegressorParameterCategory result;
  
  if (!SWIG_check_num_args("DynamicsRegressorParameter_category_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParameter_category_get" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp1);
  result = (iDynTree::Regressors::DynamicsRegressorParameterCategory) ((arg1)->category);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParameter_elemIndex_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParameter *arg1 = (iDynTree::Regressors::DynamicsRegressorParameter *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("DynamicsRegressorParameter_elemIndex_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParameter_elemIndex_set" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsRegressorParameter_elemIndex_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->elemIndex = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParameter_elemIndex_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParameter *arg1 = (iDynTree::Regressors::DynamicsRegressorParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("DynamicsRegressorParameter_elemIndex_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParameter_elemIndex_get" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp1);
  result = (int) ((arg1)->elemIndex);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParameter_type_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParameter *arg1 = (iDynTree::Regressors::DynamicsRegressorParameter *) 0 ;
  iDynTree::Regressors::DynamicsRegressorParameterType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("DynamicsRegressorParameter_type_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParameter_type_set" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsRegressorParameter_type_set" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParameterType""'");
  } 
  arg2 = static_cast< iDynTree::Regressors::DynamicsRegressorParameterType >(val2);
  if (arg1) (arg1)->type = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParameter_type_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParameter *arg1 = (iDynTree::Regressors::DynamicsRegressorParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Regressors::DynamicsRegressorParameterType result;
  
  if (!SWIG_check_num_args("DynamicsRegressorParameter_type_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParameter_type_get" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp1);
  result = (iDynTree::Regressors::DynamicsRegressorParameterType) ((arg1)->type);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParameter_lt (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParameter *arg1 = (iDynTree::Regressors::DynamicsRegressorParameter *) 0 ;
  iDynTree::Regressors::DynamicsRegressorParameter *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorParameter_lt",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParameter_lt" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorParameter_lt" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorParameter_lt" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp2);
  result = (bool)((iDynTree::Regressors::DynamicsRegressorParameter const *)arg1)->operator <((iDynTree::Regressors::DynamicsRegressorParameter const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParameter_eq (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParameter *arg1 = (iDynTree::Regressors::DynamicsRegressorParameter *) 0 ;
  iDynTree::Regressors::DynamicsRegressorParameter *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorParameter_eq",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParameter_eq" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorParameter_eq" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorParameter_eq" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp2);
  result = (bool)((iDynTree::Regressors::DynamicsRegressorParameter const *)arg1)->operator ==((iDynTree::Regressors::DynamicsRegressorParameter const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParameter_ne (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParameter *arg1 = (iDynTree::Regressors::DynamicsRegressorParameter *) 0 ;
  iDynTree::Regressors::DynamicsRegressorParameter *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorParameter_ne",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParameter_ne" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorParameter_ne" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorParameter_ne" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp2);
  result = (bool)((iDynTree::Regressors::DynamicsRegressorParameter const *)arg1)->operator !=((iDynTree::Regressors::DynamicsRegressorParameter const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_DynamicsRegressorParameter (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Regressors::DynamicsRegressorParameter *result = 0 ;
  
  if (!SWIG_check_num_args("new_DynamicsRegressorParameter",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::Regressors::DynamicsRegressorParameter *)new iDynTree::Regressors::DynamicsRegressorParameter();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_DynamicsRegressorParameter (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParameter *arg1 = (iDynTree::Regressors::DynamicsRegressorParameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_DynamicsRegressorParameter",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DynamicsRegressorParameter" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParametersList_parameters_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParametersList *arg1 = (iDynTree::Regressors::DynamicsRegressorParametersList *) 0 ;
  std::vector< iDynTree::Regressors::DynamicsRegressorParameter > *arg2 = (std::vector< iDynTree::Regressors::DynamicsRegressorParameter > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("DynamicsRegressorParametersList_parameters_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParametersList_parameters_set" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParametersList *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParametersList * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_iDynTree__Regressors__DynamicsRegressorParameter_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorParametersList_parameters_set" "', argument " "2"" of type '" "std::vector< iDynTree::Regressors::DynamicsRegressorParameter > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< iDynTree::Regressors::DynamicsRegressorParameter > * >(argp2);
  if (arg1) (arg1)->parameters = *arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParametersList_parameters_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParametersList *arg1 = (iDynTree::Regressors::DynamicsRegressorParametersList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< iDynTree::Regressors::DynamicsRegressorParameter > *result = 0 ;
  
  if (!SWIG_check_num_args("DynamicsRegressorParametersList_parameters_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParametersList_parameters_get" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParametersList *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParametersList * >(argp1);
  result = (std::vector< iDynTree::Regressors::DynamicsRegressorParameter > *)& ((arg1)->parameters);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_iDynTree__Regressors__DynamicsRegressorParameter_t, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParametersList_getDescriptionOfParameter__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParametersList *arg1 = (iDynTree::Regressors::DynamicsRegressorParametersList *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsRegressorParametersList_getDescriptionOfParameter",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParametersList_getDescriptionOfParameter" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParametersList const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParametersList * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsRegressorParametersList_getDescriptionOfParameter" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = ((iDynTree::Regressors::DynamicsRegressorParametersList const *)arg1)->getDescriptionOfParameter(arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParametersList_getDescriptionOfParameter__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParametersList *arg1 = (iDynTree::Regressors::DynamicsRegressorParametersList *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsRegressorParametersList_getDescriptionOfParameter",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParametersList_getDescriptionOfParameter" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParametersList const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParametersList * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsRegressorParametersList_getDescriptionOfParameter" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "DynamicsRegressorParametersList_getDescriptionOfParameter" "', argument " "3"" of type '" "std::string const""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = ((iDynTree::Regressors::DynamicsRegressorParametersList const *)arg1)->getDescriptionOfParameter(arg2,arg3);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParametersList_getDescriptionOfParameter (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DynamicsRegressorParametersList_getDescriptionOfParameter__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DynamicsRegressorParametersList_getDescriptionOfParameter__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsRegressorParametersList_getDescriptionOfParameter'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Regressors::DynamicsRegressorParametersList::getDescriptionOfParameter(unsigned int) const\n"
    "    iDynTree::Regressors::DynamicsRegressorParametersList::getDescriptionOfParameter(unsigned int,std::string const) const\n");
  return 1;
}


int _wrap_DynamicsRegressorParametersList_addParam (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParametersList *arg1 = (iDynTree::Regressors::DynamicsRegressorParametersList *) 0 ;
  iDynTree::Regressors::DynamicsRegressorParameter *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorParametersList_addParam",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParametersList_addParam" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParametersList *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParametersList * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorParametersList_addParam" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorParametersList_addParam" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp2);
  result = (bool)(arg1)->addParam((iDynTree::Regressors::DynamicsRegressorParameter const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParametersList_addList (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParametersList *arg1 = (iDynTree::Regressors::DynamicsRegressorParametersList *) 0 ;
  iDynTree::Regressors::DynamicsRegressorParametersList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorParametersList_addList",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParametersList_addList" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParametersList *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParametersList * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorParametersList_addList" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParametersList const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorParametersList_addList" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParametersList const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParametersList * >(argp2);
  result = (bool)(arg1)->addList((iDynTree::Regressors::DynamicsRegressorParametersList const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParametersList_findParam (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParametersList *arg1 = (iDynTree::Regressors::DynamicsRegressorParametersList *) 0 ;
  iDynTree::Regressors::DynamicsRegressorParameter *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorParametersList_findParam",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParametersList_findParam" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParametersList const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParametersList * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParameter,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorParametersList_findParam" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorParametersList_findParam" "', argument " "2"" of type '" "iDynTree::Regressors::DynamicsRegressorParameter const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParameter * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsRegressorParametersList_findParam" "', argument " "3"" of type '" "unsigned int &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorParametersList_findParam" "', argument " "3"" of type '" "unsigned int &""'"); 
  }
  arg3 = reinterpret_cast< unsigned int * >(argp3);
  result = (bool)((iDynTree::Regressors::DynamicsRegressorParametersList const *)arg1)->findParam((iDynTree::Regressors::DynamicsRegressorParameter const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorParametersList_getNrOfParameters (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParametersList *arg1 = (iDynTree::Regressors::DynamicsRegressorParametersList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("DynamicsRegressorParametersList_getNrOfParameters",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorParametersList_getNrOfParameters" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParametersList const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParametersList * >(argp1);
  result = (unsigned int)((iDynTree::Regressors::DynamicsRegressorParametersList const *)arg1)->getNrOfParameters();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_DynamicsRegressorParametersList (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Regressors::DynamicsRegressorParametersList *result = 0 ;
  
  if (!SWIG_check_num_args("new_DynamicsRegressorParametersList",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::Regressors::DynamicsRegressorParametersList *)new iDynTree::Regressors::DynamicsRegressorParametersList();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_DynamicsRegressorParametersList (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorParametersList *arg1 = (iDynTree::Regressors::DynamicsRegressorParametersList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_DynamicsRegressorParametersList",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorParametersList, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DynamicsRegressorParametersList" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorParametersList *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorParametersList * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_DynamicsRegressorGenerator (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Regressors::DynamicsRegressorGenerator *result = 0 ;
  
  if (!SWIG_check_num_args("new_DynamicsRegressorGenerator",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::Regressors::DynamicsRegressorGenerator *)new iDynTree::Regressors::DynamicsRegressorGenerator();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_DynamicsRegressorGenerator (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_DynamicsRegressorGenerator",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DynamicsRegressorGenerator" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)(arg1)->loadRobotAndSensorsModelFromFile((std::string const &)*arg2,(std::string const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadRobotAndSensorsModelFromFile((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::loadRobotAndSensorsModelFromFile(std::string const &,std::string const &)\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::loadRobotAndSensorsModelFromFile(std::string const &)\n");
  return 1;
}


int _wrap_DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)(arg1)->loadRobotAndSensorsModelFromString((std::string const &)*arg2,(std::string const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadRobotAndSensorsModelFromString((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::loadRobotAndSensorsModelFromString(std::string const &,std::string const &)\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::loadRobotAndSensorsModelFromString(std::string const &)\n");
  return 1;
}


int _wrap_DynamicsRegressorGenerator_loadRegressorStructureFromFile (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_loadRegressorStructureFromFile",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_loadRegressorStructureFromFile" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_loadRegressorStructureFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_loadRegressorStructureFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadRegressorStructureFromFile((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsRegressorGenerator_loadRegressorStructureFromString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_loadRegressorStructureFromString",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_loadRegressorStructureFromString" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_loadRegressorStructureFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_loadRegressorStructureFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadRegressorStructureFromString((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsRegressorGenerator_isValid (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_isValid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_isValid" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  result = (bool)(arg1)->isValid();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getNrOfParameters (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getNrOfParameters",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getNrOfParameters" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  result = (unsigned int)((iDynTree::Regressors::DynamicsRegressorGenerator const *)arg1)->getNrOfParameters();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getNrOfOutputs (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getNrOfOutputs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getNrOfOutputs" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  result = (unsigned int)((iDynTree::Regressors::DynamicsRegressorGenerator const *)arg1)->getNrOfOutputs();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getNrOfDegreesOfFreedom (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getNrOfDegreesOfFreedom",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getNrOfDegreesOfFreedom" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  result = (unsigned int)((iDynTree::Regressors::DynamicsRegressorGenerator const *)arg1)->getNrOfDegreesOfFreedom();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getDescriptionOfParameter__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  int arg2 ;
  bool arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getDescriptionOfParameter",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getDescriptionOfParameter" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsRegressorGenerator_getDescriptionOfParameter" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DynamicsRegressorGenerator_getDescriptionOfParameter" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DynamicsRegressorGenerator_getDescriptionOfParameter" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (arg1)->getDescriptionOfParameter(arg2,arg3,arg4);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getDescriptionOfParameter__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getDescriptionOfParameter",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getDescriptionOfParameter" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsRegressorGenerator_getDescriptionOfParameter" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DynamicsRegressorGenerator_getDescriptionOfParameter" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (arg1)->getDescriptionOfParameter(arg2,arg3);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getDescriptionOfParameter__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getDescriptionOfParameter",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getDescriptionOfParameter" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsRegressorGenerator_getDescriptionOfParameter" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->getDescriptionOfParameter(arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getDescriptionOfParameter (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DynamicsRegressorGenerator_getDescriptionOfParameter__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DynamicsRegressorGenerator_getDescriptionOfParameter__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DynamicsRegressorGenerator_getDescriptionOfParameter__SWIG_0(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsRegressorGenerator_getDescriptionOfParameter'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::getDescriptionOfParameter(int,bool,double)\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::getDescriptionOfParameter(int,bool)\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::getDescriptionOfParameter(int)\n");
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getDescriptionOfParameters__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getDescriptionOfParameters",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getDescriptionOfParameters" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  result = (arg1)->getDescriptionOfParameters();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getDescriptionOfParameters__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getDescriptionOfParameters",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getDescriptionOfParameters" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_getDescriptionOfParameters" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_getDescriptionOfParameters" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  result = (arg1)->getDescriptionOfParameters((iDynTree::VectorDynSize const &)*arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getDescriptionOfParameters (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DynamicsRegressorGenerator_getDescriptionOfParameters__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicsRegressorGenerator_getDescriptionOfParameters__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsRegressorGenerator_getDescriptionOfParameters'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::getDescriptionOfParameters()\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::getDescriptionOfParameters(iDynTree::VectorDynSize const &)\n");
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getDescriptionOfOutput (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getDescriptionOfOutput",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getDescriptionOfOutput" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsRegressorGenerator_getDescriptionOfOutput" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->getDescriptionOfOutput(arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getDescriptionOfOutputs (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getDescriptionOfOutputs",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getDescriptionOfOutputs" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  result = (arg1)->getDescriptionOfOutputs();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getDescriptionOfDegreeOfFreedom (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getDescriptionOfDegreeOfFreedom",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getDescriptionOfDegreeOfFreedom" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsRegressorGenerator_getDescriptionOfDegreeOfFreedom" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->getDescriptionOfDegreeOfFreedom(arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getDescriptionOfDegreesOfFreedom (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getDescriptionOfDegreesOfFreedom",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getDescriptionOfDegreesOfFreedom" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  result = (arg1)->getDescriptionOfDegreesOfFreedom();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getBaseLinkName (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getBaseLinkName",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getBaseLinkName" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  result = (arg1)->getBaseLinkName();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getSensorsModel (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SensorsList *result = 0 ;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getSensorsModel",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getSensorsModel" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  result = (iDynTree::SensorsList *) &((iDynTree::Regressors::DynamicsRegressorGenerator const *)arg1)->getSensorsModel();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SensorsList, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_setRobotState__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::VectorDynSize *arg4 = 0 ;
  iDynTree::Transform *arg5 = 0 ;
  iDynTree::Twist *arg6 = 0 ;
  iDynTree::Twist *arg7 = 0 ;
  iDynTree::Twist *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_setRobotState",argc,8,8,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::VectorDynSize * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "5"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "5"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::Transform * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "6"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "6"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::Twist * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "7"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "7"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg7 = reinterpret_cast< iDynTree::Twist * >(argp7);
  res8 = SWIG_ConvertPtr(argv[7], &argp8, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "8"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "8"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg8 = reinterpret_cast< iDynTree::Twist * >(argp8);
  result = (bool)(arg1)->setRobotState((iDynTree::VectorDynSize const &)*arg2,(iDynTree::VectorDynSize const &)*arg3,(iDynTree::VectorDynSize const &)*arg4,(iDynTree::Transform const &)*arg5,(iDynTree::Twist const &)*arg6,(iDynTree::Twist const &)*arg7,(iDynTree::Twist const &)*arg8);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_setRobotState__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::VectorDynSize *arg4 = 0 ;
  iDynTree::Twist *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_setRobotState",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::VectorDynSize * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "5"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_setRobotState" "', argument " "5"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::Twist * >(argp5);
  result = (bool)(arg1)->setRobotState((iDynTree::VectorDynSize const &)*arg2,(iDynTree::VectorDynSize const &)*arg3,(iDynTree::VectorDynSize const &)*arg4,(iDynTree::Twist const &)*arg5);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_setRobotState (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_DynamicsRegressorGenerator_setRobotState__SWIG_1(resc,resv,argc,argv);
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_DynamicsRegressorGenerator_setRobotState__SWIG_0(resc,resv,argc,argv);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsRegressorGenerator_setRobotState'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::setRobotState(iDynTree::VectorDynSize const &,iDynTree::VectorDynSize const &,iDynTree::VectorDynSize const &,iDynTree::Transform const &,iDynTree::Twist const &,iDynTree::Twist const &,iDynTree::Twist const &)\n"
    "    iDynTree::Regressors::DynamicsRegressorGenerator::setRobotState(iDynTree::VectorDynSize const &,iDynTree::VectorDynSize const &,iDynTree::VectorDynSize const &,iDynTree::Twist const &)\n");
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getSensorsMeasurements (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SensorsMeasurements *result = 0 ;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getSensorsMeasurements",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getSensorsMeasurements" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  result = (iDynTree::SensorsMeasurements *) &(arg1)->getSensorsMeasurements();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SensorsMeasurements, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_computeRegressor (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  iDynTree::MatrixDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_computeRegressor",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_computeRegressor" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_computeRegressor" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_computeRegressor" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsRegressorGenerator_computeRegressor" "', argument " "3"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_computeRegressor" "', argument " "3"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  result = (bool)(arg1)->computeRegressor(*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_getModelParameters (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_getModelParameters",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_getModelParameters" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_getModelParameters" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_getModelParameters" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  result = (bool)(arg1)->getModelParameters(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_computeFloatingBaseIdentifiableSubspace (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  iDynTree::MatrixDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_computeFloatingBaseIdentifiableSubspace",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_computeFloatingBaseIdentifiableSubspace" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_computeFloatingBaseIdentifiableSubspace" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_computeFloatingBaseIdentifiableSubspace" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp2);
  result = (bool)(arg1)->computeFloatingBaseIdentifiableSubspace(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsRegressorGenerator_computeFixedBaseIdentifiableSubspace (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Regressors::DynamicsRegressorGenerator *arg1 = (iDynTree::Regressors::DynamicsRegressorGenerator *) 0 ;
  iDynTree::MatrixDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsRegressorGenerator_computeFixedBaseIdentifiableSubspace",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Regressors__DynamicsRegressorGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsRegressorGenerator_computeFixedBaseIdentifiableSubspace" "', argument " "1"" of type '" "iDynTree::Regressors::DynamicsRegressorGenerator *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Regressors::DynamicsRegressorGenerator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsRegressorGenerator_computeFixedBaseIdentifiableSubspace" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsRegressorGenerator_computeFixedBaseIdentifiableSubspace" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp2);
  result = (bool)(arg1)->computeFixedBaseIdentifiableSubspace(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_DynamicsComputations (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::HighLevel::DynamicsComputations *result = 0 ;
  
  if (!SWIG_check_num_args("new_DynamicsComputations",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::HighLevel::DynamicsComputations *)new iDynTree::HighLevel::DynamicsComputations();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_DynamicsComputations (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_DynamicsComputations",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DynamicsComputations" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_loadRobotModelFromFile__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_loadRobotModelFromFile",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_loadRobotModelFromFile" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_loadRobotModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_loadRobotModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsComputations_loadRobotModelFromFile" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_loadRobotModelFromFile" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)(arg1)->loadRobotModelFromFile((std::string const &)*arg2,(std::string const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_DynamicsComputations_loadRobotModelFromFile__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_loadRobotModelFromFile",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_loadRobotModelFromFile" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_loadRobotModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_loadRobotModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadRobotModelFromFile((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsComputations_loadRobotModelFromFile (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicsComputations_loadRobotModelFromFile__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DynamicsComputations_loadRobotModelFromFile__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsComputations_loadRobotModelFromFile'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::HighLevel::DynamicsComputations::loadRobotModelFromFile(std::string const &,std::string const &)\n"
    "    iDynTree::HighLevel::DynamicsComputations::loadRobotModelFromFile(std::string const &)\n");
  return 1;
}


int _wrap_DynamicsComputations_loadRobotModelFromString__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_loadRobotModelFromString",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_loadRobotModelFromString" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_loadRobotModelFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_loadRobotModelFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsComputations_loadRobotModelFromString" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_loadRobotModelFromString" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)(arg1)->loadRobotModelFromString((std::string const &)*arg2,(std::string const &)*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_DynamicsComputations_loadRobotModelFromString__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_loadRobotModelFromString",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_loadRobotModelFromString" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_loadRobotModelFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_loadRobotModelFromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadRobotModelFromString((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsComputations_loadRobotModelFromString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicsComputations_loadRobotModelFromString__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DynamicsComputations_loadRobotModelFromString__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsComputations_loadRobotModelFromString'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::HighLevel::DynamicsComputations::loadRobotModelFromString(std::string const &,std::string const &)\n"
    "    iDynTree::HighLevel::DynamicsComputations::loadRobotModelFromString(std::string const &)\n");
  return 1;
}


int _wrap_DynamicsComputations_isValid (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_isValid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_isValid" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  result = (bool)(arg1)->isValid();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getNrOfDegreesOfFreedom (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getNrOfDegreesOfFreedom",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getNrOfDegreesOfFreedom" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  result = (unsigned int)((iDynTree::HighLevel::DynamicsComputations const *)arg1)->getNrOfDegreesOfFreedom();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getDescriptionOfDegreeOfFreedom (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getDescriptionOfDegreeOfFreedom",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getDescriptionOfDegreeOfFreedom" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsComputations_getDescriptionOfDegreeOfFreedom" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->getDescriptionOfDegreeOfFreedom(arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getDescriptionOfDegreesOfFreedom (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getDescriptionOfDegreesOfFreedom",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getDescriptionOfDegreesOfFreedom" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  result = (arg1)->getDescriptionOfDegreesOfFreedom();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getNrOfLinks (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getNrOfLinks",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getNrOfLinks" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  result = (unsigned int)((iDynTree::HighLevel::DynamicsComputations const *)arg1)->getNrOfLinks();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getNrOfFrames (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getNrOfFrames",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getNrOfFrames" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  result = (unsigned int)((iDynTree::HighLevel::DynamicsComputations const *)arg1)->getNrOfFrames();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getFloatingBase (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getFloatingBase",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getFloatingBase" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  result = ((iDynTree::HighLevel::DynamicsComputations const *)arg1)->getFloatingBase();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_setFloatingBase (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_setFloatingBase",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_setFloatingBase" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_setFloatingBase" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_setFloatingBase" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setFloatingBase((std::string const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsComputations_setRobotState__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::VectorDynSize *arg4 = 0 ;
  iDynTree::Transform *arg5 = 0 ;
  iDynTree::Twist *arg6 = 0 ;
  iDynTree::ClassicalAcc *arg7 = 0 ;
  iDynTree::SpatialAcc *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_setRobotState",argc,8,8,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_setRobotState" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_setRobotState" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_setRobotState" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsComputations_setRobotState" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_setRobotState" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DynamicsComputations_setRobotState" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_setRobotState" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::VectorDynSize * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DynamicsComputations_setRobotState" "', argument " "5"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_setRobotState" "', argument " "5"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::Transform * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "DynamicsComputations_setRobotState" "', argument " "6"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_setRobotState" "', argument " "6"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg6 = reinterpret_cast< iDynTree::Twist * >(argp6);
  res7 = SWIG_ConvertPtr(argv[6], &argp7, SWIGTYPE_p_iDynTree__ClassicalAcc,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "DynamicsComputations_setRobotState" "', argument " "7"" of type '" "iDynTree::ClassicalAcc const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_setRobotState" "', argument " "7"" of type '" "iDynTree::ClassicalAcc const &""'"); 
  }
  arg7 = reinterpret_cast< iDynTree::ClassicalAcc * >(argp7);
  res8 = SWIG_ConvertPtr(argv[7], &argp8, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "DynamicsComputations_setRobotState" "', argument " "8"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_setRobotState" "', argument " "8"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg8 = reinterpret_cast< iDynTree::SpatialAcc * >(argp8);
  result = (bool)(arg1)->setRobotState((iDynTree::VectorDynSize const &)*arg2,(iDynTree::VectorDynSize const &)*arg3,(iDynTree::VectorDynSize const &)*arg4,(iDynTree::Transform const &)*arg5,(iDynTree::Twist const &)*arg6,(iDynTree::ClassicalAcc const &)*arg7,(iDynTree::SpatialAcc const &)*arg8);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_setRobotState__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::VectorDynSize *arg3 = 0 ;
  iDynTree::VectorDynSize *arg4 = 0 ;
  iDynTree::SpatialAcc *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_setRobotState",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_setRobotState" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_setRobotState" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_setRobotState" "', argument " "2"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsComputations_setRobotState" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_setRobotState" "', argument " "3"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::VectorDynSize * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DynamicsComputations_setRobotState" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_setRobotState" "', argument " "4"" of type '" "iDynTree::VectorDynSize const &""'"); 
  }
  arg4 = reinterpret_cast< iDynTree::VectorDynSize * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_iDynTree__SpatialAcc,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DynamicsComputations_setRobotState" "', argument " "5"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_setRobotState" "', argument " "5"" of type '" "iDynTree::SpatialAcc const &""'"); 
  }
  arg5 = reinterpret_cast< iDynTree::SpatialAcc * >(argp5);
  result = (bool)(arg1)->setRobotState((iDynTree::VectorDynSize const &)*arg2,(iDynTree::VectorDynSize const &)*arg3,(iDynTree::VectorDynSize const &)*arg4,(iDynTree::SpatialAcc const &)*arg5);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_setRobotState (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_iDynTree__SpatialAcc, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_DynamicsComputations_setRobotState__SWIG_1(resc,resv,argc,argv);
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_iDynTree__ClassicalAcc, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_iDynTree__SpatialAcc, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_DynamicsComputations_setRobotState__SWIG_0(resc,resv,argc,argv);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsComputations_setRobotState'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::HighLevel::DynamicsComputations::setRobotState(iDynTree::VectorDynSize const &,iDynTree::VectorDynSize const &,iDynTree::VectorDynSize const &,iDynTree::Transform const &,iDynTree::Twist const &,iDynTree::ClassicalAcc const &,iDynTree::SpatialAcc const &)\n"
    "    iDynTree::HighLevel::DynamicsComputations::setRobotState(iDynTree::VectorDynSize const &,iDynTree::VectorDynSize const &,iDynTree::VectorDynSize const &,iDynTree::SpatialAcc const &)\n");
  return 1;
}


int _wrap_DynamicsComputations_getWorldBaseTransform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getWorldBaseTransform",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getWorldBaseTransform" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  result = (arg1)->getWorldBaseTransform();
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getBaseTwist (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getBaseTwist",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getBaseTwist" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  result = (arg1)->getBaseTwist();
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getJointPos (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getJointPos",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getJointPos" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getJointPos" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getJointPos" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  result = (bool)(arg1)->getJointPos(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getJointVel (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getJointVel",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getJointVel" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getJointVel" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getJointVel" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  result = (bool)(arg1)->getJointVel(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getFrameIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getFrameIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getFrameIndex" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getFrameIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getFrameIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (int)((iDynTree::HighLevel::DynamicsComputations const *)arg1)->getFrameIndex((std::string const &)*arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsComputations_getFrameName (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getFrameName",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getFrameName" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsComputations_getFrameName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((iDynTree::HighLevel::DynamicsComputations const *)arg1)->getFrameName(arg2);
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getWorldTransform__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getWorldTransform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getWorldTransform" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsComputations_getWorldTransform" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (arg1)->getWorldTransform(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getWorldTransform__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getWorldTransform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getWorldTransform" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "DynamicsComputations_getWorldTransform" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (arg1)->getWorldTransform(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getWorldTransform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DynamicsComputations_getWorldTransform__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicsComputations_getWorldTransform__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsComputations_getWorldTransform'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::HighLevel::DynamicsComputations::getWorldTransform(unsigned int)\n"
    "    iDynTree::HighLevel::DynamicsComputations::getWorldTransform(std::string)\n");
  return 1;
}


int _wrap_DynamicsComputations_getRelativeTransform__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getRelativeTransform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getRelativeTransform" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsComputations_getRelativeTransform" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DynamicsComputations_getRelativeTransform" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (arg1)->getRelativeTransform(arg2,arg3);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getRelativeTransform__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getRelativeTransform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getRelativeTransform" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getRelativeTransform" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getRelativeTransform" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsComputations_getRelativeTransform" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getRelativeTransform" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->getRelativeTransform((std::string const &)*arg2,(std::string const &)*arg3);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_DynamicsComputations_getRelativeTransform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DynamicsComputations_getRelativeTransform__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DynamicsComputations_getRelativeTransform__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsComputations_getRelativeTransform'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::HighLevel::DynamicsComputations::getRelativeTransform(unsigned int,unsigned int)\n"
    "    iDynTree::HighLevel::DynamicsComputations::getRelativeTransform(std::string const &,std::string const &)\n");
  return 1;
}


int _wrap_DynamicsComputations_getFrameTwist__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getFrameTwist",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getFrameTwist" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getFrameTwist" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getFrameTwist" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->getFrameTwist((std::string const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsComputations_getFrameTwist__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getFrameTwist",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getFrameTwist" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsComputations_getFrameTwist" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->getFrameTwist(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getFrameTwist (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DynamicsComputations_getFrameTwist__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicsComputations_getFrameTwist__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsComputations_getFrameTwist'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::HighLevel::DynamicsComputations::getFrameTwist(std::string const &)\n"
    "    iDynTree::HighLevel::DynamicsComputations::getFrameTwist(int const)\n");
  return 1;
}


int _wrap_DynamicsComputations_getFrameTwistInWorldOrient__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getFrameTwistInWorldOrient",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getFrameTwistInWorldOrient" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getFrameTwistInWorldOrient" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getFrameTwistInWorldOrient" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->getFrameTwistInWorldOrient((std::string const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsComputations_getFrameTwistInWorldOrient__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getFrameTwistInWorldOrient",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getFrameTwistInWorldOrient" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsComputations_getFrameTwistInWorldOrient" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->getFrameTwistInWorldOrient(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getFrameTwistInWorldOrient (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DynamicsComputations_getFrameTwistInWorldOrient__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicsComputations_getFrameTwistInWorldOrient__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsComputations_getFrameTwistInWorldOrient'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::HighLevel::DynamicsComputations::getFrameTwistInWorldOrient(std::string const &)\n"
    "    iDynTree::HighLevel::DynamicsComputations::getFrameTwistInWorldOrient(int const)\n");
  return 1;
}


int _wrap_DynamicsComputations_getFrameProperSpatialAcceleration__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getFrameProperSpatialAcceleration",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getFrameProperSpatialAcceleration" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getFrameProperSpatialAcceleration" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getFrameProperSpatialAcceleration" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->getFrameProperSpatialAcceleration((std::string const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsComputations_getFrameProperSpatialAcceleration__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialAcc result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getFrameProperSpatialAcceleration",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getFrameProperSpatialAcceleration" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsComputations_getFrameProperSpatialAcceleration" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->getFrameProperSpatialAcceleration(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialAcc(static_cast< const iDynTree::SpatialAcc& >(result))), SWIGTYPE_p_iDynTree__SpatialAcc, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getFrameProperSpatialAcceleration (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DynamicsComputations_getFrameProperSpatialAcceleration__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicsComputations_getFrameProperSpatialAcceleration__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsComputations_getFrameProperSpatialAcceleration'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::HighLevel::DynamicsComputations::getFrameProperSpatialAcceleration(std::string const &)\n"
    "    iDynTree::HighLevel::DynamicsComputations::getFrameProperSpatialAcceleration(int const)\n");
  return 1;
}


int _wrap_DynamicsComputations_getLinkIndex (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getLinkIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getLinkIndex" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getLinkIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getLinkIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (int)((iDynTree::HighLevel::DynamicsComputations const *)arg1)->getLinkIndex((std::string const &)*arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsComputations_getLinkInertia__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialInertia result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getLinkInertia",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getLinkInertia" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsComputations_getLinkInertia" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = ((iDynTree::HighLevel::DynamicsComputations const *)arg1)->getLinkInertia(arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialInertia(static_cast< const iDynTree::SpatialInertia& >(result))), SWIGTYPE_p_iDynTree__SpatialInertia, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getLinkInertia__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  iDynTree::SpatialInertia result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getLinkInertia",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getLinkInertia" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getLinkInertia" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getLinkInertia" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((iDynTree::HighLevel::DynamicsComputations const *)arg1)->getLinkInertia((std::string const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialInertia(static_cast< const iDynTree::SpatialInertia& >(result))), SWIGTYPE_p_iDynTree__SpatialInertia, SWIG_POINTER_OWN |  0 );
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsComputations_getLinkInertia (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DynamicsComputations_getLinkInertia__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DynamicsComputations_getLinkInertia__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsComputations_getLinkInertia'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::HighLevel::DynamicsComputations::getLinkInertia(unsigned int const) const\n"
    "    iDynTree::HighLevel::DynamicsComputations::getLinkInertia(std::string const &) const\n");
  return 1;
}


int _wrap_DynamicsComputations_inverseDynamics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  iDynTree::Wrench *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_inverseDynamics",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_inverseDynamics" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_inverseDynamics" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_inverseDynamics" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsComputations_inverseDynamics" "', argument " "3"" of type '" "iDynTree::Wrench &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_inverseDynamics" "', argument " "3"" of type '" "iDynTree::Wrench &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::Wrench * >(argp3);
  result = (bool)(arg1)->inverseDynamics(*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getFrameJacobian__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  std::string *arg2 = 0 ;
  iDynTree::MatrixDynSize *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getFrameJacobian",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getFrameJacobian" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getFrameJacobian" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getFrameJacobian" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsComputations_getFrameJacobian" "', argument " "3"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getFrameJacobian" "', argument " "3"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp3);
  result = (bool)((iDynTree::HighLevel::DynamicsComputations const *)arg1)->getFrameJacobian((std::string const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_DynamicsComputations_getFrameJacobian__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  unsigned int *arg2 = 0 ;
  iDynTree::MatrixDynSize *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getFrameJacobian",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getFrameJacobian" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DynamicsComputations_getFrameJacobian" "', argument " "2"" of type '" "unsigned int""'");
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DynamicsComputations_getFrameJacobian" "', argument " "3"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getFrameJacobian" "', argument " "3"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp3);
  result = (bool)((iDynTree::HighLevel::DynamicsComputations const *)arg1)->getFrameJacobian((unsigned int const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getFrameJacobian (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__MatrixDynSize, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DynamicsComputations_getFrameJacobian__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__MatrixDynSize, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DynamicsComputations_getFrameJacobian__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  
  SWIG_Error(SWIG_RuntimeError, "No matching function for overload function 'DynamicsComputations_getFrameJacobian'."
    "  Possible C/C++ prototypes are:\n"
    "    iDynTree::HighLevel::DynamicsComputations::getFrameJacobian(std::string const &,iDynTree::MatrixDynSize &) const\n"
    "    iDynTree::HighLevel::DynamicsComputations::getFrameJacobian(unsigned int const &,iDynTree::MatrixDynSize &) const\n");
  return 1;
}


int _wrap_DynamicsComputations_getDynamicsRegressor (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  iDynTree::MatrixDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getDynamicsRegressor",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getDynamicsRegressor" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__MatrixDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getDynamicsRegressor" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getDynamicsRegressor" "', argument " "2"" of type '" "iDynTree::MatrixDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp2);
  result = (bool)(arg1)->getDynamicsRegressor(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DynamicsComputations_getModelDynamicsParameters (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::HighLevel::DynamicsComputations *arg1 = (iDynTree::HighLevel::DynamicsComputations *) 0 ;
  iDynTree::VectorDynSize *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DynamicsComputations_getModelDynamicsParameters",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__HighLevel__DynamicsComputations, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DynamicsComputations_getModelDynamicsParameters" "', argument " "1"" of type '" "iDynTree::HighLevel::DynamicsComputations const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::HighLevel::DynamicsComputations * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__VectorDynSize,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DynamicsComputations_getModelDynamicsParameters" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DynamicsComputations_getModelDynamicsParameters" "', argument " "2"" of type '" "iDynTree::VectorDynSize &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::VectorDynSize * >(argp2);
  result = (bool)((iDynTree::HighLevel::DynamicsComputations const *)arg1)->getModelDynamicsParameters(*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_iDynTree__ClassicalAccTo_p_iDynTree__VectorFixSizeT_6_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 6 > *)  ((iDynTree::ClassicalAcc *) x));
}
static void *_p_iDynTree__RotationTo_p_iDynTree__RotationRaw(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::RotationRaw *)  ((iDynTree::Rotation *) x));
}
static void *_p_iDynTree__PositionTo_p_iDynTree__PositionRaw(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::PositionRaw *)  ((iDynTree::Position *) x));
}
static void *_p_iDynTree__LinearForceVector3SemanticsTo_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *)  ((iDynTree::LinearForceVector3Semantics *) x));
}
static void *_p_iDynTree__RevoluteJointTo_p_iDynTree__MovableJointImplT_1_1_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::MovableJointImpl< 1,1 > *)  ((iDynTree::RevoluteJoint *) x));
}
static void *_p_iDynTree__DirectionTo_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *)  ((iDynTree::Direction *) x));
}
static void *_p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_tTo_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *) (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) ((iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *) x));
}
static void *_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_tTo_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *)  ((iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) x));
}
static void *_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_tTo_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *)  ((iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) x));
}
static void *_p_iDynTree__PositionRawTo_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *)  ((iDynTree::PositionRaw *) x));
}
static void *_p_iDynTree__PositionTo_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *) (iDynTree::PositionRaw *) ((iDynTree::Position *) x));
}
static void *_p_iDynTree__AngularForceVector3To_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *) (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *)(iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *) ((iDynTree::AngularForceVector3 *) x));
}
static void *_p_iDynTree__LinearForceVector3To_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *) (iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *)(iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *) ((iDynTree::LinearForceVector3 *) x));
}
static void *_p_iDynTree__AngularMotionVector3To_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *) (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *)(iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *) ((iDynTree::AngularMotionVector3 *) x));
}
static void *_p_iDynTree__LinearMotionVector3To_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *) (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *)(iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *) ((iDynTree::LinearMotionVector3 *) x));
}
static void *_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_tTo_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *) (iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) ((iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *) x));
}
static void *_p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_tTo_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *) (iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) ((iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *) x));
}
static void *_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_tTo_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *) (iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) ((iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *) x));
}
static void *_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_tTo_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *)  ((iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) x));
}
static void *_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_tTo_p_iDynTree__VectorFixSizeT_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::VectorFixSize< 3 > *)  ((iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) x));
}
static void *_p_iDynTree__WrenchTo_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) (iDynTree::SpatialForceVector *) ((iDynTree::Wrench *) x));
}
static void *_p_iDynTree__SpatialForceVectorTo_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SpatialVector< iDynTree::SpatialForceVector > *)  ((iDynTree::SpatialForceVector *) x));
}
static void *_p_iDynTree__SpatialMomentumTo_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) (iDynTree::SpatialForceVector *) ((iDynTree::SpatialMomentum *) x));
}
static void *_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_tTo_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *)  ((iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *) x));
}
static void *_p_iDynTree__AngularMotionVector3To_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) (iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *) ((iDynTree::AngularMotionVector3 *) x));
}
static void *_p_iDynTree__AngularForceVector3To_p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *)  ((iDynTree::AngularForceVector3 *) x));
}
static void *_p_iDynTree__AccelerometerTo_p_iDynTree__Sensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::Sensor *)  ((iDynTree::Accelerometer *) x));
}
static void *_p_iDynTree__GyroscopeTo_p_iDynTree__Sensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::Sensor *)  ((iDynTree::Gyroscope *) x));
}
static void *_p_iDynTree__SixAxisForceTorqueSensorTo_p_iDynTree__Sensor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::Sensor *)  ((iDynTree::SixAxisForceTorqueSensor *) x));
}
static void *_p_iDynTree__SpatialInertiaTo_p_iDynTree__SpatialInertiaRaw(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SpatialInertiaRaw *)  ((iDynTree::SpatialInertia *) x));
}
static void *_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_tTo_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *)  ((iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *) x));
}
static void *_p_iDynTree__AngularForceVector3SemanticsTo_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *) (iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *) ((iDynTree::AngularForceVector3Semantics *) x));
}
static void *_p_iDynTree__AngularMotionVector3SemanticsTo_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *)  ((iDynTree::AngularMotionVector3Semantics *) x));
}
static void *_p_iDynTree__LinearForceVector3To_p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *)  ((iDynTree::LinearForceVector3 *) x));
}
static void *_p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_tTo_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *)  ((iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *) x));
}
static void *_p_iDynTree__AngularForceVector3To_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) (iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *) ((iDynTree::AngularForceVector3 *) x));
}
static void *_p_iDynTree__TwistTo_p_iDynTree__SpatialMotionVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SpatialMotionVector *)  ((iDynTree::Twist *) x));
}
static void *_p_iDynTree__SpatialAccTo_p_iDynTree__SpatialMotionVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SpatialMotionVector *)  ((iDynTree::SpatialAcc *) x));
}
static void *_p_iDynTree__VectorFixSizeT_10_tTo_p_iDynTree__IRawVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawVector *)  ((iDynTree::VectorFixSize< 10 > *) x));
}
static void *_p_iDynTree__DirectionTo_p_iDynTree__IRawVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawVector *) (iDynTree::VectorFixSize< 3 > *) ((iDynTree::Direction *) x));
}
static void *_p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_tTo_p_iDynTree__IRawVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawVector *) (iDynTree::VectorFixSize< 3 > *)(iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) ((iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *) x));
}
static void *_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_tTo_p_iDynTree__IRawVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawVector *) (iDynTree::VectorFixSize< 3 > *) ((iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) x));
}
static void *_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_tTo_p_iDynTree__IRawVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawVector *) (iDynTree::VectorFixSize< 3 > *) ((iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) x));
}
static void *_p_iDynTree__ClassicalAccTo_p_iDynTree__IRawVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawVector *) (iDynTree::VectorFixSize< 6 > *) ((iDynTree::ClassicalAcc *) x));
}
static void *_p_iDynTree__PositionRawTo_p_iDynTree__IRawVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawVector *) (iDynTree::VectorFixSize< 3 > *) ((iDynTree::PositionRaw *) x));
}
static void *_p_iDynTree__VectorDynSizeTo_p_iDynTree__IRawVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawVector *)  ((iDynTree::VectorDynSize *) x));
}
static void *_p_iDynTree__VectorFixSizeT_6_tTo_p_iDynTree__IRawVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawVector *)  ((iDynTree::VectorFixSize< 6 > *) x));
}
static void *_p_iDynTree__PositionTo_p_iDynTree__IRawVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawVector *) (iDynTree::VectorFixSize< 3 > *)(iDynTree::PositionRaw *) ((iDynTree::Position *) x));
}
static void *_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_tTo_p_iDynTree__IRawVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawVector *) (iDynTree::VectorFixSize< 3 > *)(iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) ((iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *) x));
}
static void *_p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_tTo_p_iDynTree__IRawVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawVector *) (iDynTree::VectorFixSize< 3 > *)(iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) ((iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *) x));
}
static void *_p_iDynTree__LinearMotionVector3To_p_iDynTree__IRawVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawVector *) (iDynTree::VectorFixSize< 3 > *)(iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *)(iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *) ((iDynTree::LinearMotionVector3 *) x));
}
static void *_p_iDynTree__AngularMotionVector3To_p_iDynTree__IRawVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawVector *) (iDynTree::VectorFixSize< 3 > *)(iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *)(iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *) ((iDynTree::AngularMotionVector3 *) x));
}
static void *_p_iDynTree__LinearForceVector3To_p_iDynTree__IRawVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawVector *) (iDynTree::VectorFixSize< 3 > *)(iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *)(iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *) ((iDynTree::LinearForceVector3 *) x));
}
static void *_p_iDynTree__AngularForceVector3To_p_iDynTree__IRawVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawVector *) (iDynTree::VectorFixSize< 3 > *)(iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *)(iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *) ((iDynTree::AngularForceVector3 *) x));
}
static void *_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_tTo_p_iDynTree__IRawVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawVector *) (iDynTree::VectorFixSize< 3 > *)(iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) ((iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *) x));
}
static void *_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_tTo_p_iDynTree__IRawVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawVector *) (iDynTree::VectorFixSize< 3 > *) ((iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) x));
}
static void *_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_tTo_p_iDynTree__IRawVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawVector *) (iDynTree::VectorFixSize< 3 > *) ((iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) x));
}
static void *_p_iDynTree__VectorFixSizeT_3_tTo_p_iDynTree__IRawVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawVector *)  ((iDynTree::VectorFixSize< 3 > *) x));
}
static void *_p_iDynTree__WrenchTo_p_iDynTree__SpatialForceVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SpatialForceVector *)  ((iDynTree::Wrench *) x));
}
static void *_p_iDynTree__SpatialMomentumTo_p_iDynTree__SpatialForceVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SpatialForceVector *)  ((iDynTree::SpatialMomentum *) x));
}
static void *_p_iDynTree__VectorFixSizeT_10_tTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::IRawVector *) ((iDynTree::VectorFixSize< 10 > *) x));
}
static void *_p_iDynTree__SpatialMotionVectorTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) ((iDynTree::SpatialMotionVector *) x));
}
static void *_p_iDynTree__DirectionTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::IRawVector *)(iDynTree::VectorFixSize< 3 > *) ((iDynTree::Direction *) x));
}
static void *_p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_tTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::IRawVector *)(iDynTree::VectorFixSize< 3 > *)(iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) ((iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *) x));
}
static void *_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_tTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::IRawVector *)(iDynTree::VectorFixSize< 3 > *) ((iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) x));
}
static void *_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_tTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::IRawVector *)(iDynTree::VectorFixSize< 3 > *) ((iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) x));
}
static void *_p_iDynTree__ClassicalAccTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::IRawVector *)(iDynTree::VectorFixSize< 6 > *) ((iDynTree::ClassicalAcc *) x));
}
static void *_p_iDynTree__PositionRawTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::IRawVector *)(iDynTree::VectorFixSize< 3 > *) ((iDynTree::PositionRaw *) x));
}
static void *_p_iDynTree__VectorDynSizeTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::IRawVector *) ((iDynTree::VectorDynSize *) x));
}
static void *_p_iDynTree__VectorFixSizeT_6_tTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::IRawVector *) ((iDynTree::VectorFixSize< 6 > *) x));
}
static void *_p_iDynTree__PositionTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::IRawVector *)(iDynTree::VectorFixSize< 3 > *)(iDynTree::PositionRaw *) ((iDynTree::Position *) x));
}
static void *_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_tTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::IRawVector *)(iDynTree::VectorFixSize< 3 > *)(iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) ((iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *) x));
}
static void *_p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_tTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::IRawVector *)(iDynTree::VectorFixSize< 3 > *)(iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *) ((iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *) x));
}
static void *_p_iDynTree__LinearMotionVector3To_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::IRawVector *)(iDynTree::VectorFixSize< 3 > *)(iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *)(iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *) ((iDynTree::LinearMotionVector3 *) x));
}
static void *_p_iDynTree__AngularMotionVector3To_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::IRawVector *)(iDynTree::VectorFixSize< 3 > *)(iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *)(iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *) ((iDynTree::AngularMotionVector3 *) x));
}
static void *_p_iDynTree__LinearForceVector3To_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::IRawVector *)(iDynTree::VectorFixSize< 3 > *)(iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *)(iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *) ((iDynTree::LinearForceVector3 *) x));
}
static void *_p_iDynTree__AngularForceVector3To_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::IRawVector *)(iDynTree::VectorFixSize< 3 > *)(iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *)(iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *) ((iDynTree::AngularForceVector3 *) x));
}
static void *_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_tTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *)  ((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) x));
}
static void *_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_tTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::IRawVector *)(iDynTree::VectorFixSize< 3 > *)(iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) ((iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *) x));
}
static void *_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_tTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::IRawVector *)(iDynTree::VectorFixSize< 3 > *) ((iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *) x));
}
static void *_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_tTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::IRawVector *)(iDynTree::VectorFixSize< 3 > *) ((iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) x));
}
static void *_p_iDynTree__IRawVectorTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *)  ((iDynTree::IRawVector *) x));
}
static void *_p_iDynTree__SpatialForceVectorTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) ((iDynTree::SpatialForceVector *) x));
}
static void *_p_iDynTree__SpatialMomentumTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *)(iDynTree::SpatialForceVector *) ((iDynTree::SpatialMomentum *) x));
}
static void *_p_iDynTree__SpatialAccTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *)(iDynTree::SpatialMotionVector *) ((iDynTree::SpatialAcc *) x));
}
static void *_p_iDynTree__VectorFixSizeT_3_tTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::IRawVector *) ((iDynTree::VectorFixSize< 3 > *) x));
}
static void *_p_iDynTree__WrenchTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::SpatialVector< iDynTree::SpatialForceVector > *)(iDynTree::SpatialForceVector *) ((iDynTree::Wrench *) x));
}
static void *_p_iDynTree__TwistTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *)(iDynTree::SpatialMotionVector *) ((iDynTree::Twist *) x));
}
static void *_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_tTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *)  ((iDynTree::SpatialVector< iDynTree::SpatialForceVector > *) x));
}
static void *_p_iDynTree__LinearForceVector3SemanticsTo_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *) (iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *) ((iDynTree::LinearForceVector3Semantics *) x));
}
static void *_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_tTo_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *)  ((iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *) x));
}
static void *_p_iDynTree__LinearMotionVector3SemanticsTo_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *)  ((iDynTree::LinearMotionVector3Semantics *) x));
}
static void *_p_iDynTree__RotationalInertiaRawTo_p_iDynTree__MatrixFixSizeT_3_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::MatrixFixSize< 3,3 > *)  ((iDynTree::RotationalInertiaRaw *) x));
}
static void *_p_iDynTree__RotationRawTo_p_iDynTree__MatrixFixSizeT_3_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::MatrixFixSize< 3,3 > *)  ((iDynTree::RotationRaw *) x));
}
static void *_p_iDynTree__RotationTo_p_iDynTree__MatrixFixSizeT_3_3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::MatrixFixSize< 3,3 > *) (iDynTree::RotationRaw *) ((iDynTree::Rotation *) x));
}
static void *_p_iDynTree__MovableJointImplT_1_1_tTo_p_iDynTree__IJoint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IJoint *)  ((iDynTree::MovableJointImpl< 1,1 > *) x));
}
static void *_p_iDynTree__RevoluteJointTo_p_iDynTree__IJoint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IJoint *) (iDynTree::MovableJointImpl< 1,1 > *) ((iDynTree::RevoluteJoint *) x));
}
static void *_p_iDynTree__MovableJointImplT_6_6_tTo_p_iDynTree__IJoint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IJoint *)  ((iDynTree::MovableJointImpl< 6,6 > *) x));
}
static void *_p_iDynTree__MovableJointImplT_5_5_tTo_p_iDynTree__IJoint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IJoint *)  ((iDynTree::MovableJointImpl< 5,5 > *) x));
}
static void *_p_iDynTree__MovableJointImplT_4_4_tTo_p_iDynTree__IJoint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IJoint *)  ((iDynTree::MovableJointImpl< 4,4 > *) x));
}
static void *_p_iDynTree__FixedJointTo_p_iDynTree__IJoint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IJoint *)  ((iDynTree::FixedJoint *) x));
}
static void *_p_iDynTree__MovableJointImplT_3_3_tTo_p_iDynTree__IJoint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IJoint *)  ((iDynTree::MovableJointImpl< 3,3 > *) x));
}
static void *_p_iDynTree__MovableJointImplT_2_2_tTo_p_iDynTree__IJoint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IJoint *)  ((iDynTree::MovableJointImpl< 2,2 > *) x));
}
static void *_p_iDynTree__LinearMotionVector3To_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *)  ((iDynTree::LinearMotionVector3 *) x));
}
static void *_p_iDynTree__AngularForceVector3SemanticsTo_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *)  ((iDynTree::AngularForceVector3Semantics *) x));
}
static void *_p_iDynTree__MatrixDynSizeTo_p_iDynTree__IMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IMatrix *) (iDynTree::IRawMatrix *) ((iDynTree::MatrixDynSize *) x));
}
static void *_p_iDynTree__MatrixFixSizeT_6_6_tTo_p_iDynTree__IMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IMatrix *) (iDynTree::IRawMatrix *) ((iDynTree::MatrixFixSize< 6,6 > *) x));
}
static void *_p_iDynTree__IRawMatrixTo_p_iDynTree__IMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IMatrix *)  ((iDynTree::IRawMatrix *) x));
}
static void *_p_iDynTree__MatrixFixSizeT_4_4_tTo_p_iDynTree__IMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IMatrix *) (iDynTree::IRawMatrix *) ((iDynTree::MatrixFixSize< 4,4 > *) x));
}
static void *_p_iDynTree__MatrixFixSizeT_6_10_tTo_p_iDynTree__IMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IMatrix *) (iDynTree::IRawMatrix *) ((iDynTree::MatrixFixSize< 6,10 > *) x));
}
static void *_p_iDynTree__RotationalInertiaRawTo_p_iDynTree__IMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IMatrix *) (iDynTree::IRawMatrix *)(iDynTree::MatrixFixSize< 3,3 > *) ((iDynTree::RotationalInertiaRaw *) x));
}
static void *_p_iDynTree__MatrixFixSizeT_3_3_tTo_p_iDynTree__IMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IMatrix *) (iDynTree::IRawMatrix *) ((iDynTree::MatrixFixSize< 3,3 > *) x));
}
static void *_p_iDynTree__RotationRawTo_p_iDynTree__IMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IMatrix *) (iDynTree::IRawMatrix *)(iDynTree::MatrixFixSize< 3,3 > *) ((iDynTree::RotationRaw *) x));
}
static void *_p_iDynTree__RotationTo_p_iDynTree__IMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IMatrix *) (iDynTree::IRawMatrix *)(iDynTree::MatrixFixSize< 3,3 > *)(iDynTree::RotationRaw *) ((iDynTree::Rotation *) x));
}
static void *_p_iDynTree__MatrixDynSizeTo_p_iDynTree__IRawMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawMatrix *)  ((iDynTree::MatrixDynSize *) x));
}
static void *_p_iDynTree__MatrixFixSizeT_6_6_tTo_p_iDynTree__IRawMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawMatrix *)  ((iDynTree::MatrixFixSize< 6,6 > *) x));
}
static void *_p_iDynTree__MatrixFixSizeT_4_4_tTo_p_iDynTree__IRawMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawMatrix *)  ((iDynTree::MatrixFixSize< 4,4 > *) x));
}
static void *_p_iDynTree__MatrixFixSizeT_6_10_tTo_p_iDynTree__IRawMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawMatrix *)  ((iDynTree::MatrixFixSize< 6,10 > *) x));
}
static void *_p_iDynTree__RotationalInertiaRawTo_p_iDynTree__IRawMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawMatrix *) (iDynTree::MatrixFixSize< 3,3 > *) ((iDynTree::RotationalInertiaRaw *) x));
}
static void *_p_iDynTree__MatrixFixSizeT_3_3_tTo_p_iDynTree__IRawMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawMatrix *)  ((iDynTree::MatrixFixSize< 3,3 > *) x));
}
static void *_p_iDynTree__RotationRawTo_p_iDynTree__IRawMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawMatrix *) (iDynTree::MatrixFixSize< 3,3 > *) ((iDynTree::RotationRaw *) x));
}
static void *_p_iDynTree__RotationTo_p_iDynTree__IRawMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IRawMatrix *) (iDynTree::MatrixFixSize< 3,3 > *)(iDynTree::RotationRaw *) ((iDynTree::Rotation *) x));
}
static void *_p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_tTo_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *)  ((iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *) x));
}
static void *_p_iDynTree__LinearForceVector3To_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *) (iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *) ((iDynTree::LinearForceVector3 *) x));
}
static void *_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_tTo_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *)  ((iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *) x));
}
static void *_p_iDynTree__LinearMotionVector3To_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *) (iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *) ((iDynTree::LinearMotionVector3 *) x));
}
static void *_p_iDynTree__SpatialMotionVectorTo_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *)  ((iDynTree::SpatialMotionVector *) x));
}
static void *_p_iDynTree__TwistTo_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) (iDynTree::SpatialMotionVector *) ((iDynTree::Twist *) x));
}
static void *_p_iDynTree__SpatialAccTo_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *) (iDynTree::SpatialMotionVector *) ((iDynTree::SpatialAcc *) x));
}
static void *_p_iDynTree__AngularMotionVector3To_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *)  ((iDynTree::AngularMotionVector3 *) x));
}
static swig_type_info _swigt__p_AngularVector3T = {"_p_AngularVector3T", "AngularVector3T *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AngularVector3Type = {"_p_AngularVector3Type", "AngularVector3Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DerivByAngularMotion = {"_p_DerivByAngularMotion", "DerivByAngularMotion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DerivByLinearMotion = {"_p_DerivByLinearMotion", "DerivByLinearMotion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DualSpace = {"_p_DualSpace", "DualSpace *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LinearVector3T = {"_p_LinearVector3T", "LinearVector3T *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LinearVector3Type = {"_p_LinearVector3Type", "LinearVector3Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MotionCrossAngF = {"_p_MotionCrossAngF", "MotionCrossAngF *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MotionCrossAngM = {"_p_MotionCrossAngM", "MotionCrossAngM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MotionCrossLinF = {"_p_MotionCrossLinF", "MotionCrossLinF *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MotionCrossLinM = {"_p_MotionCrossLinM", "MotionCrossLinM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MotionForceSemanticsT = {"_p_MotionForceSemanticsT", "MotionForceSemanticsT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MotionForceTbase = {"_p_MotionForceTbase", "MotionForceTbase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SemanticsType = {"_p_SemanticsType", "SemanticsType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Traits = {"_p_Traits", "Traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Type = {"_p_Type", "Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iDynTree__Accelerometer = {"_p_iDynTree__Accelerometer", "iDynTree::Accelerometer *", 0, 0, (void*)"iDynTree.Accelerometer", 0};
static swig_type_info _swigt__p_iDynTree__AngularForceVector3 = {"_p_iDynTree__AngularForceVector3", "iDynTree::SpatialForceVector::AngularVector3T *|iDynTree::MotionForce_traits< iDynTree::AngularMotionVector3 >::DualSpace *|iDynTree::AngularForceVector3 *|iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossLinF *|iDynTree::AngMomentum *|iDynTree::SpatialVector< iDynTree::SpatialForceVector >::AngularVector3T *|iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossAngF *|iDynTree::Torque *", 0, 0, (void*)"iDynTree.AngularForceVector3", 0};
static swig_type_info _swigt__p_iDynTree__AngularForceVector3Semantics = {"_p_iDynTree__AngularForceVector3Semantics", "iDynTree::DualMotionForceSemanticsT< iDynTree::AngularMotionVector3Semantics >::Type *|iDynTree::AngularForceVector3Semantics *|iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceSemanticsT *", 0, 0, (void*)"iDynTree.AngularForceVector3Semantics", 0};
static swig_type_info _swigt__p_iDynTree__AngularMotionVector3 = {"_p_iDynTree__AngularMotionVector3", "iDynTree::SpatialMotionVector::AngularVector3T *|iDynTree::AngularMotionVector3 *|iDynTree::AngVelocity *|iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossLinM *|iDynTree::AngAcceleration *|iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::AngularVector3T *|iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossAngM *|iDynTree::MotionForce_traits< iDynTree::AngularForceVector3 >::DualSpace *", 0, 0, (void*)"iDynTree.AngularMotionVector3", 0};
static swig_type_info _swigt__p_iDynTree__AngularMotionVector3Semantics = {"_p_iDynTree__AngularMotionVector3Semantics", "iDynTree::DualMotionForceSemanticsT< iDynTree::AngularForceVector3Semantics >::Type *|iDynTree::AngularMotionVector3Semantics *|iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceSemanticsT *", 0, 0, (void*)"iDynTree.AngularMotionVector3Semantics", 0};
static swig_type_info _swigt__p_iDynTree__ArticulatedBodyInertia = {"_p_iDynTree__ArticulatedBodyInertia", "iDynTree::ArticulatedBodyInertia *", 0, 0, (void*)"iDynTree.ArticulatedBodyInertia", 0};
static swig_type_info _swigt__p_iDynTree__Axis = {"_p_iDynTree__Axis", "iDynTree::Axis *", 0, 0, (void*)"iDynTree.Axis", 0};
static swig_type_info _swigt__p_iDynTree__ClassicalAcc = {"_p_iDynTree__ClassicalAcc", "iDynTree::ClassicalAcc *", 0, 0, (void*)"iDynTree.ClassicalAcc", 0};
static swig_type_info _swigt__p_iDynTree__Direction = {"_p_iDynTree__Direction", "iDynTree::Direction *", 0, 0, (void*)"iDynTree.Direction", 0};
static swig_type_info _swigt__p_iDynTree__DualSpaceT_iDynTree__SpatialForceVector_t__Type = {"_p_iDynTree__DualSpaceT_iDynTree__SpatialForceVector_t__Type", "iDynTree::DualSpace< iDynTree::SpatialForceVector >::Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iDynTree__DualSpaceT_iDynTree__SpatialMotionVector_t__Type = {"_p_iDynTree__DualSpaceT_iDynTree__SpatialMotionVector_t__Type", "iDynTree::DualSpace< iDynTree::SpatialMotionVector >::Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iDynTree__Dummy = {"_p_iDynTree__Dummy", "iDynTree::Dummy *", 0, 0, (void*)"iDynTree.Dummy", 0};
static swig_type_info _swigt__p_iDynTree__FixedJoint = {"_p_iDynTree__FixedJoint", "iDynTree::FixedJoint *", 0, 0, (void*)"iDynTree.FixedJoint", 0};
static swig_type_info _swigt__p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t = {"_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t", "iDynTree::ForceVector3Semantics< iDynTree::AngularForceVector3Semantics > *", 0, 0, (void*)"iDynTree.ForceVector3Semantics__AngularForceVector3Semantics", 0};
static swig_type_info _swigt__p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t = {"_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t", "iDynTree::ForceVector3Semantics< iDynTree::LinearForceVector3Semantics > *", 0, 0, (void*)"iDynTree.ForceVector3Semantics__LinearForceVector3Semantics", 0};
static swig_type_info _swigt__p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t = {"_p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t", "iDynTree::ForceVector3< iDynTree::AngularForceVector3 > *", 0, 0, (void*)"iDynTree.ForceVector3__AngularForceVector3", 0};
static swig_type_info _swigt__p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t = {"_p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t", "iDynTree::ForceVector3< iDynTree::LinearForceVector3 > *", 0, 0, (void*)"iDynTree.ForceVector3__LinearForceVector3", 0};
static swig_type_info _swigt__p_iDynTree__FreeFloatingAcc = {"_p_iDynTree__FreeFloatingAcc", "iDynTree::FreeFloatingAcc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iDynTree__FreeFloatingPos = {"_p_iDynTree__FreeFloatingPos", "iDynTree::FreeFloatingPos *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iDynTree__FreeFloatingVel = {"_p_iDynTree__FreeFloatingVel", "iDynTree::FreeFloatingVel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t = {"_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t", "iDynTree::GeomVector3Semantics< iDynTree::AngularForceVector3Semantics > *", 0, 0, (void*)"iDynTree.GeomVector3Semantics__AngularForceVector3Semantics", 0};
static swig_type_info _swigt__p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t = {"_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t", "iDynTree::GeomVector3Semantics< iDynTree::AngularMotionVector3Semantics > *", 0, 0, (void*)"iDynTree.GeomVector3Semantics__AngularMotionVector3Semantics", 0};
static swig_type_info _swigt__p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t = {"_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t", "iDynTree::GeomVector3Semantics< iDynTree::LinearForceVector3Semantics > *", 0, 0, (void*)"iDynTree.GeomVector3Semantics__LinearForceVector3Semantics", 0};
static swig_type_info _swigt__p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t = {"_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t", "iDynTree::GeomVector3Semantics< iDynTree::LinearMotionVector3Semantics > *", 0, 0, (void*)"iDynTree.GeomVector3Semantics__LinearMotionVector3Semantics", 0};
static swig_type_info _swigt__p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t = {"_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t", "iDynTree::GeomVector3< iDynTree::AngularForceVector3 > *|iDynTree::GeomVector3< iDynTree::AngularForceVector3 >::MotionForceTbase *", 0, 0, (void*)"iDynTree.GeomVector3__AngularForceVector3", 0};
static swig_type_info _swigt__p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t = {"_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t", "iDynTree::GeomVector3< iDynTree::AngularMotionVector3 > *|iDynTree::GeomVector3< iDynTree::AngularMotionVector3 >::MotionForceTbase *", 0, 0, (void*)"iDynTree.GeomVector3__AngularMotionVector3", 0};
static swig_type_info _swigt__p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t = {"_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t", "iDynTree::GeomVector3< iDynTree::LinearForceVector3 > *|iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceTbase *", 0, 0, (void*)"iDynTree.GeomVector3__LinearForceVector3", 0};
static swig_type_info _swigt__p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t = {"_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t", "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 > *|iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceTbase *", 0, 0, (void*)"iDynTree.GeomVector3__LinearMotionVector3", 0};
static swig_type_info _swigt__p_iDynTree__Gyroscope = {"_p_iDynTree__Gyroscope", "iDynTree::Gyroscope *", 0, 0, (void*)"iDynTree.Gyroscope", 0};
static swig_type_info _swigt__p_iDynTree__HighLevel__DynamicsComputations = {"_p_iDynTree__HighLevel__DynamicsComputations", "iDynTree::HighLevel::DynamicsComputations *", 0, 0, (void*)"iDynTree.DynamicsComputations", 0};
static swig_type_info _swigt__p_iDynTree__IJoint = {"_p_iDynTree__IJoint", "iDynTree::IJoint *|iDynTree::IJointConstPtr", 0, 0, (void*)"iDynTree.IJoint", 0};
static swig_type_info _swigt__p_iDynTree__IMatrix = {"_p_iDynTree__IMatrix", "iDynTree::IMatrix *", 0, 0, (void*)"iDynTree.IMatrix", 0};
static swig_type_info _swigt__p_iDynTree__IRawMatrix = {"_p_iDynTree__IRawMatrix", "iDynTree::IRawMatrix *", 0, 0, (void*)"iDynTree.IRawMatrix", 0};
static swig_type_info _swigt__p_iDynTree__IRawVector = {"_p_iDynTree__IRawVector", "iDynTree::IRawVector *", 0, 0, (void*)"iDynTree.IRawVector", 0};
static swig_type_info _swigt__p_iDynTree__IVector = {"_p_iDynTree__IVector", "iDynTree::IVector *", 0, 0, (void*)"iDynTree.IVector", 0};
static swig_type_info _swigt__p_iDynTree__LinearForceVector3 = {"_p_iDynTree__LinearForceVector3", "iDynTree::SpatialForceVector::LinearVector3T *|iDynTree::LinearForceVector3 *|iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossAngF *|iDynTree::MotionForce_traits< iDynTree::LinearMotionVector3 >::DualSpace *|iDynTree::LinMomentum *|iDynTree::SpatialVector< iDynTree::SpatialForceVector >::LinearVector3T *|iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossLinF *|iDynTree::Force *", 0, 0, (void*)"iDynTree.LinearForceVector3", 0};
static swig_type_info _swigt__p_iDynTree__LinearForceVector3Semantics = {"_p_iDynTree__LinearForceVector3Semantics", "iDynTree::LinearForceVector3Semantics *|iDynTree::GeomVector3< iDynTree::LinearForceVector3 >::MotionForceSemanticsT *|iDynTree::DualMotionForceSemanticsT< iDynTree::LinearMotionVector3Semantics >::Type *", 0, 0, (void*)"iDynTree.LinearForceVector3Semantics", 0};
static swig_type_info _swigt__p_iDynTree__LinearMotionVector3 = {"_p_iDynTree__LinearMotionVector3", "iDynTree::SpatialMotionVector::LinearVector3T *|iDynTree::LinearMotionVector3 *|iDynTree::LinVelocity *|iDynTree::MotionVector3< iDynTree::LinearMotionVector3 >::MotionCrossAngM *|iDynTree::LinAcceleration *|iDynTree::MotionForce_traits< iDynTree::LinearForceVector3 >::DualSpace *|iDynTree::SpatialVector< iDynTree::SpatialMotionVector >::LinearVector3T *|iDynTree::MotionVector3< iDynTree::AngularMotionVector3 >::MotionCrossLinM *", 0, 0, (void*)"iDynTree.LinearMotionVector3", 0};
static swig_type_info _swigt__p_iDynTree__LinearMotionVector3Semantics = {"_p_iDynTree__LinearMotionVector3Semantics", "iDynTree::GeomVector3< iDynTree::LinearMotionVector3 >::MotionForceSemanticsT *|iDynTree::LinearMotionVector3Semantics *|iDynTree::DualMotionForceSemanticsT< iDynTree::LinearForceVector3Semantics >::Type *", 0, 0, (void*)"iDynTree.LinearMotionVector3Semantics", 0};
static swig_type_info _swigt__p_iDynTree__Link = {"_p_iDynTree__Link", "iDynTree::Link *", 0, 0, (void*)"iDynTree.Link", 0};
static swig_type_info _swigt__p_iDynTree__LinkAccArray = {"_p_iDynTree__LinkAccArray", "iDynTree::LinkAccArray *", 0, 0, (void*)"iDynTree.LinkAccArray", 0};
static swig_type_info _swigt__p_iDynTree__LinkArticulatedBodyInertias = {"_p_iDynTree__LinkArticulatedBodyInertias", "iDynTree::LinkArticulatedBodyInertias *", 0, 0, (void*)"iDynTree.LinkArticulatedBodyInertias", 0};
static swig_type_info _swigt__p_iDynTree__LinkInertias = {"_p_iDynTree__LinkInertias", "iDynTree::LinkInertias *|iDynTree::LinkCompositeRigidBodyInertias *", 0, 0, (void*)"iDynTree.LinkInertias", 0};
static swig_type_info _swigt__p_iDynTree__LinkPositions = {"_p_iDynTree__LinkPositions", "iDynTree::LinkPositions *", 0, 0, (void*)"iDynTree.LinkPositions", 0};
static swig_type_info _swigt__p_iDynTree__LinkVelArray = {"_p_iDynTree__LinkVelArray", "iDynTree::LinkVelArray *", 0, 0, (void*)"iDynTree.LinkVelArray", 0};
static swig_type_info _swigt__p_iDynTree__LinkWrenches = {"_p_iDynTree__LinkWrenches", "iDynTree::LinkWrenches *|iDynTree::LinkExternalWrenches *|iDynTree::LinkInternalWrenches *", 0, 0, (void*)"iDynTree.LinkWrenches", 0};
static swig_type_info _swigt__p_iDynTree__MatrixDynSize = {"_p_iDynTree__MatrixDynSize", "iDynTree::MatrixDynSize *", 0, 0, (void*)"iDynTree.MatrixDynSize", 0};
static swig_type_info _swigt__p_iDynTree__MatrixFixSizeT_3_3_t = {"_p_iDynTree__MatrixFixSizeT_3_3_t", "iDynTree::Matrix3x3 *|iDynTree::MatrixFixSize< 3,3 > *", 0, 0, (void*)"iDynTree.Matrix3x3", 0};
static swig_type_info _swigt__p_iDynTree__MatrixFixSizeT_4_4_t = {"_p_iDynTree__MatrixFixSizeT_4_4_t", "iDynTree::MatrixFixSize< 4,4 > *|iDynTree::Matrix4x4 *", 0, 0, (void*)"iDynTree.Matrix4x4", 0};
static swig_type_info _swigt__p_iDynTree__MatrixFixSizeT_6_10_t = {"_p_iDynTree__MatrixFixSizeT_6_10_t", "iDynTree::MatrixFixSize< 6,10 > *|iDynTree::Matrix6x10 *", 0, 0, (void*)"iDynTree.Matrix6x10", 0};
static swig_type_info _swigt__p_iDynTree__MatrixFixSizeT_6_1_t = {"_p_iDynTree__MatrixFixSizeT_6_1_t", "iDynTree::MatrixFixSize< 6,1 > *|iDynTree::Matrix6x1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iDynTree__MatrixFixSizeT_6_6_t = {"_p_iDynTree__MatrixFixSizeT_6_6_t", "iDynTree::MatrixFixSize< 6,6 > *|iDynTree::Matrix6x6 *", 0, 0, (void*)"iDynTree.Matrix6x6", 0};
static swig_type_info _swigt__p_iDynTree__Model = {"_p_iDynTree__Model", "iDynTree::Model *", 0, 0, (void*)"iDynTree.Model", 0};
static swig_type_info _swigt__p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t = {"_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t", "iDynTree::MotionVector3< iDynTree::AngularMotionVector3 > *", 0, 0, (void*)"iDynTree.MotionVector3__AngularMotionVector3", 0};
static swig_type_info _swigt__p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t = {"_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t", "iDynTree::MotionVector3< iDynTree::LinearMotionVector3 > *", 0, 0, (void*)"iDynTree.MotionVector3__LinearMotionVector3", 0};
static swig_type_info _swigt__p_iDynTree__MovableJointImplT_1_1_t = {"_p_iDynTree__MovableJointImplT_1_1_t", "iDynTree::MovableJointImpl< 1,1 > *|iDynTree::MovableJointImpl1 *", 0, 0, (void*)"iDynTree.MovableJointImpl1", 0};
static swig_type_info _swigt__p_iDynTree__MovableJointImplT_2_2_t = {"_p_iDynTree__MovableJointImplT_2_2_t", "iDynTree::MovableJointImpl< 2,2 > *|iDynTree::MovableJointImpl2 *", 0, 0, (void*)"iDynTree.MovableJointImpl2", 0};
static swig_type_info _swigt__p_iDynTree__MovableJointImplT_3_3_t = {"_p_iDynTree__MovableJointImplT_3_3_t", "iDynTree::MovableJointImpl3 *|iDynTree::MovableJointImpl< 3,3 > *", 0, 0, (void*)"iDynTree.MovableJointImpl3", 0};
static swig_type_info _swigt__p_iDynTree__MovableJointImplT_4_4_t = {"_p_iDynTree__MovableJointImplT_4_4_t", "iDynTree::MovableJointImpl4 *|iDynTree::MovableJointImpl< 4,4 > *", 0, 0, (void*)"iDynTree.MovableJointImpl4", 0};
static swig_type_info _swigt__p_iDynTree__MovableJointImplT_5_5_t = {"_p_iDynTree__MovableJointImplT_5_5_t", "iDynTree::MovableJointImpl< 5,5 > *|iDynTree::MovableJointImpl5 *", 0, 0, (void*)"iDynTree.MovableJointImpl5", 0};
static swig_type_info _swigt__p_iDynTree__MovableJointImplT_6_6_t = {"_p_iDynTree__MovableJointImplT_6_6_t", "iDynTree::MovableJointImpl< 6,6 > *|iDynTree::MovableJointImpl6 *", 0, 0, (void*)"iDynTree.MovableJointImpl6", 0};
static swig_type_info _swigt__p_iDynTree__Neighbor = {"_p_iDynTree__Neighbor", "iDynTree::Neighbor *", 0, 0, (void*)"iDynTree.Neighbor", 0};
static swig_type_info _swigt__p_iDynTree__Position = {"_p_iDynTree__Position", "iDynTree::Position *", 0, 0, (void*)"iDynTree.Position", 0};
static swig_type_info _swigt__p_iDynTree__PositionRaw = {"_p_iDynTree__PositionRaw", "iDynTree::PositionRaw *", 0, 0, (void*)"iDynTree.PositionRaw", 0};
static swig_type_info _swigt__p_iDynTree__PositionSemantics = {"_p_iDynTree__PositionSemantics", "iDynTree::PositionSemantics *", 0, 0, (void*)"iDynTree.PositionSemantics", 0};
static swig_type_info _swigt__p_iDynTree__PredictSensorsMeasurements = {"_p_iDynTree__PredictSensorsMeasurements", "iDynTree::PredictSensorsMeasurements *", 0, 0, (void*)"iDynTree.PredictSensorsMeasurements", 0};
static swig_type_info _swigt__p_iDynTree__Regressors__DynamicsRegressorGenerator = {"_p_iDynTree__Regressors__DynamicsRegressorGenerator", "iDynTree::Regressors::DynamicsRegressorGenerator *", 0, 0, (void*)"iDynTree.DynamicsRegressorGenerator", 0};
static swig_type_info _swigt__p_iDynTree__Regressors__DynamicsRegressorParameter = {"_p_iDynTree__Regressors__DynamicsRegressorParameter", "iDynTree::Regressors::DynamicsRegressorParameter *", 0, 0, (void*)"iDynTree.DynamicsRegressorParameter", 0};
static swig_type_info _swigt__p_iDynTree__Regressors__DynamicsRegressorParametersList = {"_p_iDynTree__Regressors__DynamicsRegressorParametersList", "iDynTree::Regressors::DynamicsRegressorParametersList *", 0, 0, (void*)"iDynTree.DynamicsRegressorParametersList", 0};
static swig_type_info _swigt__p_iDynTree__RevoluteJoint = {"_p_iDynTree__RevoluteJoint", "iDynTree::RevoluteJoint *", 0, 0, (void*)"iDynTree.RevoluteJoint", 0};
static swig_type_info _swigt__p_iDynTree__Rotation = {"_p_iDynTree__Rotation", "iDynTree::Rotation *", 0, 0, (void*)"iDynTree.Rotation", 0};
static swig_type_info _swigt__p_iDynTree__RotationRaw = {"_p_iDynTree__RotationRaw", "iDynTree::RotationRaw *", 0, 0, (void*)"iDynTree.RotationRaw", 0};
static swig_type_info _swigt__p_iDynTree__RotationSemantics = {"_p_iDynTree__RotationSemantics", "iDynTree::RotationSemantics *", 0, 0, (void*)"iDynTree.RotationSemantics", 0};
static swig_type_info _swigt__p_iDynTree__RotationalInertiaRaw = {"_p_iDynTree__RotationalInertiaRaw", "iDynTree::RotationalInertiaRaw *", 0, 0, (void*)"iDynTree.RotationalInertiaRaw", 0};
static swig_type_info _swigt__p_iDynTree__Sensor = {"_p_iDynTree__Sensor", "iDynTree::Sensor *", 0, 0, (void*)"iDynTree.Sensor", 0};
static swig_type_info _swigt__p_iDynTree__SensorsList = {"_p_iDynTree__SensorsList", "iDynTree::SensorsList *", 0, 0, (void*)"iDynTree.SensorsList", 0};
static swig_type_info _swigt__p_iDynTree__SensorsMeasurements = {"_p_iDynTree__SensorsMeasurements", "iDynTree::SensorsMeasurements *", 0, 0, (void*)"iDynTree.SensorsMeasurements", 0};
static swig_type_info _swigt__p_iDynTree__SixAxisForceTorqueSensor = {"_p_iDynTree__SixAxisForceTorqueSensor", "iDynTree::SixAxisForceTorqueSensor *", 0, 0, (void*)"iDynTree.SixAxisForceTorqueSensor", 0};
static swig_type_info _swigt__p_iDynTree__SpatialAcc = {"_p_iDynTree__SpatialAcc", "iDynTree::SpatialAcc *", 0, 0, (void*)"iDynTree.SpatialAcc", 0};
static swig_type_info _swigt__p_iDynTree__SpatialForceVector = {"_p_iDynTree__SpatialForceVector", "iDynTree::SpatialForceVector *", 0, 0, (void*)"iDynTree.SpatialForceVector", 0};
static swig_type_info _swigt__p_iDynTree__SpatialInertia = {"_p_iDynTree__SpatialInertia", "iDynTree::SpatialInertia *", 0, 0, (void*)"iDynTree.SpatialInertia", 0};
static swig_type_info _swigt__p_iDynTree__SpatialInertiaRaw = {"_p_iDynTree__SpatialInertiaRaw", "iDynTree::SpatialInertiaRaw *", 0, 0, (void*)"iDynTree.SpatialInertiaRaw", 0};
static swig_type_info _swigt__p_iDynTree__SpatialMomentum = {"_p_iDynTree__SpatialMomentum", "iDynTree::SpatialMomentum *", 0, 0, (void*)"iDynTree.SpatialMomentum", 0};
static swig_type_info _swigt__p_iDynTree__SpatialMotionVector = {"_p_iDynTree__SpatialMotionVector", "iDynTree::SpatialMotionVector *", 0, 0, (void*)"iDynTree.SpatialMotionVector", 0};
static swig_type_info _swigt__p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearForceVector3Semantics_iDynTree__AngularForceVector3Semantics_t = {"_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearForceVector3Semantics_iDynTree__AngularForceVector3Semantics_t", "iDynTree::SpatialVectorSemantics< iDynTree::LinearForceVector3Semantics,iDynTree::AngularForceVector3Semantics > *", 0, 0, (void*)"iDynTree.SpatialForceVectorSemanticsBase", 0};
static swig_type_info _swigt__p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearMotionVector3Semantics_iDynTree__AngularMotionVector3Semantics_t = {"_p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearMotionVector3Semantics_iDynTree__AngularMotionVector3Semantics_t", "iDynTree::SpatialVectorSemantics< iDynTree::LinearMotionVector3Semantics,iDynTree::AngularMotionVector3Semantics > *", 0, 0, (void*)"iDynTree.SpatialMotionVectorSemanticsBase", 0};
static swig_type_info _swigt__p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t = {"_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t", "iDynTree::SpatialVector< iDynTree::SpatialForceVector > *", 0, 0, (void*)"iDynTree.SpatialForceVectorBase", 0};
static swig_type_info _swigt__p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t = {"_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t", "iDynTree::SpatialVector< iDynTree::SpatialMotionVector > *", 0, 0, (void*)"iDynTree.SpatialMotionVectorBase", 0};
static swig_type_info _swigt__p_iDynTree__Transform = {"_p_iDynTree__Transform", "iDynTree::Transform *", 0, 0, (void*)"iDynTree.Transform", 0};
static swig_type_info _swigt__p_iDynTree__TransformSemantics = {"_p_iDynTree__TransformSemantics", "iDynTree::TransformSemantics *", 0, 0, (void*)"iDynTree.TransformSemantics", 0};
static swig_type_info _swigt__p_iDynTree__Traversal = {"_p_iDynTree__Traversal", "iDynTree::Traversal *", 0, 0, (void*)"iDynTree.Traversal", 0};
static swig_type_info _swigt__p_iDynTree__Twist = {"_p_iDynTree__Twist", "iDynTree::Twist *", 0, 0, (void*)"iDynTree.Twist", 0};
static swig_type_info _swigt__p_iDynTree__VectorDynSize = {"_p_iDynTree__VectorDynSize", "iDynTree::VectorDynSize *", 0, 0, (void*)"iDynTree.VectorDynSize", 0};
static swig_type_info _swigt__p_iDynTree__VectorFixSizeT_10_t = {"_p_iDynTree__VectorFixSizeT_10_t", "iDynTree::VectorFixSize< 10 > *|iDynTree::Vector10 *", 0, 0, (void*)"iDynTree.Vector10", 0};
static swig_type_info _swigt__p_iDynTree__VectorFixSizeT_3_t = {"_p_iDynTree__VectorFixSizeT_3_t", "iDynTree::Vector3 *|iDynTree::VectorFixSize< 3 > *", 0, 0, (void*)"iDynTree.Vector3", 0};
static swig_type_info _swigt__p_iDynTree__VectorFixSizeT_6_t = {"_p_iDynTree__VectorFixSizeT_6_t", "iDynTree::Vector6 *|iDynTree::VectorFixSize< 6 > *", 0, 0, (void*)"iDynTree.Vector6", 0};
static swig_type_info _swigt__p_iDynTree__Wrench = {"_p_iDynTree__Wrench", "iDynTree::Wrench *", 0, 0, (void*)"iDynTree.Wrench", 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|iDynTree::LinkIndex *|iDynTree::FrameIndex *|iDynTree::JointIndex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_iDynTree__Regressors__DynamicsRegressorParameter_t = {"_p_std__vectorT_iDynTree__Regressors__DynamicsRegressorParameter_t", "std::vector< iDynTree::Regressors::DynamicsRegressorParameter > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AngularVector3T,
  &_swigt__p_AngularVector3Type,
  &_swigt__p_DerivByAngularMotion,
  &_swigt__p_DerivByLinearMotion,
  &_swigt__p_DualSpace,
  &_swigt__p_LinearVector3T,
  &_swigt__p_LinearVector3Type,
  &_swigt__p_MotionCrossAngF,
  &_swigt__p_MotionCrossAngM,
  &_swigt__p_MotionCrossLinF,
  &_swigt__p_MotionCrossLinM,
  &_swigt__p_MotionForceSemanticsT,
  &_swigt__p_MotionForceTbase,
  &_swigt__p_SemanticsType,
  &_swigt__p_Traits,
  &_swigt__p_Type,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_iDynTree__Accelerometer,
  &_swigt__p_iDynTree__AngularForceVector3,
  &_swigt__p_iDynTree__AngularForceVector3Semantics,
  &_swigt__p_iDynTree__AngularMotionVector3,
  &_swigt__p_iDynTree__AngularMotionVector3Semantics,
  &_swigt__p_iDynTree__ArticulatedBodyInertia,
  &_swigt__p_iDynTree__Axis,
  &_swigt__p_iDynTree__ClassicalAcc,
  &_swigt__p_iDynTree__Direction,
  &_swigt__p_iDynTree__DualSpaceT_iDynTree__SpatialForceVector_t__Type,
  &_swigt__p_iDynTree__DualSpaceT_iDynTree__SpatialMotionVector_t__Type,
  &_swigt__p_iDynTree__Dummy,
  &_swigt__p_iDynTree__FixedJoint,
  &_swigt__p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t,
  &_swigt__p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t,
  &_swigt__p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t,
  &_swigt__p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t,
  &_swigt__p_iDynTree__FreeFloatingAcc,
  &_swigt__p_iDynTree__FreeFloatingPos,
  &_swigt__p_iDynTree__FreeFloatingVel,
  &_swigt__p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t,
  &_swigt__p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t,
  &_swigt__p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t,
  &_swigt__p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t,
  &_swigt__p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t,
  &_swigt__p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t,
  &_swigt__p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t,
  &_swigt__p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t,
  &_swigt__p_iDynTree__Gyroscope,
  &_swigt__p_iDynTree__HighLevel__DynamicsComputations,
  &_swigt__p_iDynTree__IJoint,
  &_swigt__p_iDynTree__IMatrix,
  &_swigt__p_iDynTree__IRawMatrix,
  &_swigt__p_iDynTree__IRawVector,
  &_swigt__p_iDynTree__IVector,
  &_swigt__p_iDynTree__LinearForceVector3,
  &_swigt__p_iDynTree__LinearForceVector3Semantics,
  &_swigt__p_iDynTree__LinearMotionVector3,
  &_swigt__p_iDynTree__LinearMotionVector3Semantics,
  &_swigt__p_iDynTree__Link,
  &_swigt__p_iDynTree__LinkAccArray,
  &_swigt__p_iDynTree__LinkArticulatedBodyInertias,
  &_swigt__p_iDynTree__LinkInertias,
  &_swigt__p_iDynTree__LinkPositions,
  &_swigt__p_iDynTree__LinkVelArray,
  &_swigt__p_iDynTree__LinkWrenches,
  &_swigt__p_iDynTree__MatrixDynSize,
  &_swigt__p_iDynTree__MatrixFixSizeT_3_3_t,
  &_swigt__p_iDynTree__MatrixFixSizeT_4_4_t,
  &_swigt__p_iDynTree__MatrixFixSizeT_6_10_t,
  &_swigt__p_iDynTree__MatrixFixSizeT_6_1_t,
  &_swigt__p_iDynTree__MatrixFixSizeT_6_6_t,
  &_swigt__p_iDynTree__Model,
  &_swigt__p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t,
  &_swigt__p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t,
  &_swigt__p_iDynTree__MovableJointImplT_1_1_t,
  &_swigt__p_iDynTree__MovableJointImplT_2_2_t,
  &_swigt__p_iDynTree__MovableJointImplT_3_3_t,
  &_swigt__p_iDynTree__MovableJointImplT_4_4_t,
  &_swigt__p_iDynTree__MovableJointImplT_5_5_t,
  &_swigt__p_iDynTree__MovableJointImplT_6_6_t,
  &_swigt__p_iDynTree__Neighbor,
  &_swigt__p_iDynTree__Position,
  &_swigt__p_iDynTree__PositionRaw,
  &_swigt__p_iDynTree__PositionSemantics,
  &_swigt__p_iDynTree__PredictSensorsMeasurements,
  &_swigt__p_iDynTree__Regressors__DynamicsRegressorGenerator,
  &_swigt__p_iDynTree__Regressors__DynamicsRegressorParameter,
  &_swigt__p_iDynTree__Regressors__DynamicsRegressorParametersList,
  &_swigt__p_iDynTree__RevoluteJoint,
  &_swigt__p_iDynTree__Rotation,
  &_swigt__p_iDynTree__RotationRaw,
  &_swigt__p_iDynTree__RotationSemantics,
  &_swigt__p_iDynTree__RotationalInertiaRaw,
  &_swigt__p_iDynTree__Sensor,
  &_swigt__p_iDynTree__SensorsList,
  &_swigt__p_iDynTree__SensorsMeasurements,
  &_swigt__p_iDynTree__SixAxisForceTorqueSensor,
  &_swigt__p_iDynTree__SpatialAcc,
  &_swigt__p_iDynTree__SpatialForceVector,
  &_swigt__p_iDynTree__SpatialInertia,
  &_swigt__p_iDynTree__SpatialInertiaRaw,
  &_swigt__p_iDynTree__SpatialMomentum,
  &_swigt__p_iDynTree__SpatialMotionVector,
  &_swigt__p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearForceVector3Semantics_iDynTree__AngularForceVector3Semantics_t,
  &_swigt__p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearMotionVector3Semantics_iDynTree__AngularMotionVector3Semantics_t,
  &_swigt__p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t,
  &_swigt__p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t,
  &_swigt__p_iDynTree__Transform,
  &_swigt__p_iDynTree__TransformSemantics,
  &_swigt__p_iDynTree__Traversal,
  &_swigt__p_iDynTree__Twist,
  &_swigt__p_iDynTree__VectorDynSize,
  &_swigt__p_iDynTree__VectorFixSizeT_10_t,
  &_swigt__p_iDynTree__VectorFixSizeT_3_t,
  &_swigt__p_iDynTree__VectorFixSizeT_6_t,
  &_swigt__p_iDynTree__Wrench,
  &_swigt__p_int,
  &_swigt__p_std__vectorT_iDynTree__Regressors__DynamicsRegressorParameter_t,
  &_swigt__p_unsigned_int,
};

static swig_cast_info _swigc__p_AngularVector3T[] = {  {&_swigt__p_AngularVector3T, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AngularVector3Type[] = {  {&_swigt__p_AngularVector3Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DerivByAngularMotion[] = {  {&_swigt__p_DerivByAngularMotion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DerivByLinearMotion[] = {  {&_swigt__p_DerivByLinearMotion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DualSpace[] = {  {&_swigt__p_DualSpace, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LinearVector3T[] = {  {&_swigt__p_LinearVector3T, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LinearVector3Type[] = {  {&_swigt__p_LinearVector3Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MotionCrossAngF[] = {  {&_swigt__p_MotionCrossAngF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MotionCrossAngM[] = {  {&_swigt__p_MotionCrossAngM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MotionCrossLinF[] = {  {&_swigt__p_MotionCrossLinF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MotionCrossLinM[] = {  {&_swigt__p_MotionCrossLinM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MotionForceSemanticsT[] = {  {&_swigt__p_MotionForceSemanticsT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MotionForceTbase[] = {  {&_swigt__p_MotionForceTbase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SemanticsType[] = {  {&_swigt__p_SemanticsType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Traits[] = {  {&_swigt__p_Traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Type[] = {  {&_swigt__p_Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Accelerometer[] = {  {&_swigt__p_iDynTree__Accelerometer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__AngularForceVector3[] = {  {&_swigt__p_iDynTree__AngularForceVector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__AngularForceVector3Semantics[] = {  {&_swigt__p_iDynTree__AngularForceVector3Semantics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__AngularMotionVector3[] = {  {&_swigt__p_iDynTree__AngularMotionVector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__AngularMotionVector3Semantics[] = {  {&_swigt__p_iDynTree__AngularMotionVector3Semantics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__ArticulatedBodyInertia[] = {  {&_swigt__p_iDynTree__ArticulatedBodyInertia, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Axis[] = {  {&_swigt__p_iDynTree__Axis, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__ClassicalAcc[] = {  {&_swigt__p_iDynTree__ClassicalAcc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Direction[] = {  {&_swigt__p_iDynTree__Direction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__DualSpaceT_iDynTree__SpatialForceVector_t__Type[] = {  {&_swigt__p_iDynTree__DualSpaceT_iDynTree__SpatialForceVector_t__Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__DualSpaceT_iDynTree__SpatialMotionVector_t__Type[] = {  {&_swigt__p_iDynTree__DualSpaceT_iDynTree__SpatialMotionVector_t__Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Dummy[] = {  {&_swigt__p_iDynTree__Dummy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__FixedJoint[] = {  {&_swigt__p_iDynTree__FixedJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t[] = {  {&_swigt__p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0, 0, 0},  {&_swigt__p_iDynTree__AngularForceVector3Semantics, _p_iDynTree__AngularForceVector3SemanticsTo_p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t[] = {  {&_swigt__p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0, 0, 0},  {&_swigt__p_iDynTree__LinearForceVector3Semantics, _p_iDynTree__LinearForceVector3SemanticsTo_p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t[] = {  {&_swigt__p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t, 0, 0, 0},  {&_swigt__p_iDynTree__AngularForceVector3, _p_iDynTree__AngularForceVector3To_p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t[] = {  {&_swigt__p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t, 0, 0, 0},  {&_swigt__p_iDynTree__LinearForceVector3, _p_iDynTree__LinearForceVector3To_p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__FreeFloatingAcc[] = {  {&_swigt__p_iDynTree__FreeFloatingAcc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__FreeFloatingPos[] = {  {&_swigt__p_iDynTree__FreeFloatingPos, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__FreeFloatingVel[] = {  {&_swigt__p_iDynTree__FreeFloatingVel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t[] = {  {&_swigt__p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0, 0, 0},  {&_swigt__p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, _p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_tTo_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0, 0},  {&_swigt__p_iDynTree__AngularForceVector3Semantics, _p_iDynTree__AngularForceVector3SemanticsTo_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t[] = {  {&_swigt__p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, 0, 0, 0},  {&_swigt__p_iDynTree__AngularMotionVector3Semantics, _p_iDynTree__AngularMotionVector3SemanticsTo_p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t[] = {  {&_swigt__p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0, 0, 0},  {&_swigt__p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, _p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_tTo_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0, 0},  {&_swigt__p_iDynTree__LinearForceVector3Semantics, _p_iDynTree__LinearForceVector3SemanticsTo_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t[] = {  {&_swigt__p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, 0, 0, 0},  {&_swigt__p_iDynTree__LinearMotionVector3Semantics, _p_iDynTree__LinearMotionVector3SemanticsTo_p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t[] = {  {&_swigt__p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 0, 0, 0},  {&_swigt__p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t, _p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_tTo_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 0, 0},  {&_swigt__p_iDynTree__AngularForceVector3, _p_iDynTree__AngularForceVector3To_p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t[] = {  {&_swigt__p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, _p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_tTo_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 0, 0},  {&_swigt__p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 0, 0, 0},  {&_swigt__p_iDynTree__AngularMotionVector3, _p_iDynTree__AngularMotionVector3To_p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t[] = {  {&_swigt__p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t, _p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_tTo_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 0, 0},  {&_swigt__p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 0, 0, 0},  {&_swigt__p_iDynTree__LinearForceVector3, _p_iDynTree__LinearForceVector3To_p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t[] = {  {&_swigt__p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 0, 0, 0},  {&_swigt__p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, _p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_tTo_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 0, 0},  {&_swigt__p_iDynTree__LinearMotionVector3, _p_iDynTree__LinearMotionVector3To_p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Gyroscope[] = {  {&_swigt__p_iDynTree__Gyroscope, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__HighLevel__DynamicsComputations[] = {  {&_swigt__p_iDynTree__HighLevel__DynamicsComputations, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__IJoint[] = {  {&_swigt__p_iDynTree__MovableJointImplT_3_3_t, _p_iDynTree__MovableJointImplT_3_3_tTo_p_iDynTree__IJoint, 0, 0},  {&_swigt__p_iDynTree__RevoluteJoint, _p_iDynTree__RevoluteJointTo_p_iDynTree__IJoint, 0, 0},  {&_swigt__p_iDynTree__MovableJointImplT_2_2_t, _p_iDynTree__MovableJointImplT_2_2_tTo_p_iDynTree__IJoint, 0, 0},  {&_swigt__p_iDynTree__IJoint, 0, 0, 0},  {&_swigt__p_iDynTree__MovableJointImplT_1_1_t, _p_iDynTree__MovableJointImplT_1_1_tTo_p_iDynTree__IJoint, 0, 0},  {&_swigt__p_iDynTree__MovableJointImplT_6_6_t, _p_iDynTree__MovableJointImplT_6_6_tTo_p_iDynTree__IJoint, 0, 0},  {&_swigt__p_iDynTree__MovableJointImplT_5_5_t, _p_iDynTree__MovableJointImplT_5_5_tTo_p_iDynTree__IJoint, 0, 0},  {&_swigt__p_iDynTree__FixedJoint, _p_iDynTree__FixedJointTo_p_iDynTree__IJoint, 0, 0},  {&_swigt__p_iDynTree__MovableJointImplT_4_4_t, _p_iDynTree__MovableJointImplT_4_4_tTo_p_iDynTree__IJoint, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__IMatrix[] = {  {&_swigt__p_iDynTree__MatrixFixSizeT_3_3_t, _p_iDynTree__MatrixFixSizeT_3_3_tTo_p_iDynTree__IMatrix, 0, 0},  {&_swigt__p_iDynTree__MatrixDynSize, _p_iDynTree__MatrixDynSizeTo_p_iDynTree__IMatrix, 0, 0},  {&_swigt__p_iDynTree__MatrixFixSizeT_6_10_t, _p_iDynTree__MatrixFixSizeT_6_10_tTo_p_iDynTree__IMatrix, 0, 0},  {&_swigt__p_iDynTree__IMatrix, 0, 0, 0},  {&_swigt__p_iDynTree__RotationalInertiaRaw, _p_iDynTree__RotationalInertiaRawTo_p_iDynTree__IMatrix, 0, 0},  {&_swigt__p_iDynTree__MatrixFixSizeT_6_6_t, _p_iDynTree__MatrixFixSizeT_6_6_tTo_p_iDynTree__IMatrix, 0, 0},  {&_swigt__p_iDynTree__IRawMatrix, _p_iDynTree__IRawMatrixTo_p_iDynTree__IMatrix, 0, 0},  {&_swigt__p_iDynTree__RotationRaw, _p_iDynTree__RotationRawTo_p_iDynTree__IMatrix, 0, 0},  {&_swigt__p_iDynTree__Rotation, _p_iDynTree__RotationTo_p_iDynTree__IMatrix, 0, 0},  {&_swigt__p_iDynTree__MatrixFixSizeT_4_4_t, _p_iDynTree__MatrixFixSizeT_4_4_tTo_p_iDynTree__IMatrix, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__IRawMatrix[] = {  {&_swigt__p_iDynTree__MatrixFixSizeT_3_3_t, _p_iDynTree__MatrixFixSizeT_3_3_tTo_p_iDynTree__IRawMatrix, 0, 0},  {&_swigt__p_iDynTree__MatrixDynSize, _p_iDynTree__MatrixDynSizeTo_p_iDynTree__IRawMatrix, 0, 0},  {&_swigt__p_iDynTree__MatrixFixSizeT_6_10_t, _p_iDynTree__MatrixFixSizeT_6_10_tTo_p_iDynTree__IRawMatrix, 0, 0},  {&_swigt__p_iDynTree__IRawMatrix, 0, 0, 0},  {&_swigt__p_iDynTree__RotationalInertiaRaw, _p_iDynTree__RotationalInertiaRawTo_p_iDynTree__IRawMatrix, 0, 0},  {&_swigt__p_iDynTree__MatrixFixSizeT_6_6_t, _p_iDynTree__MatrixFixSizeT_6_6_tTo_p_iDynTree__IRawMatrix, 0, 0},  {&_swigt__p_iDynTree__RotationRaw, _p_iDynTree__RotationRawTo_p_iDynTree__IRawMatrix, 0, 0},  {&_swigt__p_iDynTree__Rotation, _p_iDynTree__RotationTo_p_iDynTree__IRawMatrix, 0, 0},  {&_swigt__p_iDynTree__MatrixFixSizeT_4_4_t, _p_iDynTree__MatrixFixSizeT_4_4_tTo_p_iDynTree__IRawMatrix, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__IRawVector[] = {  {&_swigt__p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t, _p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_tTo_p_iDynTree__IRawVector, 0, 0},  {&_swigt__p_iDynTree__Direction, _p_iDynTree__DirectionTo_p_iDynTree__IRawVector, 0, 0},  {&_swigt__p_iDynTree__VectorFixSizeT_6_t, _p_iDynTree__VectorFixSizeT_6_tTo_p_iDynTree__IRawVector, 0, 0},  {&_swigt__p_iDynTree__ClassicalAcc, _p_iDynTree__ClassicalAccTo_p_iDynTree__IRawVector, 0, 0},  {&_swigt__p_iDynTree__VectorFixSizeT_3_t, _p_iDynTree__VectorFixSizeT_3_tTo_p_iDynTree__IRawVector, 0, 0},  {&_swigt__p_iDynTree__PositionRaw, _p_iDynTree__PositionRawTo_p_iDynTree__IRawVector, 0, 0},  {&_swigt__p_iDynTree__VectorFixSizeT_10_t, _p_iDynTree__VectorFixSizeT_10_tTo_p_iDynTree__IRawVector, 0, 0},  {&_swigt__p_iDynTree__VectorDynSize, _p_iDynTree__VectorDynSizeTo_p_iDynTree__IRawVector, 0, 0},  {&_swigt__p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, _p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_tTo_p_iDynTree__IRawVector, 0, 0},  {&_swigt__p_iDynTree__Position, _p_iDynTree__PositionTo_p_iDynTree__IRawVector, 0, 0},  {&_swigt__p_iDynTree__LinearForceVector3, _p_iDynTree__LinearForceVector3To_p_iDynTree__IRawVector, 0, 0},  {&_swigt__p_iDynTree__AngularMotionVector3, _p_iDynTree__AngularMotionVector3To_p_iDynTree__IRawVector, 0, 0},  {&_swigt__p_iDynTree__LinearMotionVector3, _p_iDynTree__LinearMotionVector3To_p_iDynTree__IRawVector, 0, 0},  {&_swigt__p_iDynTree__AngularForceVector3, _p_iDynTree__AngularForceVector3To_p_iDynTree__IRawVector, 0, 0},  {&_swigt__p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, _p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_tTo_p_iDynTree__IRawVector, 0, 0},  {&_swigt__p_iDynTree__IRawVector, 0, 0, 0},  {&_swigt__p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, _p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_tTo_p_iDynTree__IRawVector, 0, 0},  {&_swigt__p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, _p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_tTo_p_iDynTree__IRawVector, 0, 0},  {&_swigt__p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, _p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_tTo_p_iDynTree__IRawVector, 0, 0},  {&_swigt__p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t, _p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_tTo_p_iDynTree__IRawVector, 0, 0},  {&_swigt__p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, _p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_tTo_p_iDynTree__IRawVector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__IVector[] = {  {&_swigt__p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t, _p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_tTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__SpatialMotionVector, _p_iDynTree__SpatialMotionVectorTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__Direction, _p_iDynTree__DirectionTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__VectorFixSizeT_6_t, _p_iDynTree__VectorFixSizeT_6_tTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, _p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_tTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, _p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_tTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__ClassicalAcc, _p_iDynTree__ClassicalAccTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__VectorFixSizeT_3_t, _p_iDynTree__VectorFixSizeT_3_tTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__PositionRaw, _p_iDynTree__PositionRawTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__VectorFixSizeT_10_t, _p_iDynTree__VectorFixSizeT_10_tTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__VectorDynSize, _p_iDynTree__VectorDynSizeTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, _p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_tTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__Wrench, _p_iDynTree__WrenchTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__Position, _p_iDynTree__PositionTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__AngularForceVector3, _p_iDynTree__AngularForceVector3To_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__LinearMotionVector3, _p_iDynTree__LinearMotionVector3To_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__AngularMotionVector3, _p_iDynTree__AngularMotionVector3To_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__LinearForceVector3, _p_iDynTree__LinearForceVector3To_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, _p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_tTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__SpatialAcc, _p_iDynTree__SpatialAccTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__SpatialMomentum, _p_iDynTree__SpatialMomentumTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__SpatialForceVector, _p_iDynTree__SpatialForceVectorTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__IVector, 0, 0, 0},  {&_swigt__p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, _p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_tTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__IRawVector, _p_iDynTree__IRawVectorTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, _p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_tTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, _p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_tTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t, _p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_tTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__Twist, _p_iDynTree__TwistTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, _p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_tTo_p_iDynTree__IVector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__LinearForceVector3[] = {  {&_swigt__p_iDynTree__LinearForceVector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__LinearForceVector3Semantics[] = {  {&_swigt__p_iDynTree__LinearForceVector3Semantics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__LinearMotionVector3[] = {  {&_swigt__p_iDynTree__LinearMotionVector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__LinearMotionVector3Semantics[] = {  {&_swigt__p_iDynTree__LinearMotionVector3Semantics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Link[] = {  {&_swigt__p_iDynTree__Link, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__LinkAccArray[] = {  {&_swigt__p_iDynTree__LinkAccArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__LinkArticulatedBodyInertias[] = {  {&_swigt__p_iDynTree__LinkArticulatedBodyInertias, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__LinkInertias[] = {  {&_swigt__p_iDynTree__LinkInertias, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__LinkPositions[] = {  {&_swigt__p_iDynTree__LinkPositions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__LinkVelArray[] = {  {&_swigt__p_iDynTree__LinkVelArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__LinkWrenches[] = {  {&_swigt__p_iDynTree__LinkWrenches, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MatrixDynSize[] = {  {&_swigt__p_iDynTree__MatrixDynSize, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MatrixFixSizeT_3_3_t[] = {  {&_swigt__p_iDynTree__MatrixFixSizeT_3_3_t, 0, 0, 0},  {&_swigt__p_iDynTree__RotationalInertiaRaw, _p_iDynTree__RotationalInertiaRawTo_p_iDynTree__MatrixFixSizeT_3_3_t, 0, 0},  {&_swigt__p_iDynTree__RotationRaw, _p_iDynTree__RotationRawTo_p_iDynTree__MatrixFixSizeT_3_3_t, 0, 0},  {&_swigt__p_iDynTree__Rotation, _p_iDynTree__RotationTo_p_iDynTree__MatrixFixSizeT_3_3_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MatrixFixSizeT_4_4_t[] = {  {&_swigt__p_iDynTree__MatrixFixSizeT_4_4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MatrixFixSizeT_6_10_t[] = {  {&_swigt__p_iDynTree__MatrixFixSizeT_6_10_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MatrixFixSizeT_6_1_t[] = {  {&_swigt__p_iDynTree__MatrixFixSizeT_6_1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MatrixFixSizeT_6_6_t[] = {  {&_swigt__p_iDynTree__MatrixFixSizeT_6_6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Model[] = {  {&_swigt__p_iDynTree__Model, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t[] = {  {&_swigt__p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 0, 0, 0},  {&_swigt__p_iDynTree__AngularMotionVector3, _p_iDynTree__AngularMotionVector3To_p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t[] = {  {&_swigt__p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 0, 0, 0},  {&_swigt__p_iDynTree__LinearMotionVector3, _p_iDynTree__LinearMotionVector3To_p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MovableJointImplT_1_1_t[] = {  {&_swigt__p_iDynTree__RevoluteJoint, _p_iDynTree__RevoluteJointTo_p_iDynTree__MovableJointImplT_1_1_t, 0, 0},  {&_swigt__p_iDynTree__MovableJointImplT_1_1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MovableJointImplT_2_2_t[] = {  {&_swigt__p_iDynTree__MovableJointImplT_2_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MovableJointImplT_3_3_t[] = {  {&_swigt__p_iDynTree__MovableJointImplT_3_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MovableJointImplT_4_4_t[] = {  {&_swigt__p_iDynTree__MovableJointImplT_4_4_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MovableJointImplT_5_5_t[] = {  {&_swigt__p_iDynTree__MovableJointImplT_5_5_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MovableJointImplT_6_6_t[] = {  {&_swigt__p_iDynTree__MovableJointImplT_6_6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Neighbor[] = {  {&_swigt__p_iDynTree__Neighbor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Position[] = {  {&_swigt__p_iDynTree__Position, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__PositionRaw[] = {  {&_swigt__p_iDynTree__Position, _p_iDynTree__PositionTo_p_iDynTree__PositionRaw, 0, 0},  {&_swigt__p_iDynTree__PositionRaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__PositionSemantics[] = {  {&_swigt__p_iDynTree__PositionSemantics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__PredictSensorsMeasurements[] = {  {&_swigt__p_iDynTree__PredictSensorsMeasurements, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Regressors__DynamicsRegressorGenerator[] = {  {&_swigt__p_iDynTree__Regressors__DynamicsRegressorGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Regressors__DynamicsRegressorParameter[] = {  {&_swigt__p_iDynTree__Regressors__DynamicsRegressorParameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Regressors__DynamicsRegressorParametersList[] = {  {&_swigt__p_iDynTree__Regressors__DynamicsRegressorParametersList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__RevoluteJoint[] = {  {&_swigt__p_iDynTree__RevoluteJoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Rotation[] = {  {&_swigt__p_iDynTree__Rotation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__RotationRaw[] = {  {&_swigt__p_iDynTree__RotationRaw, 0, 0, 0},  {&_swigt__p_iDynTree__Rotation, _p_iDynTree__RotationTo_p_iDynTree__RotationRaw, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__RotationSemantics[] = {  {&_swigt__p_iDynTree__RotationSemantics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__RotationalInertiaRaw[] = {  {&_swigt__p_iDynTree__RotationalInertiaRaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Sensor[] = {  {&_swigt__p_iDynTree__Accelerometer, _p_iDynTree__AccelerometerTo_p_iDynTree__Sensor, 0, 0},  {&_swigt__p_iDynTree__Gyroscope, _p_iDynTree__GyroscopeTo_p_iDynTree__Sensor, 0, 0},  {&_swigt__p_iDynTree__Sensor, 0, 0, 0},  {&_swigt__p_iDynTree__SixAxisForceTorqueSensor, _p_iDynTree__SixAxisForceTorqueSensorTo_p_iDynTree__Sensor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SensorsList[] = {  {&_swigt__p_iDynTree__SensorsList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SensorsMeasurements[] = {  {&_swigt__p_iDynTree__SensorsMeasurements, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SixAxisForceTorqueSensor[] = {  {&_swigt__p_iDynTree__SixAxisForceTorqueSensor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SpatialAcc[] = {  {&_swigt__p_iDynTree__SpatialAcc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SpatialForceVector[] = {  {&_swigt__p_iDynTree__SpatialForceVector, 0, 0, 0},  {&_swigt__p_iDynTree__Wrench, _p_iDynTree__WrenchTo_p_iDynTree__SpatialForceVector, 0, 0},  {&_swigt__p_iDynTree__SpatialMomentum, _p_iDynTree__SpatialMomentumTo_p_iDynTree__SpatialForceVector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SpatialInertia[] = {  {&_swigt__p_iDynTree__SpatialInertia, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SpatialInertiaRaw[] = {  {&_swigt__p_iDynTree__SpatialInertia, _p_iDynTree__SpatialInertiaTo_p_iDynTree__SpatialInertiaRaw, 0, 0},  {&_swigt__p_iDynTree__SpatialInertiaRaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SpatialMomentum[] = {  {&_swigt__p_iDynTree__SpatialMomentum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SpatialMotionVector[] = {  {&_swigt__p_iDynTree__SpatialMotionVector, 0, 0, 0},  {&_swigt__p_iDynTree__Twist, _p_iDynTree__TwistTo_p_iDynTree__SpatialMotionVector, 0, 0},  {&_swigt__p_iDynTree__SpatialAcc, _p_iDynTree__SpatialAccTo_p_iDynTree__SpatialMotionVector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearForceVector3Semantics_iDynTree__AngularForceVector3Semantics_t[] = {  {&_swigt__p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearForceVector3Semantics_iDynTree__AngularForceVector3Semantics_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearMotionVector3Semantics_iDynTree__AngularMotionVector3Semantics_t[] = {  {&_swigt__p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearMotionVector3Semantics_iDynTree__AngularMotionVector3Semantics_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t[] = {  {&_swigt__p_iDynTree__Wrench, _p_iDynTree__WrenchTo_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0, 0},  {&_swigt__p_iDynTree__SpatialForceVector, _p_iDynTree__SpatialForceVectorTo_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0, 0},  {&_swigt__p_iDynTree__SpatialMomentum, _p_iDynTree__SpatialMomentumTo_p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0, 0},  {&_swigt__p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t[] = {  {&_swigt__p_iDynTree__SpatialMotionVector, _p_iDynTree__SpatialMotionVectorTo_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0, 0},  {&_swigt__p_iDynTree__Twist, _p_iDynTree__TwistTo_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0, 0},  {&_swigt__p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0, 0, 0},  {&_swigt__p_iDynTree__SpatialAcc, _p_iDynTree__SpatialAccTo_p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Transform[] = {  {&_swigt__p_iDynTree__Transform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__TransformSemantics[] = {  {&_swigt__p_iDynTree__TransformSemantics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Traversal[] = {  {&_swigt__p_iDynTree__Traversal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Twist[] = {  {&_swigt__p_iDynTree__Twist, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__VectorDynSize[] = {  {&_swigt__p_iDynTree__VectorDynSize, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__VectorFixSizeT_10_t[] = {  {&_swigt__p_iDynTree__VectorFixSizeT_10_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__VectorFixSizeT_3_t[] = {  {&_swigt__p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t, _p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_tTo_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__Direction, _p_iDynTree__DirectionTo_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__VectorFixSizeT_3_t, 0, 0, 0},  {&_swigt__p_iDynTree__PositionRaw, _p_iDynTree__PositionRawTo_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t, _p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_tTo_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__Position, _p_iDynTree__PositionTo_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__LinearForceVector3, _p_iDynTree__LinearForceVector3To_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__AngularMotionVector3, _p_iDynTree__AngularMotionVector3To_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__LinearMotionVector3, _p_iDynTree__LinearMotionVector3To_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__AngularForceVector3, _p_iDynTree__AngularForceVector3To_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t, _p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_tTo_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t, _p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_tTo_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t, _p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_tTo_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t, _p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_tTo_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t, _p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_tTo_p_iDynTree__VectorFixSizeT_3_t, 0, 0},  {&_swigt__p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t, _p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_tTo_p_iDynTree__VectorFixSizeT_3_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__VectorFixSizeT_6_t[] = {  {&_swigt__p_iDynTree__ClassicalAcc, _p_iDynTree__ClassicalAccTo_p_iDynTree__VectorFixSizeT_6_t, 0, 0},  {&_swigt__p_iDynTree__VectorFixSizeT_6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Wrench[] = {  {&_swigt__p_iDynTree__Wrench, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_iDynTree__Regressors__DynamicsRegressorParameter_t[] = {  {&_swigt__p_std__vectorT_iDynTree__Regressors__DynamicsRegressorParameter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AngularVector3T,
  _swigc__p_AngularVector3Type,
  _swigc__p_DerivByAngularMotion,
  _swigc__p_DerivByLinearMotion,
  _swigc__p_DualSpace,
  _swigc__p_LinearVector3T,
  _swigc__p_LinearVector3Type,
  _swigc__p_MotionCrossAngF,
  _swigc__p_MotionCrossAngM,
  _swigc__p_MotionCrossLinF,
  _swigc__p_MotionCrossLinM,
  _swigc__p_MotionForceSemanticsT,
  _swigc__p_MotionForceTbase,
  _swigc__p_SemanticsType,
  _swigc__p_Traits,
  _swigc__p_Type,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_iDynTree__Accelerometer,
  _swigc__p_iDynTree__AngularForceVector3,
  _swigc__p_iDynTree__AngularForceVector3Semantics,
  _swigc__p_iDynTree__AngularMotionVector3,
  _swigc__p_iDynTree__AngularMotionVector3Semantics,
  _swigc__p_iDynTree__ArticulatedBodyInertia,
  _swigc__p_iDynTree__Axis,
  _swigc__p_iDynTree__ClassicalAcc,
  _swigc__p_iDynTree__Direction,
  _swigc__p_iDynTree__DualSpaceT_iDynTree__SpatialForceVector_t__Type,
  _swigc__p_iDynTree__DualSpaceT_iDynTree__SpatialMotionVector_t__Type,
  _swigc__p_iDynTree__Dummy,
  _swigc__p_iDynTree__FixedJoint,
  _swigc__p_iDynTree__ForceVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t,
  _swigc__p_iDynTree__ForceVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t,
  _swigc__p_iDynTree__ForceVector3T_iDynTree__AngularForceVector3_t,
  _swigc__p_iDynTree__ForceVector3T_iDynTree__LinearForceVector3_t,
  _swigc__p_iDynTree__FreeFloatingAcc,
  _swigc__p_iDynTree__FreeFloatingPos,
  _swigc__p_iDynTree__FreeFloatingVel,
  _swigc__p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularForceVector3Semantics_t,
  _swigc__p_iDynTree__GeomVector3SemanticsT_iDynTree__AngularMotionVector3Semantics_t,
  _swigc__p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearForceVector3Semantics_t,
  _swigc__p_iDynTree__GeomVector3SemanticsT_iDynTree__LinearMotionVector3Semantics_t,
  _swigc__p_iDynTree__GeomVector3T_iDynTree__AngularForceVector3_t,
  _swigc__p_iDynTree__GeomVector3T_iDynTree__AngularMotionVector3_t,
  _swigc__p_iDynTree__GeomVector3T_iDynTree__LinearForceVector3_t,
  _swigc__p_iDynTree__GeomVector3T_iDynTree__LinearMotionVector3_t,
  _swigc__p_iDynTree__Gyroscope,
  _swigc__p_iDynTree__HighLevel__DynamicsComputations,
  _swigc__p_iDynTree__IJoint,
  _swigc__p_iDynTree__IMatrix,
  _swigc__p_iDynTree__IRawMatrix,
  _swigc__p_iDynTree__IRawVector,
  _swigc__p_iDynTree__IVector,
  _swigc__p_iDynTree__LinearForceVector3,
  _swigc__p_iDynTree__LinearForceVector3Semantics,
  _swigc__p_iDynTree__LinearMotionVector3,
  _swigc__p_iDynTree__LinearMotionVector3Semantics,
  _swigc__p_iDynTree__Link,
  _swigc__p_iDynTree__LinkAccArray,
  _swigc__p_iDynTree__LinkArticulatedBodyInertias,
  _swigc__p_iDynTree__LinkInertias,
  _swigc__p_iDynTree__LinkPositions,
  _swigc__p_iDynTree__LinkVelArray,
  _swigc__p_iDynTree__LinkWrenches,
  _swigc__p_iDynTree__MatrixDynSize,
  _swigc__p_iDynTree__MatrixFixSizeT_3_3_t,
  _swigc__p_iDynTree__MatrixFixSizeT_4_4_t,
  _swigc__p_iDynTree__MatrixFixSizeT_6_10_t,
  _swigc__p_iDynTree__MatrixFixSizeT_6_1_t,
  _swigc__p_iDynTree__MatrixFixSizeT_6_6_t,
  _swigc__p_iDynTree__Model,
  _swigc__p_iDynTree__MotionVector3T_iDynTree__AngularMotionVector3_t,
  _swigc__p_iDynTree__MotionVector3T_iDynTree__LinearMotionVector3_t,
  _swigc__p_iDynTree__MovableJointImplT_1_1_t,
  _swigc__p_iDynTree__MovableJointImplT_2_2_t,
  _swigc__p_iDynTree__MovableJointImplT_3_3_t,
  _swigc__p_iDynTree__MovableJointImplT_4_4_t,
  _swigc__p_iDynTree__MovableJointImplT_5_5_t,
  _swigc__p_iDynTree__MovableJointImplT_6_6_t,
  _swigc__p_iDynTree__Neighbor,
  _swigc__p_iDynTree__Position,
  _swigc__p_iDynTree__PositionRaw,
  _swigc__p_iDynTree__PositionSemantics,
  _swigc__p_iDynTree__PredictSensorsMeasurements,
  _swigc__p_iDynTree__Regressors__DynamicsRegressorGenerator,
  _swigc__p_iDynTree__Regressors__DynamicsRegressorParameter,
  _swigc__p_iDynTree__Regressors__DynamicsRegressorParametersList,
  _swigc__p_iDynTree__RevoluteJoint,
  _swigc__p_iDynTree__Rotation,
  _swigc__p_iDynTree__RotationRaw,
  _swigc__p_iDynTree__RotationSemantics,
  _swigc__p_iDynTree__RotationalInertiaRaw,
  _swigc__p_iDynTree__Sensor,
  _swigc__p_iDynTree__SensorsList,
  _swigc__p_iDynTree__SensorsMeasurements,
  _swigc__p_iDynTree__SixAxisForceTorqueSensor,
  _swigc__p_iDynTree__SpatialAcc,
  _swigc__p_iDynTree__SpatialForceVector,
  _swigc__p_iDynTree__SpatialInertia,
  _swigc__p_iDynTree__SpatialInertiaRaw,
  _swigc__p_iDynTree__SpatialMomentum,
  _swigc__p_iDynTree__SpatialMotionVector,
  _swigc__p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearForceVector3Semantics_iDynTree__AngularForceVector3Semantics_t,
  _swigc__p_iDynTree__SpatialVectorSemanticsT_iDynTree__LinearMotionVector3Semantics_iDynTree__AngularMotionVector3Semantics_t,
  _swigc__p_iDynTree__SpatialVectorT_iDynTree__SpatialForceVector_t,
  _swigc__p_iDynTree__SpatialVectorT_iDynTree__SpatialMotionVector_t,
  _swigc__p_iDynTree__Transform,
  _swigc__p_iDynTree__TransformSemantics,
  _swigc__p_iDynTree__Traversal,
  _swigc__p_iDynTree__Twist,
  _swigc__p_iDynTree__VectorDynSize,
  _swigc__p_iDynTree__VectorFixSizeT_10_t,
  _swigc__p_iDynTree__VectorFixSizeT_3_t,
  _swigc__p_iDynTree__VectorFixSizeT_6_t,
  _swigc__p_iDynTree__Wrench,
  _swigc__p_int,
  _swigc__p_std__vectorT_iDynTree__Regressors__DynamicsRegressorParameter_t,
  _swigc__p_unsigned_int,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


void SWIG_Matlab_LoadModule() {
  /* Only call once */
  static int moduleIsLoaded = 0;
  if (moduleIsLoaded) return;
  moduleIsLoaded = 1;

  /* Prevent unloading this file until MATLAB exits */
  mexLock();

  /* Exit function (called when unloaded) */
  mexAtExit(SWIG_Matlab_ExitFcn);

  /* Load dependent modules and initialize */

SWIG_InitializeModule(0);

}


const char* swigConstantName_(int con_id) {
  switch (con_id) {
  case 0: return "SIX_AXIS_FORCE_TORQUE";
  case 1: return "ACCELEROMETER";
  case 2: return "GYROSCOPE";
  case 3: return "LINK_PARAM";
  case 4: return "SENSOR_FT_PARAM";
  case 5: return "LINK_MASS";
  case 6: return "LINK_FIRST_MOMENT_OF_MASS_X";
  case 7: return "LINK_FIRST_MOMENT_OF_MASS_Y";
  case 8: return "LINK_FIRST_MOMENT_OF_MASS_Z";
  case 9: return "LINK_MOMENT_OF_INERTIA_XX";
  case 10: return "LINK_MOMENT_OF_INERTIA_XY";
  case 11: return "LINK_MOMENT_OF_INERTIA_XZ";
  case 12: return "LINK_MOMENT_OF_INERTIA_YY";
  case 13: return "LINK_MOMENT_OF_INERTIA_YZ";
  case 14: return "LINK_MOMENT_OF_INERTIA_ZZ";
  case 15: return "SENSOR_FT_OFFSET_FORCE_X";
  case 16: return "SENSOR_FT_OFFSET_FORCE_Y";
  case 17: return "SENSOR_FT_OFFSET_FORCE_Z";
  case 18: return "SENSOR_FT_OFFSET_TORQUE_X";
  case 19: return "SENSOR_FT_OFFSET_TORQUE_Y";
  case 20: return "SENSOR_FT_OFFSET_TORQUE_Z";
  default: return 0;
  }
}

int swigConstantName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc!=1 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv)!=1) {
    SWIG_Error(SWIG_RuntimeError, "This mex file should only be called from inside the .m files generated by SWIG. The input should be the constant ID.");
    return 1;
  }
  if (resc!=1) {
    SWIG_Error(SWIG_RuntimeError, "The function should have one output.");
    return 1;
  }
  int con_id = (int)mxGetScalar(*argv);
  const char* s = swigConstantName_(con_id);
  if (s==0) {
    SWIG_Error(SWIG_RuntimeError, "No such constant ID.");
    return 1;
  }
  *resv = mxCreateString(s);
  return 0;
}

extern "C"
int swigConstant(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (--argc < 0 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv)!=1) {
    SWIG_Error(SWIG_RuntimeError, "This function should only be called from inside the .m files generated by SWIG. First input should be the constant ID .");
    return 1;
  }
  int con_id = (int)mxGetScalar(*argv++);
  switch (con_id) {
  case 0: *resv = SWIG_Matlab_SetConstant(module_ns,"SIX_AXIS_FORCE_TORQUE",SWIG_From_int(static_cast< int >(iDynTree::SIX_AXIS_FORCE_TORQUE)));; break;
  case 1: *resv = SWIG_Matlab_SetConstant(module_ns,"ACCELEROMETER",SWIG_From_int(static_cast< int >(iDynTree::ACCELEROMETER)));; break;
  case 2: *resv = SWIG_Matlab_SetConstant(module_ns,"GYROSCOPE",SWIG_From_int(static_cast< int >(iDynTree::GYROSCOPE)));; break;
  case 3: *resv = SWIG_Matlab_SetConstant(module_ns,"LINK_PARAM",SWIG_From_int(static_cast< int >(iDynTree::Regressors::LINK_PARAM)));; break;
  case 4: *resv = SWIG_Matlab_SetConstant(module_ns,"SENSOR_FT_PARAM",SWIG_From_int(static_cast< int >(iDynTree::Regressors::SENSOR_FT_PARAM)));; break;
  case 5: *resv = SWIG_Matlab_SetConstant(module_ns,"LINK_MASS",SWIG_From_int(static_cast< int >(iDynTree::Regressors::LINK_MASS)));; break;
  case 6: *resv = SWIG_Matlab_SetConstant(module_ns,"LINK_FIRST_MOMENT_OF_MASS_X",SWIG_From_int(static_cast< int >(iDynTree::Regressors::LINK_FIRST_MOMENT_OF_MASS_X)));; break;
  case 7: *resv = SWIG_Matlab_SetConstant(module_ns,"LINK_FIRST_MOMENT_OF_MASS_Y",SWIG_From_int(static_cast< int >(iDynTree::Regressors::LINK_FIRST_MOMENT_OF_MASS_Y)));; break;
  case 8: *resv = SWIG_Matlab_SetConstant(module_ns,"LINK_FIRST_MOMENT_OF_MASS_Z",SWIG_From_int(static_cast< int >(iDynTree::Regressors::LINK_FIRST_MOMENT_OF_MASS_Z)));; break;
  case 9: *resv = SWIG_Matlab_SetConstant(module_ns,"LINK_MOMENT_OF_INERTIA_XX",SWIG_From_int(static_cast< int >(iDynTree::Regressors::LINK_MOMENT_OF_INERTIA_XX)));; break;
  case 10: *resv = SWIG_Matlab_SetConstant(module_ns,"LINK_MOMENT_OF_INERTIA_XY",SWIG_From_int(static_cast< int >(iDynTree::Regressors::LINK_MOMENT_OF_INERTIA_XY)));; break;
  case 11: *resv = SWIG_Matlab_SetConstant(module_ns,"LINK_MOMENT_OF_INERTIA_XZ",SWIG_From_int(static_cast< int >(iDynTree::Regressors::LINK_MOMENT_OF_INERTIA_XZ)));; break;
  case 12: *resv = SWIG_Matlab_SetConstant(module_ns,"LINK_MOMENT_OF_INERTIA_YY",SWIG_From_int(static_cast< int >(iDynTree::Regressors::LINK_MOMENT_OF_INERTIA_YY)));; break;
  case 13: *resv = SWIG_Matlab_SetConstant(module_ns,"LINK_MOMENT_OF_INERTIA_YZ",SWIG_From_int(static_cast< int >(iDynTree::Regressors::LINK_MOMENT_OF_INERTIA_YZ)));; break;
  case 14: *resv = SWIG_Matlab_SetConstant(module_ns,"LINK_MOMENT_OF_INERTIA_ZZ",SWIG_From_int(static_cast< int >(iDynTree::Regressors::LINK_MOMENT_OF_INERTIA_ZZ)));; break;
  case 15: *resv = SWIG_Matlab_SetConstant(module_ns,"SENSOR_FT_OFFSET_FORCE_X",SWIG_From_int(static_cast< int >(iDynTree::Regressors::SENSOR_FT_OFFSET_FORCE_X)));; break;
  case 16: *resv = SWIG_Matlab_SetConstant(module_ns,"SENSOR_FT_OFFSET_FORCE_Y",SWIG_From_int(static_cast< int >(iDynTree::Regressors::SENSOR_FT_OFFSET_FORCE_Y)));; break;
  case 17: *resv = SWIG_Matlab_SetConstant(module_ns,"SENSOR_FT_OFFSET_FORCE_Z",SWIG_From_int(static_cast< int >(iDynTree::Regressors::SENSOR_FT_OFFSET_FORCE_Z)));; break;
  case 18: *resv = SWIG_Matlab_SetConstant(module_ns,"SENSOR_FT_OFFSET_TORQUE_X",SWIG_From_int(static_cast< int >(iDynTree::Regressors::SENSOR_FT_OFFSET_TORQUE_X)));; break;
  case 19: *resv = SWIG_Matlab_SetConstant(module_ns,"SENSOR_FT_OFFSET_TORQUE_Y",SWIG_From_int(static_cast< int >(iDynTree::Regressors::SENSOR_FT_OFFSET_TORQUE_Y)));; break;
  case 20: *resv = SWIG_Matlab_SetConstant(module_ns,"SENSOR_FT_OFFSET_TORQUE_Z",SWIG_From_int(static_cast< int >(iDynTree::Regressors::SENSOR_FT_OFFSET_TORQUE_Z)));; break;
  default:
    SWIG_Error(SWIG_RuntimeError, "No such constant.");
    return 1;
  }
  return 0;
}

const char* swigFunctionName_(int fcn_id) {
  switch(fcn_id) {
  case 0: return "swigConstant";
  case 1: return "swigFunctionName";
  case 2: return "swigConstantName";
  case 3: return "swigThis";
  case 4: return "swigTouch";
  case 5: return "delete_IMatrix";
  case 6: return "IMatrix_paren";
  case 7: return "IMatrix_getVal";
  case 8: return "IMatrix_setVal";
  case 9: return "IMatrix_rows";
  case 10: return "IMatrix_cols";
  case 11: return "delete_IRawMatrix";
  case 12: return "IRawMatrix_data";
  case 13: return "delete_IVector";
  case 14: return "IVector_paren";
  case 15: return "IVector_getVal";
  case 16: return "IVector_setVal";
  case 17: return "IVector_size";
  case 18: return "delete_IRawVector";
  case 19: return "IRawVector_data";
  case 20: return "new_MatrixDynSize";
  case 21: return "delete_MatrixDynSize";
  case 22: return "MatrixDynSize_paren";
  case 23: return "MatrixDynSize_getVal";
  case 24: return "MatrixDynSize_setVal";
  case 25: return "MatrixDynSize_rows";
  case 26: return "MatrixDynSize_cols";
  case 27: return "MatrixDynSize_data";
  case 28: return "MatrixDynSize_zero";
  case 29: return "MatrixDynSize_resize";
  case 30: return "MatrixDynSize_fillRowMajorBuffer";
  case 31: return "MatrixDynSize_fillColMajorBuffer";
  case 32: return "MatrixDynSize_toString";
  case 33: return "MatrixDynSize_display";
  case 34: return "MatrixDynSize_toMatlab";
  case 35: return "new_VectorDynSize";
  case 36: return "delete_VectorDynSize";
  case 37: return "VectorDynSize_paren";
  case 38: return "VectorDynSize_getVal";
  case 39: return "VectorDynSize_setVal";
  case 40: return "VectorDynSize_size";
  case 41: return "VectorDynSize_data";
  case 42: return "VectorDynSize_zero";
  case 43: return "VectorDynSize_resize";
  case 44: return "VectorDynSize_fillBuffer";
  case 45: return "VectorDynSize_toString";
  case 46: return "VectorDynSize_display";
  case 47: return "VectorDynSize_toMatlab";
  case 48: return "VectorDynSize_fromMatlab";
  case 49: return "new_Matrix3x3";
  case 50: return "delete_Matrix3x3";
  case 51: return "Matrix3x3_paren";
  case 52: return "Matrix3x3_getVal";
  case 53: return "Matrix3x3_setVal";
  case 54: return "Matrix3x3_rows";
  case 55: return "Matrix3x3_cols";
  case 56: return "Matrix3x3_data";
  case 57: return "Matrix3x3_zero";
  case 58: return "Matrix3x3_fillRowMajorBuffer";
  case 59: return "Matrix3x3_fillColMajorBuffer";
  case 60: return "Matrix3x3_toString";
  case 61: return "Matrix3x3_display";
  case 62: return "Matrix3x3_toMatlab";
  case 63: return "Matrix3x3_fromMatlab";
  case 64: return "new_Matrix4x4";
  case 65: return "delete_Matrix4x4";
  case 66: return "Matrix4x4_paren";
  case 67: return "Matrix4x4_getVal";
  case 68: return "Matrix4x4_setVal";
  case 69: return "Matrix4x4_rows";
  case 70: return "Matrix4x4_cols";
  case 71: return "Matrix4x4_data";
  case 72: return "Matrix4x4_zero";
  case 73: return "Matrix4x4_fillRowMajorBuffer";
  case 74: return "Matrix4x4_fillColMajorBuffer";
  case 75: return "Matrix4x4_toString";
  case 76: return "Matrix4x4_display";
  case 77: return "Matrix4x4_toMatlab";
  case 78: return "Matrix4x4_fromMatlab";
  case 79: return "new_Matrix6x6";
  case 80: return "delete_Matrix6x6";
  case 81: return "Matrix6x6_paren";
  case 82: return "Matrix6x6_getVal";
  case 83: return "Matrix6x6_setVal";
  case 84: return "Matrix6x6_rows";
  case 85: return "Matrix6x6_cols";
  case 86: return "Matrix6x6_data";
  case 87: return "Matrix6x6_zero";
  case 88: return "Matrix6x6_fillRowMajorBuffer";
  case 89: return "Matrix6x6_fillColMajorBuffer";
  case 90: return "Matrix6x6_toString";
  case 91: return "Matrix6x6_display";
  case 92: return "Matrix6x6_toMatlab";
  case 93: return "Matrix6x6_fromMatlab";
  case 94: return "new_Matrix6x10";
  case 95: return "delete_Matrix6x10";
  case 96: return "Matrix6x10_paren";
  case 97: return "Matrix6x10_getVal";
  case 98: return "Matrix6x10_setVal";
  case 99: return "Matrix6x10_rows";
  case 100: return "Matrix6x10_cols";
  case 101: return "Matrix6x10_data";
  case 102: return "Matrix6x10_zero";
  case 103: return "Matrix6x10_fillRowMajorBuffer";
  case 104: return "Matrix6x10_fillColMajorBuffer";
  case 105: return "Matrix6x10_toString";
  case 106: return "Matrix6x10_display";
  case 107: return "Matrix6x10_toMatlab";
  case 108: return "Matrix6x10_fromMatlab";
  case 109: return "new_Vector3";
  case 110: return "delete_Vector3";
  case 111: return "Vector3_paren";
  case 112: return "Vector3_getVal";
  case 113: return "Vector3_setVal";
  case 114: return "Vector3_size";
  case 115: return "Vector3_data";
  case 116: return "Vector3_zero";
  case 117: return "Vector3_fillBuffer";
  case 118: return "Vector3_toString";
  case 119: return "Vector3_display";
  case 120: return "Vector3_toMatlab";
  case 121: return "Vector3_fromMatlab";
  case 122: return "new_Vector6";
  case 123: return "delete_Vector6";
  case 124: return "Vector6_paren";
  case 125: return "Vector6_getVal";
  case 126: return "Vector6_setVal";
  case 127: return "Vector6_size";
  case 128: return "Vector6_data";
  case 129: return "Vector6_zero";
  case 130: return "Vector6_fillBuffer";
  case 131: return "Vector6_toString";
  case 132: return "Vector6_display";
  case 133: return "Vector6_toMatlab";
  case 134: return "Vector6_fromMatlab";
  case 135: return "new_Vector10";
  case 136: return "delete_Vector10";
  case 137: return "Vector10_paren";
  case 138: return "Vector10_getVal";
  case 139: return "Vector10_setVal";
  case 140: return "Vector10_size";
  case 141: return "Vector10_data";
  case 142: return "Vector10_zero";
  case 143: return "Vector10_fillBuffer";
  case 144: return "Vector10_toString";
  case 145: return "Vector10_display";
  case 146: return "Vector10_toMatlab";
  case 147: return "Vector10_fromMatlab";
  case 148: return "new_PositionRaw";
  case 149: return "delete_PositionRaw";
  case 150: return "PositionRaw_changePoint";
  case 151: return "PositionRaw_changeRefPoint";
  case 152: return "PositionRaw_compose";
  case 153: return "PositionRaw_inverse";
  case 154: return "PositionRaw_changePointOf";
  case 155: return "PositionRaw_toString";
  case 156: return "PositionRaw_display";
  case 157: return "new_PositionSemantics";
  case 158: return "delete_PositionSemantics";
  case 159: return "PositionSemantics_getPoint";
  case 160: return "PositionSemantics_getBody";
  case 161: return "PositionSemantics_getReferencePoint";
  case 162: return "PositionSemantics_getRefBody";
  case 163: return "PositionSemantics_getCoordinateFrame";
  case 164: return "PositionSemantics_setPoint";
  case 165: return "PositionSemantics_setBody";
  case 166: return "PositionSemantics_setReferencePoint";
  case 167: return "PositionSemantics_setRefBody";
  case 168: return "PositionSemantics_setCoordinateFrame";
  case 169: return "PositionSemantics_changePoint";
  case 170: return "PositionSemantics_changeRefPoint";
  case 171: return "PositionSemantics_compose";
  case 172: return "PositionSemantics_inverse";
  case 173: return "PositionSemantics_toString";
  case 174: return "PositionSemantics_display";
  case 175: return "new_Position";
  case 176: return "delete_Position";
  case 177: return "Position_getSemantics";
  case 178: return "Position_changePoint";
  case 179: return "Position_changeRefPoint";
  case 180: return "Position_changeCoordinateFrame";
  case 181: return "Position_compose";
  case 182: return "Position_inverse";
  case 183: return "Position_changePointOf";
  case 184: return "Position_plus";
  case 185: return "Position_minus";
  case 186: return "Position_uminus";
  case 187: return "Position_mtimes";
  case 188: return "Position_toString";
  case 189: return "Position_display";
  case 190: return "Position_Zero";
  case 191: return "new_GeomVector3Semantics__LinearMotionVector3Semantics";
  case 192: return "delete_GeomVector3Semantics__LinearMotionVector3Semantics";
  case 193: return "GeomVector3Semantics__LinearMotionVector3Semantics_getBody";
  case 194: return "GeomVector3Semantics__LinearMotionVector3Semantics_getRefBody";
  case 195: return "GeomVector3Semantics__LinearMotionVector3Semantics_getCoordinateFrame";
  case 196: return "GeomVector3Semantics__LinearMotionVector3Semantics_isUnknown";
  case 197: return "GeomVector3Semantics__LinearMotionVector3Semantics_changeCoordFrame";
  case 198: return "GeomVector3Semantics__LinearMotionVector3Semantics_compose";
  case 199: return "GeomVector3Semantics__LinearMotionVector3Semantics_inverse";
  case 200: return "GeomVector3Semantics__LinearMotionVector3Semantics_dot";
  case 201: return "new_GeomVector3Semantics__AngularMotionVector3Semantics";
  case 202: return "delete_GeomVector3Semantics__AngularMotionVector3Semantics";
  case 203: return "GeomVector3Semantics__AngularMotionVector3Semantics_getBody";
  case 204: return "GeomVector3Semantics__AngularMotionVector3Semantics_getRefBody";
  case 205: return "GeomVector3Semantics__AngularMotionVector3Semantics_getCoordinateFrame";
  case 206: return "GeomVector3Semantics__AngularMotionVector3Semantics_isUnknown";
  case 207: return "GeomVector3Semantics__AngularMotionVector3Semantics_changeCoordFrame";
  case 208: return "GeomVector3Semantics__AngularMotionVector3Semantics_compose";
  case 209: return "GeomVector3Semantics__AngularMotionVector3Semantics_inverse";
  case 210: return "GeomVector3Semantics__AngularMotionVector3Semantics_dot";
  case 211: return "new_GeomVector3Semantics__LinearForceVector3Semantics";
  case 212: return "delete_GeomVector3Semantics__LinearForceVector3Semantics";
  case 213: return "GeomVector3Semantics__LinearForceVector3Semantics_getBody";
  case 214: return "GeomVector3Semantics__LinearForceVector3Semantics_getRefBody";
  case 215: return "GeomVector3Semantics__LinearForceVector3Semantics_getCoordinateFrame";
  case 216: return "GeomVector3Semantics__LinearForceVector3Semantics_isUnknown";
  case 217: return "GeomVector3Semantics__LinearForceVector3Semantics_changeCoordFrame";
  case 218: return "GeomVector3Semantics__LinearForceVector3Semantics_compose";
  case 219: return "GeomVector3Semantics__LinearForceVector3Semantics_inverse";
  case 220: return "GeomVector3Semantics__LinearForceVector3Semantics_dot";
  case 221: return "new_GeomVector3Semantics__AngularForceVector3Semantics";
  case 222: return "delete_GeomVector3Semantics__AngularForceVector3Semantics";
  case 223: return "GeomVector3Semantics__AngularForceVector3Semantics_getBody";
  case 224: return "GeomVector3Semantics__AngularForceVector3Semantics_getRefBody";
  case 225: return "GeomVector3Semantics__AngularForceVector3Semantics_getCoordinateFrame";
  case 226: return "GeomVector3Semantics__AngularForceVector3Semantics_isUnknown";
  case 227: return "GeomVector3Semantics__AngularForceVector3Semantics_changeCoordFrame";
  case 228: return "GeomVector3Semantics__AngularForceVector3Semantics_compose";
  case 229: return "GeomVector3Semantics__AngularForceVector3Semantics_inverse";
  case 230: return "GeomVector3Semantics__AngularForceVector3Semantics_dot";
  case 231: return "GeomVector3__LinearMotionVector3_semantics_get";
  case 232: return "GeomVector3__LinearMotionVector3_semantics_set";
  case 233: return "new_GeomVector3__LinearMotionVector3";
  case 234: return "delete_GeomVector3__LinearMotionVector3";
  case 235: return "GeomVector3__LinearMotionVector3_setSemantics";
  case 236: return "GeomVector3__LinearMotionVector3_changeCoordFrame";
  case 237: return "GeomVector3__LinearMotionVector3_compose";
  case 238: return "GeomVector3__LinearMotionVector3_inverse";
  case 239: return "GeomVector3__LinearMotionVector3_dot";
  case 240: return "GeomVector3__LinearMotionVector3_plus";
  case 241: return "GeomVector3__LinearMotionVector3_minus";
  case 242: return "GeomVector3__LinearMotionVector3_uminus";
  case 243: return "GeomVector3__AngularMotionVector3_semantics_get";
  case 244: return "GeomVector3__AngularMotionVector3_semantics_set";
  case 245: return "new_GeomVector3__AngularMotionVector3";
  case 246: return "delete_GeomVector3__AngularMotionVector3";
  case 247: return "GeomVector3__AngularMotionVector3_setSemantics";
  case 248: return "GeomVector3__AngularMotionVector3_changeCoordFrame";
  case 249: return "GeomVector3__AngularMotionVector3_compose";
  case 250: return "GeomVector3__AngularMotionVector3_inverse";
  case 251: return "GeomVector3__AngularMotionVector3_dot";
  case 252: return "GeomVector3__AngularMotionVector3_plus";
  case 253: return "GeomVector3__AngularMotionVector3_minus";
  case 254: return "GeomVector3__AngularMotionVector3_uminus";
  case 255: return "GeomVector3__LinearForceVector3_semantics_get";
  case 256: return "GeomVector3__LinearForceVector3_semantics_set";
  case 257: return "new_GeomVector3__LinearForceVector3";
  case 258: return "delete_GeomVector3__LinearForceVector3";
  case 259: return "GeomVector3__LinearForceVector3_setSemantics";
  case 260: return "GeomVector3__LinearForceVector3_changeCoordFrame";
  case 261: return "GeomVector3__LinearForceVector3_compose";
  case 262: return "GeomVector3__LinearForceVector3_inverse";
  case 263: return "GeomVector3__LinearForceVector3_dot";
  case 264: return "GeomVector3__LinearForceVector3_plus";
  case 265: return "GeomVector3__LinearForceVector3_minus";
  case 266: return "GeomVector3__LinearForceVector3_uminus";
  case 267: return "GeomVector3__AngularForceVector3_semantics_get";
  case 268: return "GeomVector3__AngularForceVector3_semantics_set";
  case 269: return "new_GeomVector3__AngularForceVector3";
  case 270: return "delete_GeomVector3__AngularForceVector3";
  case 271: return "GeomVector3__AngularForceVector3_setSemantics";
  case 272: return "GeomVector3__AngularForceVector3_changeCoordFrame";
  case 273: return "GeomVector3__AngularForceVector3_compose";
  case 274: return "GeomVector3__AngularForceVector3_inverse";
  case 275: return "GeomVector3__AngularForceVector3_dot";
  case 276: return "GeomVector3__AngularForceVector3_plus";
  case 277: return "GeomVector3__AngularForceVector3_minus";
  case 278: return "GeomVector3__AngularForceVector3_uminus";
  case 279: return "new_ForceVector3Semantics__LinearForceVector3Semantics";
  case 280: return "delete_ForceVector3Semantics__LinearForceVector3Semantics";
  case 281: return "ForceVector3Semantics__LinearForceVector3Semantics_compose";
  case 282: return "ForceVector3Semantics__LinearForceVector3Semantics_inverse";
  case 283: return "new_ForceVector3Semantics__AngularForceVector3Semantics";
  case 284: return "delete_ForceVector3Semantics__AngularForceVector3Semantics";
  case 285: return "ForceVector3Semantics__AngularForceVector3Semantics_compose";
  case 286: return "ForceVector3Semantics__AngularForceVector3Semantics_inverse";
  case 287: return "new_MotionVector3__LinearMotionVector3";
  case 288: return "delete_MotionVector3__LinearMotionVector3";
  case 289: return "MotionVector3__LinearMotionVector3_cross";
  case 290: return "new_MotionVector3__AngularMotionVector3";
  case 291: return "delete_MotionVector3__AngularMotionVector3";
  case 292: return "MotionVector3__AngularMotionVector3_cross";
  case 293: return "new_ForceVector3__LinearForceVector3";
  case 294: return "delete_ForceVector3__LinearForceVector3";
  case 295: return "new_ForceVector3__AngularForceVector3";
  case 296: return "delete_ForceVector3__AngularForceVector3";
  case 297: return "new_LinearMotionVector3Semantics";
  case 298: return "delete_LinearMotionVector3Semantics";
  case 299: return "LinearMotionVector3Semantics_changePoint";
  case 300: return "LinearMotionVector3Semantics_compose";
  case 301: return "new_LinearMotionVector3";
  case 302: return "delete_LinearMotionVector3";
  case 303: return "LinearMotionVector3_changePoint";
  case 304: return "new_AngularMotionVector3Semantics";
  case 305: return "delete_AngularMotionVector3Semantics";
  case 306: return "new_AngularMotionVector3";
  case 307: return "delete_AngularMotionVector3";
  case 308: return "AngularMotionVector3_exp";
  case 309: return "new_LinearForceVector3Semantics";
  case 310: return "delete_LinearForceVector3Semantics";
  case 311: return "new_LinearForceVector3";
  case 312: return "delete_LinearForceVector3";
  case 313: return "new_AngularForceVector3Semantics";
  case 314: return "delete_AngularForceVector3Semantics";
  case 315: return "AngularForceVector3Semantics_changePoint";
  case 316: return "AngularForceVector3Semantics_compose";
  case 317: return "new_AngularForceVector3";
  case 318: return "delete_AngularForceVector3";
  case 319: return "AngularForceVector3_changePoint";
  case 320: return "new_SpatialMotionVectorSemanticsBase";
  case 321: return "delete_SpatialMotionVectorSemanticsBase";
  case 322: return "SpatialMotionVectorSemanticsBase_check_linear2angularConsistency";
  case 323: return "SpatialMotionVectorSemanticsBase_toString";
  case 324: return "SpatialMotionVectorSemanticsBase_display";
  case 325: return "new_SpatialForceVectorSemanticsBase";
  case 326: return "delete_SpatialForceVectorSemanticsBase";
  case 327: return "SpatialForceVectorSemanticsBase_check_linear2angularConsistency";
  case 328: return "SpatialForceVectorSemanticsBase_toString";
  case 329: return "SpatialForceVectorSemanticsBase_display";
  case 330: return "new_SpatialMotionVectorBase";
  case 331: return "delete_SpatialMotionVectorBase";
  case 332: return "SpatialMotionVectorBase_getLinearVec3";
  case 333: return "SpatialMotionVectorBase_getAngularVec3";
  case 334: return "SpatialMotionVectorBase_setLinearVec3";
  case 335: return "SpatialMotionVectorBase_setAngularVec3";
  case 336: return "SpatialMotionVectorBase_paren";
  case 337: return "SpatialMotionVectorBase_getVal";
  case 338: return "SpatialMotionVectorBase_setVal";
  case 339: return "SpatialMotionVectorBase_size";
  case 340: return "SpatialMotionVectorBase_zero";
  case 341: return "SpatialMotionVectorBase_changePoint";
  case 342: return "SpatialMotionVectorBase_changeCoordFrame";
  case 343: return "SpatialMotionVectorBase_compose";
  case 344: return "SpatialMotionVectorBase_inverse";
  case 345: return "SpatialMotionVectorBase_dot";
  case 346: return "SpatialMotionVectorBase_plus";
  case 347: return "SpatialMotionVectorBase_minus";
  case 348: return "SpatialMotionVectorBase_uminus";
  case 349: return "SpatialMotionVectorBase_Zero";
  case 350: return "SpatialMotionVectorBase_asVector";
  case 351: return "SpatialMotionVectorBase_toString";
  case 352: return "SpatialMotionVectorBase_display";
  case 353: return "SpatialMotionVectorBase_toMatlab";
  case 354: return "SpatialMotionVectorBase_fromMatlab";
  case 355: return "new_SpatialForceVectorBase";
  case 356: return "delete_SpatialForceVectorBase";
  case 357: return "SpatialForceVectorBase_getLinearVec3";
  case 358: return "SpatialForceVectorBase_getAngularVec3";
  case 359: return "SpatialForceVectorBase_setLinearVec3";
  case 360: return "SpatialForceVectorBase_setAngularVec3";
  case 361: return "SpatialForceVectorBase_paren";
  case 362: return "SpatialForceVectorBase_getVal";
  case 363: return "SpatialForceVectorBase_setVal";
  case 364: return "SpatialForceVectorBase_size";
  case 365: return "SpatialForceVectorBase_zero";
  case 366: return "SpatialForceVectorBase_changePoint";
  case 367: return "SpatialForceVectorBase_changeCoordFrame";
  case 368: return "SpatialForceVectorBase_compose";
  case 369: return "SpatialForceVectorBase_inverse";
  case 370: return "SpatialForceVectorBase_dot";
  case 371: return "SpatialForceVectorBase_plus";
  case 372: return "SpatialForceVectorBase_minus";
  case 373: return "SpatialForceVectorBase_uminus";
  case 374: return "SpatialForceVectorBase_Zero";
  case 375: return "SpatialForceVectorBase_asVector";
  case 376: return "SpatialForceVectorBase_toString";
  case 377: return "SpatialForceVectorBase_display";
  case 378: return "SpatialForceVectorBase_toMatlab";
  case 379: return "SpatialForceVectorBase_fromMatlab";
  case 380: return "new_Dummy";
  case 381: return "delete_Dummy";
  case 382: return "new_SpatialMotionVector";
  case 383: return "delete_SpatialMotionVector";
  case 384: return "SpatialMotionVector_mtimes";
  case 385: return "SpatialMotionVector_cross";
  case 386: return "SpatialMotionVector_exp";
  case 387: return "new_SpatialForceVector";
  case 388: return "SpatialForceVector_mtimes";
  case 389: return "delete_SpatialForceVector";
  case 390: return "new_Twist";
  case 391: return "delete_Twist";
  case 392: return "Twist_plus";
  case 393: return "Twist_minus";
  case 394: return "Twist_uminus";
  case 395: return "Twist_mtimes";
  case 396: return "new_Wrench";
  case 397: return "delete_Wrench";
  case 398: return "Wrench_plus";
  case 399: return "Wrench_minus";
  case 400: return "Wrench_uminus";
  case 401: return "new_SpatialMomentum";
  case 402: return "delete_SpatialMomentum";
  case 403: return "SpatialMomentum_plus";
  case 404: return "SpatialMomentum_minus";
  case 405: return "SpatialMomentum_uminus";
  case 406: return "new_SpatialAcc";
  case 407: return "delete_SpatialAcc";
  case 408: return "SpatialAcc_plus";
  case 409: return "SpatialAcc_minus";
  case 410: return "SpatialAcc_uminus";
  case 411: return "new_ClassicalAcc";
  case 412: return "delete_ClassicalAcc";
  case 413: return "ClassicalAcc_changeCoordFrame";
  case 414: return "ClassicalAcc_Zero";
  case 415: return "new_Direction";
  case 416: return "delete_Direction";
  case 417: return "Direction_Normalize";
  case 418: return "Direction_toString";
  case 419: return "Direction_display";
  case 420: return "Direction_Default";
  case 421: return "new_Axis";
  case 422: return "delete_Axis";
  case 423: return "Axis_getDirection";
  case 424: return "Axis_getOrigin";
  case 425: return "Axis_setDirection";
  case 426: return "Axis_setOrigin";
  case 427: return "Axis_getRotationTransform";
  case 428: return "Axis_getRotationTwist";
  case 429: return "Axis_getRotationSpatialAcc";
  case 430: return "Axis_toString";
  case 431: return "Axis_display";
  case 432: return "new_RotationalInertiaRaw";
  case 433: return "delete_RotationalInertiaRaw";
  case 434: return "new_SpatialInertiaRaw";
  case 435: return "delete_SpatialInertiaRaw";
  case 436: return "SpatialInertiaRaw_fromRotationalInertiaWrtCenterOfMass";
  case 437: return "SpatialInertiaRaw_getMass";
  case 438: return "SpatialInertiaRaw_getCenterOfMass";
  case 439: return "SpatialInertiaRaw_getRotationalInertiaWrtFrameOrigin";
  case 440: return "SpatialInertiaRaw_getRotationalInertiaWrtCenterOfMass";
  case 441: return "SpatialInertiaRaw_combine";
  case 442: return "SpatialInertiaRaw_multiply";
  case 443: return "SpatialInertiaRaw_zero";
  case 444: return "new_SpatialInertia";
  case 445: return "delete_SpatialInertia";
  case 446: return "SpatialInertia_combine";
  case 447: return "SpatialInertia_asMatrix";
  case 448: return "SpatialInertia_plus";
  case 449: return "SpatialInertia_mtimes";
  case 450: return "SpatialInertia_Zero";
  case 451: return "new_ArticulatedBodyInertia";
  case 452: return "delete_ArticulatedBodyInertia";
  case 453: return "ArticulatedBodyInertia_getLinearLinearSubmatrix";
  case 454: return "ArticulatedBodyInertia_getLinearAngularSubmatrix";
  case 455: return "ArticulatedBodyInertia_getAngularAngularSubmatrix";
  case 456: return "ArticulatedBodyInertia_combine";
  case 457: return "ArticulatedBodyInertia_applyInverse";
  case 458: return "ArticulatedBodyInertia_asMatrix";
  case 459: return "ArticulatedBodyInertia_plus";
  case 460: return "ArticulatedBodyInertia_minus";
  case 461: return "ArticulatedBodyInertia_mtimes";
  case 462: return "ArticulatedBodyInertia_zero";
  case 463: return "ArticulatedBodyInertia_ABADyadHelper";
  case 464: return "new_RotationRaw";
  case 465: return "delete_RotationRaw";
  case 466: return "RotationRaw_changeOrientFrame";
  case 467: return "RotationRaw_changeRefOrientFrame";
  case 468: return "RotationRaw_compose";
  case 469: return "RotationRaw_inverse2";
  case 470: return "RotationRaw_changeCoordFrameOf";
  case 471: return "RotationRaw_RotX";
  case 472: return "RotationRaw_RotY";
  case 473: return "RotationRaw_RotZ";
  case 474: return "RotationRaw_RPY";
  case 475: return "RotationRaw_Identity";
  case 476: return "RotationRaw_toString";
  case 477: return "RotationRaw_display";
  case 478: return "new_RotationSemantics";
  case 479: return "delete_RotationSemantics";
  case 480: return "RotationSemantics_getOrientationFrame";
  case 481: return "RotationSemantics_getBody";
  case 482: return "RotationSemantics_getReferenceOrientationFrame";
  case 483: return "RotationSemantics_getRefBody";
  case 484: return "RotationSemantics_getCoordinateFrame";
  case 485: return "RotationSemantics_setOrientationFrame";
  case 486: return "RotationSemantics_setBody";
  case 487: return "RotationSemantics_setReferenceOrientationFrame";
  case 488: return "RotationSemantics_setRefBody";
  case 489: return "RotationSemantics_setCoordinateFrame";
  case 490: return "RotationSemantics_changeOrientFrame";
  case 491: return "RotationSemantics_changeRefOrientFrame";
  case 492: return "RotationSemantics_changeCoordFrameOf";
  case 493: return "RotationSemantics_compose";
  case 494: return "RotationSemantics_inverse2";
  case 495: return "RotationSemantics_toString";
  case 496: return "RotationSemantics_display";
  case 497: return "new_Rotation";
  case 498: return "delete_Rotation";
  case 499: return "Rotation_getSemantics";
  case 500: return "Rotation_changeOrientFrame";
  case 501: return "Rotation_changeRefOrientFrame";
  case 502: return "Rotation_changeCoordinateFrame";
  case 503: return "Rotation_compose";
  case 504: return "Rotation_inverse2";
  case 505: return "Rotation_changeCoordFrameOf";
  case 506: return "Rotation_inverse";
  case 507: return "Rotation_mtimes";
  case 508: return "Rotation_log";
  case 509: return "Rotation_getRPY";
  case 510: return "Rotation_RotX";
  case 511: return "Rotation_RotY";
  case 512: return "Rotation_RotZ";
  case 513: return "Rotation_RotAxis";
  case 514: return "Rotation_RPY";
  case 515: return "Rotation_Identity";
  case 516: return "Rotation_toString";
  case 517: return "Rotation_display";
  case 518: return "new_TransformSemantics";
  case 519: return "delete_TransformSemantics";
  case 520: return "TransformSemantics_getRotationSemantics";
  case 521: return "TransformSemantics_getPositionSemantics";
  case 522: return "TransformSemantics_setRotationSemantics";
  case 523: return "TransformSemantics_setPositionSemantics";
  case 524: return "TransformSemantics_toString";
  case 525: return "TransformSemantics_display";
  case 526: return "new_Transform";
  case 527: return "delete_Transform";
  case 528: return "Transform_getSemantics";
  case 529: return "Transform_getRotation";
  case 530: return "Transform_getPosition";
  case 531: return "Transform_setRotation";
  case 532: return "Transform_setPosition";
  case 533: return "Transform_compose";
  case 534: return "Transform_inverse2";
  case 535: return "Transform_inverse";
  case 536: return "Transform_mtimes";
  case 537: return "Transform_Identity";
  case 538: return "Transform_asHomogeneousTransform";
  case 539: return "Transform_asAdjointTransform";
  case 540: return "Transform_asAdjointTransformWrench";
  case 541: return "Transform_log";
  case 542: return "Transform_toString";
  case 543: return "Transform_display";
  case 544: return "LINK_INVALID_INDEX_get";
  case 545: return "LINK_INVALID_INDEX_set";
  case 546: return "LINK_INVALID_NAME_get";
  case 547: return "LINK_INVALID_NAME_set";
  case 548: return "JOINT_INVALID_INDEX_get";
  case 549: return "JOINT_INVALID_INDEX_set";
  case 550: return "JOINT_INVALID_NAME_get";
  case 551: return "JOINT_INVALID_NAME_set";
  case 552: return "FRAME_INVALID_INDEX_get";
  case 553: return "FRAME_INVALID_INDEX_set";
  case 554: return "FRAME_INVALID_NAME_get";
  case 555: return "FRAME_INVALID_NAME_set";
  case 556: return "new_LinkPositions";
  case 557: return "LinkPositions_resize";
  case 558: return "LinkPositions_paren";
  case 559: return "delete_LinkPositions";
  case 560: return "new_LinkWrenches";
  case 561: return "LinkWrenches_resize";
  case 562: return "LinkWrenches_paren";
  case 563: return "delete_LinkWrenches";
  case 564: return "new_LinkInertias";
  case 565: return "LinkInertias_resize";
  case 566: return "LinkInertias_paren";
  case 567: return "delete_LinkInertias";
  case 568: return "new_LinkArticulatedBodyInertias";
  case 569: return "LinkArticulatedBodyInertias_resize";
  case 570: return "LinkArticulatedBodyInertias_paren";
  case 571: return "delete_LinkArticulatedBodyInertias";
  case 572: return "new_LinkVelArray";
  case 573: return "LinkVelArray_resize";
  case 574: return "LinkVelArray_paren";
  case 575: return "delete_LinkVelArray";
  case 576: return "new_LinkAccArray";
  case 577: return "LinkAccArray_resize";
  case 578: return "LinkAccArray_paren";
  case 579: return "LinkAccArray_getNrOfLinks";
  case 580: return "delete_LinkAccArray";
  case 581: return "new_Link";
  case 582: return "delete_Link";
  case 583: return "Link_setInertia";
  case 584: return "Link_getInertia";
  case 585: return "Link_setIndex";
  case 586: return "Link_getIndex";
  case 587: return "delete_IJoint";
  case 588: return "IJoint_clone";
  case 589: return "IJoint_getNrOfPosCoords";
  case 590: return "IJoint_getNrOfDOFs";
  case 591: return "IJoint_setAttachedLinks";
  case 592: return "IJoint_setRestTransform";
  case 593: return "IJoint_getFirstAttachedLink";
  case 594: return "IJoint_getSecondAttachedLink";
  case 595: return "IJoint_getRestTransform";
  case 596: return "IJoint_getTransform";
  case 597: return "IJoint_getMotionSubspaceVector";
  case 598: return "IJoint_computeChildPosVelAcc";
  case 599: return "IJoint_computeChildVelAcc";
  case 600: return "IJoint_computeJointTorque";
  case 601: return "IJoint_setIndex";
  case 602: return "IJoint_getIndex";
  case 603: return "IJoint_setPosCoordsOffset";
  case 604: return "IJoint_getPosCoordsOffset";
  case 605: return "IJoint_setDOFsOffset";
  case 606: return "IJoint_getDOFsOffset";
  case 607: return "new_FixedJoint";
  case 608: return "delete_FixedJoint";
  case 609: return "FixedJoint_clone";
  case 610: return "FixedJoint_getNrOfPosCoords";
  case 611: return "FixedJoint_getNrOfDOFs";
  case 612: return "FixedJoint_setAttachedLinks";
  case 613: return "FixedJoint_setRestTransform";
  case 614: return "FixedJoint_getFirstAttachedLink";
  case 615: return "FixedJoint_getSecondAttachedLink";
  case 616: return "FixedJoint_getRestTransform";
  case 617: return "FixedJoint_getTransform";
  case 618: return "FixedJoint_getMotionSubspaceVector";
  case 619: return "FixedJoint_computeChildPosVelAcc";
  case 620: return "FixedJoint_computeChildVelAcc";
  case 621: return "FixedJoint_computeJointTorque";
  case 622: return "FixedJoint_setIndex";
  case 623: return "FixedJoint_getIndex";
  case 624: return "FixedJoint_setPosCoordsOffset";
  case 625: return "FixedJoint_getPosCoordsOffset";
  case 626: return "FixedJoint_setDOFsOffset";
  case 627: return "FixedJoint_getDOFsOffset";
  case 628: return "delete_MovableJointImpl1";
  case 629: return "MovableJointImpl1_getNrOfPosCoords";
  case 630: return "MovableJointImpl1_getNrOfDOFs";
  case 631: return "MovableJointImpl1_setIndex";
  case 632: return "MovableJointImpl1_getIndex";
  case 633: return "MovableJointImpl1_setPosCoordsOffset";
  case 634: return "MovableJointImpl1_getPosCoordsOffset";
  case 635: return "MovableJointImpl1_setDOFsOffset";
  case 636: return "MovableJointImpl1_getDOFsOffset";
  case 637: return "delete_MovableJointImpl2";
  case 638: return "MovableJointImpl2_getNrOfPosCoords";
  case 639: return "MovableJointImpl2_getNrOfDOFs";
  case 640: return "MovableJointImpl2_setIndex";
  case 641: return "MovableJointImpl2_getIndex";
  case 642: return "MovableJointImpl2_setPosCoordsOffset";
  case 643: return "MovableJointImpl2_getPosCoordsOffset";
  case 644: return "MovableJointImpl2_setDOFsOffset";
  case 645: return "MovableJointImpl2_getDOFsOffset";
  case 646: return "delete_MovableJointImpl3";
  case 647: return "MovableJointImpl3_getNrOfPosCoords";
  case 648: return "MovableJointImpl3_getNrOfDOFs";
  case 649: return "MovableJointImpl3_setIndex";
  case 650: return "MovableJointImpl3_getIndex";
  case 651: return "MovableJointImpl3_setPosCoordsOffset";
  case 652: return "MovableJointImpl3_getPosCoordsOffset";
  case 653: return "MovableJointImpl3_setDOFsOffset";
  case 654: return "MovableJointImpl3_getDOFsOffset";
  case 655: return "delete_MovableJointImpl4";
  case 656: return "MovableJointImpl4_getNrOfPosCoords";
  case 657: return "MovableJointImpl4_getNrOfDOFs";
  case 658: return "MovableJointImpl4_setIndex";
  case 659: return "MovableJointImpl4_getIndex";
  case 660: return "MovableJointImpl4_setPosCoordsOffset";
  case 661: return "MovableJointImpl4_getPosCoordsOffset";
  case 662: return "MovableJointImpl4_setDOFsOffset";
  case 663: return "MovableJointImpl4_getDOFsOffset";
  case 664: return "delete_MovableJointImpl5";
  case 665: return "MovableJointImpl5_getNrOfPosCoords";
  case 666: return "MovableJointImpl5_getNrOfDOFs";
  case 667: return "MovableJointImpl5_setIndex";
  case 668: return "MovableJointImpl5_getIndex";
  case 669: return "MovableJointImpl5_setPosCoordsOffset";
  case 670: return "MovableJointImpl5_getPosCoordsOffset";
  case 671: return "MovableJointImpl5_setDOFsOffset";
  case 672: return "MovableJointImpl5_getDOFsOffset";
  case 673: return "delete_MovableJointImpl6";
  case 674: return "MovableJointImpl6_getNrOfPosCoords";
  case 675: return "MovableJointImpl6_getNrOfDOFs";
  case 676: return "MovableJointImpl6_setIndex";
  case 677: return "MovableJointImpl6_getIndex";
  case 678: return "MovableJointImpl6_setPosCoordsOffset";
  case 679: return "MovableJointImpl6_getPosCoordsOffset";
  case 680: return "MovableJointImpl6_setDOFsOffset";
  case 681: return "MovableJointImpl6_getDOFsOffset";
  case 682: return "new_RevoluteJoint";
  case 683: return "delete_RevoluteJoint";
  case 684: return "RevoluteJoint_clone";
  case 685: return "RevoluteJoint_setAttachedLinks";
  case 686: return "RevoluteJoint_setRestTransform";
  case 687: return "RevoluteJoint_setAxis";
  case 688: return "RevoluteJoint_getFirstAttachedLink";
  case 689: return "RevoluteJoint_getSecondAttachedLink";
  case 690: return "RevoluteJoint_getAxis";
  case 691: return "RevoluteJoint_getRestTransform";
  case 692: return "RevoluteJoint_getTransform";
  case 693: return "RevoluteJoint_getMotionSubspaceVector";
  case 694: return "RevoluteJoint_computeChildPosVelAcc";
  case 695: return "RevoluteJoint_computeChildVelAcc";
  case 696: return "RevoluteJoint_computeJointTorque";
  case 697: return "new_Traversal";
  case 698: return "delete_Traversal";
  case 699: return "Traversal_getNrOfVisitedLinks";
  case 700: return "Traversal_getLink";
  case 701: return "Traversal_getParentLink";
  case 702: return "Traversal_getParentJoint";
  case 703: return "Traversal_getParentLinkFromLinkIndex";
  case 704: return "Traversal_getParentJointFromLinkIndex";
  case 705: return "Traversal_reset";
  case 706: return "Traversal_setTraversalElement";
  case 707: return "Neighbor_neighborLink_get";
  case 708: return "Neighbor_neighborLink_set";
  case 709: return "Neighbor_neighborJoint_get";
  case 710: return "Neighbor_neighborJoint_set";
  case 711: return "new_Neighbor";
  case 712: return "delete_Neighbor";
  case 713: return "new_Model";
  case 714: return "delete_Model";
  case 715: return "Model_getNrOfLinks";
  case 716: return "Model_getLinkName";
  case 717: return "Model_getLinkIndex";
  case 718: return "Model_addLink";
  case 719: return "Model_getNrOfJoints";
  case 720: return "Model_getJointName";
  case 721: return "Model_getJointIndex";
  case 722: return "Model_addJoint";
  case 723: return "Model_getNrOfPosCoords";
  case 724: return "Model_getNrOfDOFs";
  case 725: return "Model_getNrOfFrames";
  case 726: return "Model_addAdditionalFrameToLink";
  case 727: return "Model_getFrameName";
  case 728: return "Model_getFrameIndex";
  case 729: return "Model_getFrameTransform";
  case 730: return "Model_getFrameLink";
  case 731: return "Model_getNrOfNeighbors";
  case 732: return "Model_getNeighbor";
  case 733: return "Model_setDefaultBaseLink";
  case 734: return "Model_getDefaultBaseLink";
  case 735: return "Model_computeFullTreeTraversal";
  case 736: return "_wrap_modelFromURDF";
  case 737: return "_wrap_modelFromURDFString";
  case 738: return "NR_OF_SENSOR_TYPES_get";
  case 739: return "delete_Sensor";
  case 740: return "Sensor_getName";
  case 741: return "Sensor_getSensorType";
  case 742: return "Sensor_getParent";
  case 743: return "Sensor_getParentIndex";
  case 744: return "Sensor_isValid";
  case 745: return "Sensor_setName";
  case 746: return "Sensor_setParent";
  case 747: return "Sensor_setParentIndex";
  case 748: return "Sensor_clone";
  case 749: return "new_SensorsList";
  case 750: return "delete_SensorsList";
  case 751: return "SensorsList_addSensor";
  case 752: return "SensorsList_getNrOfSensors";
  case 753: return "SensorsList_getSensorIndex";
  case 754: return "SensorsList_getSensor";
  case 755: return "SensorsList_getSixAxisForceTorqueSensor";
  case 756: return "new_SensorsMeasurements";
  case 757: return "delete_SensorsMeasurements";
  case 758: return "SensorsMeasurements_setNrOfSensors";
  case 759: return "SensorsMeasurements_getNrOfSensors";
  case 760: return "SensorsMeasurements_setMeasurement";
  case 761: return "SensorsMeasurements_getMeasurement";
  case 762: return "new_SixAxisForceTorqueSensor";
  case 763: return "delete_SixAxisForceTorqueSensor";
  case 764: return "SixAxisForceTorqueSensor_setName";
  case 765: return "SixAxisForceTorqueSensor_setFirstLinkSensorTransform";
  case 766: return "SixAxisForceTorqueSensor_setSecondLinkSensorTransform";
  case 767: return "SixAxisForceTorqueSensor_getFirstLinkIndex";
  case 768: return "SixAxisForceTorqueSensor_getSecondLinkIndex";
  case 769: return "SixAxisForceTorqueSensor_setFirstLinkName";
  case 770: return "SixAxisForceTorqueSensor_setSecondLinkName";
  case 771: return "SixAxisForceTorqueSensor_getFirstLinkName";
  case 772: return "SixAxisForceTorqueSensor_getSecondLinkName";
  case 773: return "SixAxisForceTorqueSensor_setParent";
  case 774: return "SixAxisForceTorqueSensor_setParentIndex";
  case 775: return "SixAxisForceTorqueSensor_setAppliedWrenchLink";
  case 776: return "SixAxisForceTorqueSensor_getName";
  case 777: return "SixAxisForceTorqueSensor_getSensorType";
  case 778: return "SixAxisForceTorqueSensor_getParent";
  case 779: return "SixAxisForceTorqueSensor_getParentIndex";
  case 780: return "SixAxisForceTorqueSensor_isValid";
  case 781: return "SixAxisForceTorqueSensor_clone";
  case 782: return "SixAxisForceTorqueSensor_getAppliedWrenchLink";
  case 783: return "SixAxisForceTorqueSensor_isLinkAttachedToSensor";
  case 784: return "SixAxisForceTorqueSensor_getLinkSensorTransform";
  case 785: return "SixAxisForceTorqueSensor_getWrenchAppliedOnLink";
  case 786: return "new_Accelerometer";
  case 787: return "delete_Accelerometer";
  case 788: return "Accelerometer_setName";
  case 789: return "Accelerometer_setLinkSensorTransform";
  case 790: return "Accelerometer_getParentLinkIndex";
  case 791: return "Accelerometer_setParentLinkName";
  case 792: return "Accelerometer_getParentLinkName";
  case 793: return "Accelerometer_setParent";
  case 794: return "Accelerometer_setParentIndex";
  case 795: return "Accelerometer_getLinkIndex";
  case 796: return "Accelerometer_getName";
  case 797: return "Accelerometer_getSensorType";
  case 798: return "Accelerometer_getParent";
  case 799: return "Accelerometer_getParentIndex";
  case 800: return "Accelerometer_isValid";
  case 801: return "Accelerometer_clone";
  case 802: return "Accelerometer_getLinkSensorTransform";
  case 803: return "Accelerometer_predictMeasurement";
  case 804: return "new_Gyroscope";
  case 805: return "delete_Gyroscope";
  case 806: return "Gyroscope_setName";
  case 807: return "Gyroscope_setLinkSensorTransform";
  case 808: return "Gyroscope_setParent";
  case 809: return "Gyroscope_setParentIndex";
  case 810: return "Gyroscope_getName";
  case 811: return "Gyroscope_getSensorType";
  case 812: return "Gyroscope_getParent";
  case 813: return "Gyroscope_getParentIndex";
  case 814: return "Gyroscope_isValid";
  case 815: return "Gyroscope_clone";
  case 816: return "Gyroscope_getLinkSensorTransform";
  case 817: return "Gyroscope_predictMeasurement";
  case 818: return "new_PredictSensorsMeasurements";
  case 819: return "PredictSensorsMeasurements_makePrediction";
  case 820: return "delete_PredictSensorsMeasurements";
  case 821: return "_wrap_sensorsListFromURDF";
  case 822: return "_wrap_sensorsListFromURDFString";
  case 823: return "DynamicsRegressorParameter_category_get";
  case 824: return "DynamicsRegressorParameter_category_set";
  case 825: return "DynamicsRegressorParameter_elemIndex_get";
  case 826: return "DynamicsRegressorParameter_elemIndex_set";
  case 827: return "DynamicsRegressorParameter_type_get";
  case 828: return "DynamicsRegressorParameter_type_set";
  case 829: return "DynamicsRegressorParameter_lt";
  case 830: return "DynamicsRegressorParameter_eq";
  case 831: return "DynamicsRegressorParameter_ne";
  case 832: return "new_DynamicsRegressorParameter";
  case 833: return "delete_DynamicsRegressorParameter";
  case 834: return "DynamicsRegressorParametersList_parameters_get";
  case 835: return "DynamicsRegressorParametersList_parameters_set";
  case 836: return "DynamicsRegressorParametersList_getDescriptionOfParameter";
  case 837: return "DynamicsRegressorParametersList_addParam";
  case 838: return "DynamicsRegressorParametersList_addList";
  case 839: return "DynamicsRegressorParametersList_findParam";
  case 840: return "DynamicsRegressorParametersList_getNrOfParameters";
  case 841: return "new_DynamicsRegressorParametersList";
  case 842: return "delete_DynamicsRegressorParametersList";
  case 843: return "new_DynamicsRegressorGenerator";
  case 844: return "delete_DynamicsRegressorGenerator";
  case 845: return "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile";
  case 846: return "DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString";
  case 847: return "DynamicsRegressorGenerator_loadRegressorStructureFromFile";
  case 848: return "DynamicsRegressorGenerator_loadRegressorStructureFromString";
  case 849: return "DynamicsRegressorGenerator_isValid";
  case 850: return "DynamicsRegressorGenerator_getNrOfParameters";
  case 851: return "DynamicsRegressorGenerator_getNrOfOutputs";
  case 852: return "DynamicsRegressorGenerator_getNrOfDegreesOfFreedom";
  case 853: return "DynamicsRegressorGenerator_getDescriptionOfParameter";
  case 854: return "DynamicsRegressorGenerator_getDescriptionOfParameters";
  case 855: return "DynamicsRegressorGenerator_getDescriptionOfOutput";
  case 856: return "DynamicsRegressorGenerator_getDescriptionOfOutputs";
  case 857: return "DynamicsRegressorGenerator_getDescriptionOfDegreeOfFreedom";
  case 858: return "DynamicsRegressorGenerator_getDescriptionOfDegreesOfFreedom";
  case 859: return "DynamicsRegressorGenerator_getBaseLinkName";
  case 860: return "DynamicsRegressorGenerator_getSensorsModel";
  case 861: return "DynamicsRegressorGenerator_setRobotState";
  case 862: return "DynamicsRegressorGenerator_getSensorsMeasurements";
  case 863: return "DynamicsRegressorGenerator_computeRegressor";
  case 864: return "DynamicsRegressorGenerator_getModelParameters";
  case 865: return "DynamicsRegressorGenerator_computeFloatingBaseIdentifiableSubspace";
  case 866: return "DynamicsRegressorGenerator_computeFixedBaseIdentifiableSubspace";
  case 867: return "new_DynamicsComputations";
  case 868: return "delete_DynamicsComputations";
  case 869: return "DynamicsComputations_loadRobotModelFromFile";
  case 870: return "DynamicsComputations_loadRobotModelFromString";
  case 871: return "DynamicsComputations_isValid";
  case 872: return "DynamicsComputations_getNrOfDegreesOfFreedom";
  case 873: return "DynamicsComputations_getDescriptionOfDegreeOfFreedom";
  case 874: return "DynamicsComputations_getDescriptionOfDegreesOfFreedom";
  case 875: return "DynamicsComputations_getNrOfLinks";
  case 876: return "DynamicsComputations_getNrOfFrames";
  case 877: return "DynamicsComputations_getFloatingBase";
  case 878: return "DynamicsComputations_setFloatingBase";
  case 879: return "DynamicsComputations_setRobotState";
  case 880: return "DynamicsComputations_getWorldBaseTransform";
  case 881: return "DynamicsComputations_getBaseTwist";
  case 882: return "DynamicsComputations_getJointPos";
  case 883: return "DynamicsComputations_getJointVel";
  case 884: return "DynamicsComputations_getFrameIndex";
  case 885: return "DynamicsComputations_getFrameName";
  case 886: return "DynamicsComputations_getWorldTransform";
  case 887: return "DynamicsComputations_getRelativeTransform";
  case 888: return "DynamicsComputations_getFrameTwist";
  case 889: return "DynamicsComputations_getFrameTwistInWorldOrient";
  case 890: return "DynamicsComputations_getFrameProperSpatialAcceleration";
  case 891: return "DynamicsComputations_getLinkIndex";
  case 892: return "DynamicsComputations_getLinkInertia";
  case 893: return "DynamicsComputations_inverseDynamics";
  case 894: return "DynamicsComputations_getFrameJacobian";
  case 895: return "DynamicsComputations_getDynamicsRegressor";
  case 896: return "DynamicsComputations_getModelDynamicsParameters";
  default: return 0;
  }
}

int swigFunctionName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc!=1 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv)!=1) {
    SWIG_Error(SWIG_RuntimeError, "This mex file should only be called from inside the .m files generated by SWIG. The input should be the function ID.");
    return 1;
  }
  if (resc!=1) {
    SWIG_Error(SWIG_RuntimeError, "The function should have one output.");
    return 1;
  }
  int fcn_id = (int)mxGetScalar(*argv);
  const char* s = swigFunctionName_(fcn_id);
  if (s==0) {
    SWIG_Error(SWIG_RuntimeError, "No such function ID.");
    return 1;
  }
  *resv = mxCreateString(s);
  return 0;
}

int swigThis(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc!=1 || resc!=1) {
    SWIG_Error(SWIG_RuntimeError, "swigThis should have one input and one output.");
    return 1;
  }
  SwigPtr* swig_ptr = SWIG_Matlab_getSwigPtr(argv[0]);
  if (!swig_ptr) {
    SWIG_Error(SWIG_RuntimeError, "The argument should be a SWIG class.");
    return 1;
  }
  resv[0] = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
  *(uint64_T *)mxGetData(resv[0]) = (uint64_T)swig_ptr->ptr;
  return 0;
}

int swigTouch(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc!=0 || resc!=0) {
    SWIG_Error(SWIG_RuntimeError, "swigTouch should have no inputs or outputs.");
    return 1;
  }
  return 0;
}

extern "C"
void mexFunction(int resc, mxArray *resv[], int argc, const mxArray *argv[]) {
  /* Initialize module if first call */
  SWIG_Matlab_LoadModule();

  if (--argc < 0 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv)!=1)
    mexErrMsgTxt("This mex file should only be called from inside the .m files generated by SWIG. First input should be the function ID .");
  int fcn_id = (int)mxGetScalar(*argv++);
  int flag=0;
  switch (fcn_id) {
  case 0: flag=swigConstant(resc,resv,argc,(mxArray**)(argv)); break;
  case 1: flag=swigFunctionName(resc,resv,argc,(mxArray**)(argv)); break;
  case 2: flag=swigConstantName(resc,resv,argc,(mxArray**)(argv)); break;
  case 3: flag=swigThis(resc,resv,argc,(mxArray**)(argv)); break;
  case 4: flag=swigTouch(resc,resv,argc,(mxArray**)(argv)); break;
  case 5: flag=_wrap_delete_IMatrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 6: flag=_wrap_IMatrix_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 7: flag=_wrap_IMatrix_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 8: flag=_wrap_IMatrix_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 9: flag=_wrap_IMatrix_rows(resc,resv,argc,(mxArray**)(argv)); break;
  case 10: flag=_wrap_IMatrix_cols(resc,resv,argc,(mxArray**)(argv)); break;
  case 11: flag=_wrap_delete_IRawMatrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 12: flag=_wrap_IRawMatrix_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 13: flag=_wrap_delete_IVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 14: flag=_wrap_IVector_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 15: flag=_wrap_IVector_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 16: flag=_wrap_IVector_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 17: flag=_wrap_IVector_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 18: flag=_wrap_delete_IRawVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 19: flag=_wrap_IRawVector_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 20: flag=_wrap_new_MatrixDynSize(resc,resv,argc,(mxArray**)(argv)); break;
  case 21: flag=_wrap_delete_MatrixDynSize(resc,resv,argc,(mxArray**)(argv)); break;
  case 22: flag=_wrap_MatrixDynSize_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 23: flag=_wrap_MatrixDynSize_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 24: flag=_wrap_MatrixDynSize_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 25: flag=_wrap_MatrixDynSize_rows(resc,resv,argc,(mxArray**)(argv)); break;
  case 26: flag=_wrap_MatrixDynSize_cols(resc,resv,argc,(mxArray**)(argv)); break;
  case 27: flag=_wrap_MatrixDynSize_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 28: flag=_wrap_MatrixDynSize_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 29: flag=_wrap_MatrixDynSize_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 30: flag=_wrap_MatrixDynSize_fillRowMajorBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 31: flag=_wrap_MatrixDynSize_fillColMajorBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 32: flag=_wrap_MatrixDynSize_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 33: flag=_wrap_MatrixDynSize_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 34: flag=_wrap_MatrixDynSize_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 35: flag=_wrap_new_VectorDynSize(resc,resv,argc,(mxArray**)(argv)); break;
  case 36: flag=_wrap_delete_VectorDynSize(resc,resv,argc,(mxArray**)(argv)); break;
  case 37: flag=_wrap_VectorDynSize_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 38: flag=_wrap_VectorDynSize_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 39: flag=_wrap_VectorDynSize_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 40: flag=_wrap_VectorDynSize_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 41: flag=_wrap_VectorDynSize_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 42: flag=_wrap_VectorDynSize_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 43: flag=_wrap_VectorDynSize_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 44: flag=_wrap_VectorDynSize_fillBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 45: flag=_wrap_VectorDynSize_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 46: flag=_wrap_VectorDynSize_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 47: flag=_wrap_VectorDynSize_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 48: flag=_wrap_VectorDynSize_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 49: flag=_wrap_new_Matrix3x3(resc,resv,argc,(mxArray**)(argv)); break;
  case 50: flag=_wrap_delete_Matrix3x3(resc,resv,argc,(mxArray**)(argv)); break;
  case 51: flag=_wrap_Matrix3x3_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 52: flag=_wrap_Matrix3x3_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 53: flag=_wrap_Matrix3x3_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 54: flag=_wrap_Matrix3x3_rows(resc,resv,argc,(mxArray**)(argv)); break;
  case 55: flag=_wrap_Matrix3x3_cols(resc,resv,argc,(mxArray**)(argv)); break;
  case 56: flag=_wrap_Matrix3x3_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 57: flag=_wrap_Matrix3x3_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 58: flag=_wrap_Matrix3x3_fillRowMajorBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 59: flag=_wrap_Matrix3x3_fillColMajorBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 60: flag=_wrap_Matrix3x3_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 61: flag=_wrap_Matrix3x3_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 62: flag=_wrap_Matrix3x3_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 63: flag=_wrap_Matrix3x3_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 64: flag=_wrap_new_Matrix4x4(resc,resv,argc,(mxArray**)(argv)); break;
  case 65: flag=_wrap_delete_Matrix4x4(resc,resv,argc,(mxArray**)(argv)); break;
  case 66: flag=_wrap_Matrix4x4_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 67: flag=_wrap_Matrix4x4_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 68: flag=_wrap_Matrix4x4_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 69: flag=_wrap_Matrix4x4_rows(resc,resv,argc,(mxArray**)(argv)); break;
  case 70: flag=_wrap_Matrix4x4_cols(resc,resv,argc,(mxArray**)(argv)); break;
  case 71: flag=_wrap_Matrix4x4_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 72: flag=_wrap_Matrix4x4_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 73: flag=_wrap_Matrix4x4_fillRowMajorBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 74: flag=_wrap_Matrix4x4_fillColMajorBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 75: flag=_wrap_Matrix4x4_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 76: flag=_wrap_Matrix4x4_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 77: flag=_wrap_Matrix4x4_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 78: flag=_wrap_Matrix4x4_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 79: flag=_wrap_new_Matrix6x6(resc,resv,argc,(mxArray**)(argv)); break;
  case 80: flag=_wrap_delete_Matrix6x6(resc,resv,argc,(mxArray**)(argv)); break;
  case 81: flag=_wrap_Matrix6x6_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 82: flag=_wrap_Matrix6x6_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 83: flag=_wrap_Matrix6x6_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 84: flag=_wrap_Matrix6x6_rows(resc,resv,argc,(mxArray**)(argv)); break;
  case 85: flag=_wrap_Matrix6x6_cols(resc,resv,argc,(mxArray**)(argv)); break;
  case 86: flag=_wrap_Matrix6x6_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 87: flag=_wrap_Matrix6x6_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 88: flag=_wrap_Matrix6x6_fillRowMajorBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 89: flag=_wrap_Matrix6x6_fillColMajorBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 90: flag=_wrap_Matrix6x6_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 91: flag=_wrap_Matrix6x6_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 92: flag=_wrap_Matrix6x6_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 93: flag=_wrap_Matrix6x6_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 94: flag=_wrap_new_Matrix6x10(resc,resv,argc,(mxArray**)(argv)); break;
  case 95: flag=_wrap_delete_Matrix6x10(resc,resv,argc,(mxArray**)(argv)); break;
  case 96: flag=_wrap_Matrix6x10_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 97: flag=_wrap_Matrix6x10_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 98: flag=_wrap_Matrix6x10_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 99: flag=_wrap_Matrix6x10_rows(resc,resv,argc,(mxArray**)(argv)); break;
  case 100: flag=_wrap_Matrix6x10_cols(resc,resv,argc,(mxArray**)(argv)); break;
  case 101: flag=_wrap_Matrix6x10_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 102: flag=_wrap_Matrix6x10_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 103: flag=_wrap_Matrix6x10_fillRowMajorBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 104: flag=_wrap_Matrix6x10_fillColMajorBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 105: flag=_wrap_Matrix6x10_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 106: flag=_wrap_Matrix6x10_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 107: flag=_wrap_Matrix6x10_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 108: flag=_wrap_Matrix6x10_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 109: flag=_wrap_new_Vector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 110: flag=_wrap_delete_Vector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 111: flag=_wrap_Vector3_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 112: flag=_wrap_Vector3_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 113: flag=_wrap_Vector3_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 114: flag=_wrap_Vector3_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 115: flag=_wrap_Vector3_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 116: flag=_wrap_Vector3_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 117: flag=_wrap_Vector3_fillBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 118: flag=_wrap_Vector3_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 119: flag=_wrap_Vector3_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 120: flag=_wrap_Vector3_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 121: flag=_wrap_Vector3_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 122: flag=_wrap_new_Vector6(resc,resv,argc,(mxArray**)(argv)); break;
  case 123: flag=_wrap_delete_Vector6(resc,resv,argc,(mxArray**)(argv)); break;
  case 124: flag=_wrap_Vector6_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 125: flag=_wrap_Vector6_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 126: flag=_wrap_Vector6_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 127: flag=_wrap_Vector6_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 128: flag=_wrap_Vector6_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 129: flag=_wrap_Vector6_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 130: flag=_wrap_Vector6_fillBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 131: flag=_wrap_Vector6_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 132: flag=_wrap_Vector6_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 133: flag=_wrap_Vector6_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 134: flag=_wrap_Vector6_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 135: flag=_wrap_new_Vector10(resc,resv,argc,(mxArray**)(argv)); break;
  case 136: flag=_wrap_delete_Vector10(resc,resv,argc,(mxArray**)(argv)); break;
  case 137: flag=_wrap_Vector10_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 138: flag=_wrap_Vector10_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 139: flag=_wrap_Vector10_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 140: flag=_wrap_Vector10_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 141: flag=_wrap_Vector10_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 142: flag=_wrap_Vector10_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 143: flag=_wrap_Vector10_fillBuffer(resc,resv,argc,(mxArray**)(argv)); break;
  case 144: flag=_wrap_Vector10_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 145: flag=_wrap_Vector10_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 146: flag=_wrap_Vector10_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 147: flag=_wrap_Vector10_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 148: flag=_wrap_new_PositionRaw(resc,resv,argc,(mxArray**)(argv)); break;
  case 149: flag=_wrap_delete_PositionRaw(resc,resv,argc,(mxArray**)(argv)); break;
  case 150: flag=_wrap_PositionRaw_changePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 151: flag=_wrap_PositionRaw_changeRefPoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 152: flag=_wrap_PositionRaw_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 153: flag=_wrap_PositionRaw_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 154: flag=_wrap_PositionRaw_changePointOf(resc,resv,argc,(mxArray**)(argv)); break;
  case 155: flag=_wrap_PositionRaw_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 156: flag=_wrap_PositionRaw_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 157: flag=_wrap_new_PositionSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 158: flag=_wrap_delete_PositionSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 159: flag=_wrap_PositionSemantics_getPoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 160: flag=_wrap_PositionSemantics_getBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 161: flag=_wrap_PositionSemantics_getReferencePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 162: flag=_wrap_PositionSemantics_getRefBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 163: flag=_wrap_PositionSemantics_getCoordinateFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 164: flag=_wrap_PositionSemantics_setPoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 165: flag=_wrap_PositionSemantics_setBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 166: flag=_wrap_PositionSemantics_setReferencePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 167: flag=_wrap_PositionSemantics_setRefBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 168: flag=_wrap_PositionSemantics_setCoordinateFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 169: flag=_wrap_PositionSemantics_changePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 170: flag=_wrap_PositionSemantics_changeRefPoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 171: flag=_wrap_PositionSemantics_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 172: flag=_wrap_PositionSemantics_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 173: flag=_wrap_PositionSemantics_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 174: flag=_wrap_PositionSemantics_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 175: flag=_wrap_new_Position(resc,resv,argc,(mxArray**)(argv)); break;
  case 176: flag=_wrap_delete_Position(resc,resv,argc,(mxArray**)(argv)); break;
  case 177: flag=_wrap_Position_getSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 178: flag=_wrap_Position_changePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 179: flag=_wrap_Position_changeRefPoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 180: flag=_wrap_Position_changeCoordinateFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 181: flag=_wrap_Position_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 182: flag=_wrap_Position_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 183: flag=_wrap_Position_changePointOf(resc,resv,argc,(mxArray**)(argv)); break;
  case 184: flag=_wrap_Position_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 185: flag=_wrap_Position_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 186: flag=_wrap_Position_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 187: flag=_wrap_Position_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 188: flag=_wrap_Position_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 189: flag=_wrap_Position_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 190: flag=_wrap_Position_Zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 191: flag=_wrap_new_GeomVector3Semantics__LinearMotionVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 192: flag=_wrap_delete_GeomVector3Semantics__LinearMotionVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 193: flag=_wrap_GeomVector3Semantics__LinearMotionVector3Semantics_getBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 194: flag=_wrap_GeomVector3Semantics__LinearMotionVector3Semantics_getRefBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 195: flag=_wrap_GeomVector3Semantics__LinearMotionVector3Semantics_getCoordinateFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 196: flag=_wrap_GeomVector3Semantics__LinearMotionVector3Semantics_isUnknown(resc,resv,argc,(mxArray**)(argv)); break;
  case 197: flag=_wrap_GeomVector3Semantics__LinearMotionVector3Semantics_changeCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 198: flag=_wrap_GeomVector3Semantics__LinearMotionVector3Semantics_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 199: flag=_wrap_GeomVector3Semantics__LinearMotionVector3Semantics_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 200: flag=_wrap_GeomVector3Semantics__LinearMotionVector3Semantics_dot(resc,resv,argc,(mxArray**)(argv)); break;
  case 201: flag=_wrap_new_GeomVector3Semantics__AngularMotionVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 202: flag=_wrap_delete_GeomVector3Semantics__AngularMotionVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 203: flag=_wrap_GeomVector3Semantics__AngularMotionVector3Semantics_getBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 204: flag=_wrap_GeomVector3Semantics__AngularMotionVector3Semantics_getRefBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 205: flag=_wrap_GeomVector3Semantics__AngularMotionVector3Semantics_getCoordinateFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 206: flag=_wrap_GeomVector3Semantics__AngularMotionVector3Semantics_isUnknown(resc,resv,argc,(mxArray**)(argv)); break;
  case 207: flag=_wrap_GeomVector3Semantics__AngularMotionVector3Semantics_changeCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 208: flag=_wrap_GeomVector3Semantics__AngularMotionVector3Semantics_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 209: flag=_wrap_GeomVector3Semantics__AngularMotionVector3Semantics_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 210: flag=_wrap_GeomVector3Semantics__AngularMotionVector3Semantics_dot(resc,resv,argc,(mxArray**)(argv)); break;
  case 211: flag=_wrap_new_GeomVector3Semantics__LinearForceVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 212: flag=_wrap_delete_GeomVector3Semantics__LinearForceVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 213: flag=_wrap_GeomVector3Semantics__LinearForceVector3Semantics_getBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 214: flag=_wrap_GeomVector3Semantics__LinearForceVector3Semantics_getRefBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 215: flag=_wrap_GeomVector3Semantics__LinearForceVector3Semantics_getCoordinateFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 216: flag=_wrap_GeomVector3Semantics__LinearForceVector3Semantics_isUnknown(resc,resv,argc,(mxArray**)(argv)); break;
  case 217: flag=_wrap_GeomVector3Semantics__LinearForceVector3Semantics_changeCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 218: flag=_wrap_GeomVector3Semantics__LinearForceVector3Semantics_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 219: flag=_wrap_GeomVector3Semantics__LinearForceVector3Semantics_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 220: flag=_wrap_GeomVector3Semantics__LinearForceVector3Semantics_dot(resc,resv,argc,(mxArray**)(argv)); break;
  case 221: flag=_wrap_new_GeomVector3Semantics__AngularForceVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 222: flag=_wrap_delete_GeomVector3Semantics__AngularForceVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 223: flag=_wrap_GeomVector3Semantics__AngularForceVector3Semantics_getBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 224: flag=_wrap_GeomVector3Semantics__AngularForceVector3Semantics_getRefBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 225: flag=_wrap_GeomVector3Semantics__AngularForceVector3Semantics_getCoordinateFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 226: flag=_wrap_GeomVector3Semantics__AngularForceVector3Semantics_isUnknown(resc,resv,argc,(mxArray**)(argv)); break;
  case 227: flag=_wrap_GeomVector3Semantics__AngularForceVector3Semantics_changeCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 228: flag=_wrap_GeomVector3Semantics__AngularForceVector3Semantics_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 229: flag=_wrap_GeomVector3Semantics__AngularForceVector3Semantics_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 230: flag=_wrap_GeomVector3Semantics__AngularForceVector3Semantics_dot(resc,resv,argc,(mxArray**)(argv)); break;
  case 231: flag=_wrap_GeomVector3__LinearMotionVector3_semantics_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 232: flag=_wrap_GeomVector3__LinearMotionVector3_semantics_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 233: flag=_wrap_new_GeomVector3__LinearMotionVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 234: flag=_wrap_delete_GeomVector3__LinearMotionVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 235: flag=_wrap_GeomVector3__LinearMotionVector3_setSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 236: flag=_wrap_GeomVector3__LinearMotionVector3_changeCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 237: flag=_wrap_GeomVector3__LinearMotionVector3_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 238: flag=_wrap_GeomVector3__LinearMotionVector3_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 239: flag=_wrap_GeomVector3__LinearMotionVector3_dot(resc,resv,argc,(mxArray**)(argv)); break;
  case 240: flag=_wrap_GeomVector3__LinearMotionVector3_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 241: flag=_wrap_GeomVector3__LinearMotionVector3_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 242: flag=_wrap_GeomVector3__LinearMotionVector3_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 243: flag=_wrap_GeomVector3__AngularMotionVector3_semantics_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 244: flag=_wrap_GeomVector3__AngularMotionVector3_semantics_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 245: flag=_wrap_new_GeomVector3__AngularMotionVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 246: flag=_wrap_delete_GeomVector3__AngularMotionVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 247: flag=_wrap_GeomVector3__AngularMotionVector3_setSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 248: flag=_wrap_GeomVector3__AngularMotionVector3_changeCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 249: flag=_wrap_GeomVector3__AngularMotionVector3_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 250: flag=_wrap_GeomVector3__AngularMotionVector3_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 251: flag=_wrap_GeomVector3__AngularMotionVector3_dot(resc,resv,argc,(mxArray**)(argv)); break;
  case 252: flag=_wrap_GeomVector3__AngularMotionVector3_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 253: flag=_wrap_GeomVector3__AngularMotionVector3_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 254: flag=_wrap_GeomVector3__AngularMotionVector3_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 255: flag=_wrap_GeomVector3__LinearForceVector3_semantics_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 256: flag=_wrap_GeomVector3__LinearForceVector3_semantics_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 257: flag=_wrap_new_GeomVector3__LinearForceVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 258: flag=_wrap_delete_GeomVector3__LinearForceVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 259: flag=_wrap_GeomVector3__LinearForceVector3_setSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 260: flag=_wrap_GeomVector3__LinearForceVector3_changeCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 261: flag=_wrap_GeomVector3__LinearForceVector3_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 262: flag=_wrap_GeomVector3__LinearForceVector3_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 263: flag=_wrap_GeomVector3__LinearForceVector3_dot(resc,resv,argc,(mxArray**)(argv)); break;
  case 264: flag=_wrap_GeomVector3__LinearForceVector3_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 265: flag=_wrap_GeomVector3__LinearForceVector3_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 266: flag=_wrap_GeomVector3__LinearForceVector3_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 267: flag=_wrap_GeomVector3__AngularForceVector3_semantics_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 268: flag=_wrap_GeomVector3__AngularForceVector3_semantics_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 269: flag=_wrap_new_GeomVector3__AngularForceVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 270: flag=_wrap_delete_GeomVector3__AngularForceVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 271: flag=_wrap_GeomVector3__AngularForceVector3_setSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 272: flag=_wrap_GeomVector3__AngularForceVector3_changeCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 273: flag=_wrap_GeomVector3__AngularForceVector3_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 274: flag=_wrap_GeomVector3__AngularForceVector3_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 275: flag=_wrap_GeomVector3__AngularForceVector3_dot(resc,resv,argc,(mxArray**)(argv)); break;
  case 276: flag=_wrap_GeomVector3__AngularForceVector3_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 277: flag=_wrap_GeomVector3__AngularForceVector3_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 278: flag=_wrap_GeomVector3__AngularForceVector3_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 279: flag=_wrap_new_ForceVector3Semantics__LinearForceVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 280: flag=_wrap_delete_ForceVector3Semantics__LinearForceVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 281: flag=_wrap_ForceVector3Semantics__LinearForceVector3Semantics_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 282: flag=_wrap_ForceVector3Semantics__LinearForceVector3Semantics_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 283: flag=_wrap_new_ForceVector3Semantics__AngularForceVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 284: flag=_wrap_delete_ForceVector3Semantics__AngularForceVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 285: flag=_wrap_ForceVector3Semantics__AngularForceVector3Semantics_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 286: flag=_wrap_ForceVector3Semantics__AngularForceVector3Semantics_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 287: flag=_wrap_new_MotionVector3__LinearMotionVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 288: flag=_wrap_delete_MotionVector3__LinearMotionVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 289: flag=_wrap_MotionVector3__LinearMotionVector3_cross(resc,resv,argc,(mxArray**)(argv)); break;
  case 290: flag=_wrap_new_MotionVector3__AngularMotionVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 291: flag=_wrap_delete_MotionVector3__AngularMotionVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 292: flag=_wrap_MotionVector3__AngularMotionVector3_cross(resc,resv,argc,(mxArray**)(argv)); break;
  case 293: flag=_wrap_new_ForceVector3__LinearForceVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 294: flag=_wrap_delete_ForceVector3__LinearForceVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 295: flag=_wrap_new_ForceVector3__AngularForceVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 296: flag=_wrap_delete_ForceVector3__AngularForceVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 297: flag=_wrap_new_LinearMotionVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 298: flag=_wrap_delete_LinearMotionVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 299: flag=_wrap_LinearMotionVector3Semantics_changePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 300: flag=_wrap_LinearMotionVector3Semantics_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 301: flag=_wrap_new_LinearMotionVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 302: flag=_wrap_delete_LinearMotionVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 303: flag=_wrap_LinearMotionVector3_changePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 304: flag=_wrap_new_AngularMotionVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 305: flag=_wrap_delete_AngularMotionVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 306: flag=_wrap_new_AngularMotionVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 307: flag=_wrap_delete_AngularMotionVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 308: flag=_wrap_AngularMotionVector3_exp(resc,resv,argc,(mxArray**)(argv)); break;
  case 309: flag=_wrap_new_LinearForceVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 310: flag=_wrap_delete_LinearForceVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 311: flag=_wrap_new_LinearForceVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 312: flag=_wrap_delete_LinearForceVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 313: flag=_wrap_new_AngularForceVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 314: flag=_wrap_delete_AngularForceVector3Semantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 315: flag=_wrap_AngularForceVector3Semantics_changePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 316: flag=_wrap_AngularForceVector3Semantics_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 317: flag=_wrap_new_AngularForceVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 318: flag=_wrap_delete_AngularForceVector3(resc,resv,argc,(mxArray**)(argv)); break;
  case 319: flag=_wrap_AngularForceVector3_changePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 320: flag=_wrap_new_SpatialMotionVectorSemanticsBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 321: flag=_wrap_delete_SpatialMotionVectorSemanticsBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 322: flag=_wrap_SpatialMotionVectorSemanticsBase_check_linear2angularConsistency(resc,resv,argc,(mxArray**)(argv)); break;
  case 323: flag=_wrap_SpatialMotionVectorSemanticsBase_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 324: flag=_wrap_SpatialMotionVectorSemanticsBase_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 325: flag=_wrap_new_SpatialForceVectorSemanticsBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 326: flag=_wrap_delete_SpatialForceVectorSemanticsBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 327: flag=_wrap_SpatialForceVectorSemanticsBase_check_linear2angularConsistency(resc,resv,argc,(mxArray**)(argv)); break;
  case 328: flag=_wrap_SpatialForceVectorSemanticsBase_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 329: flag=_wrap_SpatialForceVectorSemanticsBase_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 330: flag=_wrap_new_SpatialMotionVectorBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 331: flag=_wrap_delete_SpatialMotionVectorBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 332: flag=_wrap_SpatialMotionVectorBase_getLinearVec3(resc,resv,argc,(mxArray**)(argv)); break;
  case 333: flag=_wrap_SpatialMotionVectorBase_getAngularVec3(resc,resv,argc,(mxArray**)(argv)); break;
  case 334: flag=_wrap_SpatialMotionVectorBase_setLinearVec3(resc,resv,argc,(mxArray**)(argv)); break;
  case 335: flag=_wrap_SpatialMotionVectorBase_setAngularVec3(resc,resv,argc,(mxArray**)(argv)); break;
  case 336: flag=_wrap_SpatialMotionVectorBase_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 337: flag=_wrap_SpatialMotionVectorBase_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 338: flag=_wrap_SpatialMotionVectorBase_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 339: flag=_wrap_SpatialMotionVectorBase_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 340: flag=_wrap_SpatialMotionVectorBase_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 341: flag=_wrap_SpatialMotionVectorBase_changePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 342: flag=_wrap_SpatialMotionVectorBase_changeCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 343: flag=_wrap_SpatialMotionVectorBase_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 344: flag=_wrap_SpatialMotionVectorBase_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 345: flag=_wrap_SpatialMotionVectorBase_dot(resc,resv,argc,(mxArray**)(argv)); break;
  case 346: flag=_wrap_SpatialMotionVectorBase_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 347: flag=_wrap_SpatialMotionVectorBase_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 348: flag=_wrap_SpatialMotionVectorBase_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 349: flag=_wrap_SpatialMotionVectorBase_Zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 350: flag=_wrap_SpatialMotionVectorBase_asVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 351: flag=_wrap_SpatialMotionVectorBase_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 352: flag=_wrap_SpatialMotionVectorBase_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 353: flag=_wrap_SpatialMotionVectorBase_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 354: flag=_wrap_SpatialMotionVectorBase_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 355: flag=_wrap_new_SpatialForceVectorBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 356: flag=_wrap_delete_SpatialForceVectorBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 357: flag=_wrap_SpatialForceVectorBase_getLinearVec3(resc,resv,argc,(mxArray**)(argv)); break;
  case 358: flag=_wrap_SpatialForceVectorBase_getAngularVec3(resc,resv,argc,(mxArray**)(argv)); break;
  case 359: flag=_wrap_SpatialForceVectorBase_setLinearVec3(resc,resv,argc,(mxArray**)(argv)); break;
  case 360: flag=_wrap_SpatialForceVectorBase_setAngularVec3(resc,resv,argc,(mxArray**)(argv)); break;
  case 361: flag=_wrap_SpatialForceVectorBase_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 362: flag=_wrap_SpatialForceVectorBase_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 363: flag=_wrap_SpatialForceVectorBase_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 364: flag=_wrap_SpatialForceVectorBase_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 365: flag=_wrap_SpatialForceVectorBase_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 366: flag=_wrap_SpatialForceVectorBase_changePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 367: flag=_wrap_SpatialForceVectorBase_changeCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 368: flag=_wrap_SpatialForceVectorBase_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 369: flag=_wrap_SpatialForceVectorBase_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 370: flag=_wrap_SpatialForceVectorBase_dot(resc,resv,argc,(mxArray**)(argv)); break;
  case 371: flag=_wrap_SpatialForceVectorBase_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 372: flag=_wrap_SpatialForceVectorBase_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 373: flag=_wrap_SpatialForceVectorBase_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 374: flag=_wrap_SpatialForceVectorBase_Zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 375: flag=_wrap_SpatialForceVectorBase_asVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 376: flag=_wrap_SpatialForceVectorBase_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 377: flag=_wrap_SpatialForceVectorBase_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 378: flag=_wrap_SpatialForceVectorBase_toMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 379: flag=_wrap_SpatialForceVectorBase_fromMatlab(resc,resv,argc,(mxArray**)(argv)); break;
  case 380: flag=_wrap_new_Dummy(resc,resv,argc,(mxArray**)(argv)); break;
  case 381: flag=_wrap_delete_Dummy(resc,resv,argc,(mxArray**)(argv)); break;
  case 382: flag=_wrap_new_SpatialMotionVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 383: flag=_wrap_delete_SpatialMotionVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 384: flag=_wrap_SpatialMotionVector_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 385: flag=_wrap_SpatialMotionVector_cross(resc,resv,argc,(mxArray**)(argv)); break;
  case 386: flag=_wrap_SpatialMotionVector_exp(resc,resv,argc,(mxArray**)(argv)); break;
  case 387: flag=_wrap_new_SpatialForceVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 388: flag=_wrap_SpatialForceVector_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 389: flag=_wrap_delete_SpatialForceVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 390: flag=_wrap_new_Twist(resc,resv,argc,(mxArray**)(argv)); break;
  case 391: flag=_wrap_delete_Twist(resc,resv,argc,(mxArray**)(argv)); break;
  case 392: flag=_wrap_Twist_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 393: flag=_wrap_Twist_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 394: flag=_wrap_Twist_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 395: flag=_wrap_Twist_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 396: flag=_wrap_new_Wrench(resc,resv,argc,(mxArray**)(argv)); break;
  case 397: flag=_wrap_delete_Wrench(resc,resv,argc,(mxArray**)(argv)); break;
  case 398: flag=_wrap_Wrench_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 399: flag=_wrap_Wrench_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 400: flag=_wrap_Wrench_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 401: flag=_wrap_new_SpatialMomentum(resc,resv,argc,(mxArray**)(argv)); break;
  case 402: flag=_wrap_delete_SpatialMomentum(resc,resv,argc,(mxArray**)(argv)); break;
  case 403: flag=_wrap_SpatialMomentum_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 404: flag=_wrap_SpatialMomentum_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 405: flag=_wrap_SpatialMomentum_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 406: flag=_wrap_new_SpatialAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 407: flag=_wrap_delete_SpatialAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 408: flag=_wrap_SpatialAcc_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 409: flag=_wrap_SpatialAcc_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 410: flag=_wrap_SpatialAcc_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 411: flag=_wrap_new_ClassicalAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 412: flag=_wrap_delete_ClassicalAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 413: flag=_wrap_ClassicalAcc_changeCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 414: flag=_wrap_ClassicalAcc_Zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 415: flag=_wrap_new_Direction(resc,resv,argc,(mxArray**)(argv)); break;
  case 416: flag=_wrap_delete_Direction(resc,resv,argc,(mxArray**)(argv)); break;
  case 417: flag=_wrap_Direction_Normalize(resc,resv,argc,(mxArray**)(argv)); break;
  case 418: flag=_wrap_Direction_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 419: flag=_wrap_Direction_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 420: flag=_wrap_Direction_Default(resc,resv,argc,(mxArray**)(argv)); break;
  case 421: flag=_wrap_new_Axis(resc,resv,argc,(mxArray**)(argv)); break;
  case 422: flag=_wrap_delete_Axis(resc,resv,argc,(mxArray**)(argv)); break;
  case 423: flag=_wrap_Axis_getDirection(resc,resv,argc,(mxArray**)(argv)); break;
  case 424: flag=_wrap_Axis_getOrigin(resc,resv,argc,(mxArray**)(argv)); break;
  case 425: flag=_wrap_Axis_setDirection(resc,resv,argc,(mxArray**)(argv)); break;
  case 426: flag=_wrap_Axis_setOrigin(resc,resv,argc,(mxArray**)(argv)); break;
  case 427: flag=_wrap_Axis_getRotationTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 428: flag=_wrap_Axis_getRotationTwist(resc,resv,argc,(mxArray**)(argv)); break;
  case 429: flag=_wrap_Axis_getRotationSpatialAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 430: flag=_wrap_Axis_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 431: flag=_wrap_Axis_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 432: flag=_wrap_new_RotationalInertiaRaw(resc,resv,argc,(mxArray**)(argv)); break;
  case 433: flag=_wrap_delete_RotationalInertiaRaw(resc,resv,argc,(mxArray**)(argv)); break;
  case 434: flag=_wrap_new_SpatialInertiaRaw(resc,resv,argc,(mxArray**)(argv)); break;
  case 435: flag=_wrap_delete_SpatialInertiaRaw(resc,resv,argc,(mxArray**)(argv)); break;
  case 436: flag=_wrap_SpatialInertiaRaw_fromRotationalInertiaWrtCenterOfMass(resc,resv,argc,(mxArray**)(argv)); break;
  case 437: flag=_wrap_SpatialInertiaRaw_getMass(resc,resv,argc,(mxArray**)(argv)); break;
  case 438: flag=_wrap_SpatialInertiaRaw_getCenterOfMass(resc,resv,argc,(mxArray**)(argv)); break;
  case 439: flag=_wrap_SpatialInertiaRaw_getRotationalInertiaWrtFrameOrigin(resc,resv,argc,(mxArray**)(argv)); break;
  case 440: flag=_wrap_SpatialInertiaRaw_getRotationalInertiaWrtCenterOfMass(resc,resv,argc,(mxArray**)(argv)); break;
  case 441: flag=_wrap_SpatialInertiaRaw_combine(resc,resv,argc,(mxArray**)(argv)); break;
  case 442: flag=_wrap_SpatialInertiaRaw_multiply(resc,resv,argc,(mxArray**)(argv)); break;
  case 443: flag=_wrap_SpatialInertiaRaw_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 444: flag=_wrap_new_SpatialInertia(resc,resv,argc,(mxArray**)(argv)); break;
  case 445: flag=_wrap_delete_SpatialInertia(resc,resv,argc,(mxArray**)(argv)); break;
  case 446: flag=_wrap_SpatialInertia_combine(resc,resv,argc,(mxArray**)(argv)); break;
  case 447: flag=_wrap_SpatialInertia_asMatrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 448: flag=_wrap_SpatialInertia_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 449: flag=_wrap_SpatialInertia_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 450: flag=_wrap_SpatialInertia_Zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 451: flag=_wrap_new_ArticulatedBodyInertia(resc,resv,argc,(mxArray**)(argv)); break;
  case 452: flag=_wrap_delete_ArticulatedBodyInertia(resc,resv,argc,(mxArray**)(argv)); break;
  case 453: flag=_wrap_ArticulatedBodyInertia_getLinearLinearSubmatrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 454: flag=_wrap_ArticulatedBodyInertia_getLinearAngularSubmatrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 455: flag=_wrap_ArticulatedBodyInertia_getAngularAngularSubmatrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 456: flag=_wrap_ArticulatedBodyInertia_combine(resc,resv,argc,(mxArray**)(argv)); break;
  case 457: flag=_wrap_ArticulatedBodyInertia_applyInverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 458: flag=_wrap_ArticulatedBodyInertia_asMatrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 459: flag=_wrap_ArticulatedBodyInertia_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 460: flag=_wrap_ArticulatedBodyInertia_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 461: flag=_wrap_ArticulatedBodyInertia_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 462: flag=_wrap_ArticulatedBodyInertia_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 463: flag=_wrap_ArticulatedBodyInertia_ABADyadHelper(resc,resv,argc,(mxArray**)(argv)); break;
  case 464: flag=_wrap_new_RotationRaw(resc,resv,argc,(mxArray**)(argv)); break;
  case 465: flag=_wrap_delete_RotationRaw(resc,resv,argc,(mxArray**)(argv)); break;
  case 466: flag=_wrap_RotationRaw_changeOrientFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 467: flag=_wrap_RotationRaw_changeRefOrientFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 468: flag=_wrap_RotationRaw_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 469: flag=_wrap_RotationRaw_inverse2(resc,resv,argc,(mxArray**)(argv)); break;
  case 470: flag=_wrap_RotationRaw_changeCoordFrameOf(resc,resv,argc,(mxArray**)(argv)); break;
  case 471: flag=_wrap_RotationRaw_RotX(resc,resv,argc,(mxArray**)(argv)); break;
  case 472: flag=_wrap_RotationRaw_RotY(resc,resv,argc,(mxArray**)(argv)); break;
  case 473: flag=_wrap_RotationRaw_RotZ(resc,resv,argc,(mxArray**)(argv)); break;
  case 474: flag=_wrap_RotationRaw_RPY(resc,resv,argc,(mxArray**)(argv)); break;
  case 475: flag=_wrap_RotationRaw_Identity(resc,resv,argc,(mxArray**)(argv)); break;
  case 476: flag=_wrap_RotationRaw_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 477: flag=_wrap_RotationRaw_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 478: flag=_wrap_new_RotationSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 479: flag=_wrap_delete_RotationSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 480: flag=_wrap_RotationSemantics_getOrientationFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 481: flag=_wrap_RotationSemantics_getBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 482: flag=_wrap_RotationSemantics_getReferenceOrientationFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 483: flag=_wrap_RotationSemantics_getRefBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 484: flag=_wrap_RotationSemantics_getCoordinateFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 485: flag=_wrap_RotationSemantics_setOrientationFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 486: flag=_wrap_RotationSemantics_setBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 487: flag=_wrap_RotationSemantics_setReferenceOrientationFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 488: flag=_wrap_RotationSemantics_setRefBody(resc,resv,argc,(mxArray**)(argv)); break;
  case 489: flag=_wrap_RotationSemantics_setCoordinateFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 490: flag=_wrap_RotationSemantics_changeOrientFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 491: flag=_wrap_RotationSemantics_changeRefOrientFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 492: flag=_wrap_RotationSemantics_changeCoordFrameOf(resc,resv,argc,(mxArray**)(argv)); break;
  case 493: flag=_wrap_RotationSemantics_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 494: flag=_wrap_RotationSemantics_inverse2(resc,resv,argc,(mxArray**)(argv)); break;
  case 495: flag=_wrap_RotationSemantics_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 496: flag=_wrap_RotationSemantics_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 497: flag=_wrap_new_Rotation(resc,resv,argc,(mxArray**)(argv)); break;
  case 498: flag=_wrap_delete_Rotation(resc,resv,argc,(mxArray**)(argv)); break;
  case 499: flag=_wrap_Rotation_getSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 500: flag=_wrap_Rotation_changeOrientFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 501: flag=_wrap_Rotation_changeRefOrientFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 502: flag=_wrap_Rotation_changeCoordinateFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 503: flag=_wrap_Rotation_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 504: flag=_wrap_Rotation_inverse2(resc,resv,argc,(mxArray**)(argv)); break;
  case 505: flag=_wrap_Rotation_changeCoordFrameOf(resc,resv,argc,(mxArray**)(argv)); break;
  case 506: flag=_wrap_Rotation_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 507: flag=_wrap_Rotation_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 508: flag=_wrap_Rotation_log(resc,resv,argc,(mxArray**)(argv)); break;
  case 509: flag=_wrap_Rotation_getRPY(resc,resv,argc,(mxArray**)(argv)); break;
  case 510: flag=_wrap_Rotation_RotX(resc,resv,argc,(mxArray**)(argv)); break;
  case 511: flag=_wrap_Rotation_RotY(resc,resv,argc,(mxArray**)(argv)); break;
  case 512: flag=_wrap_Rotation_RotZ(resc,resv,argc,(mxArray**)(argv)); break;
  case 513: flag=_wrap_Rotation_RotAxis(resc,resv,argc,(mxArray**)(argv)); break;
  case 514: flag=_wrap_Rotation_RPY(resc,resv,argc,(mxArray**)(argv)); break;
  case 515: flag=_wrap_Rotation_Identity(resc,resv,argc,(mxArray**)(argv)); break;
  case 516: flag=_wrap_Rotation_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 517: flag=_wrap_Rotation_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 518: flag=_wrap_new_TransformSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 519: flag=_wrap_delete_TransformSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 520: flag=_wrap_TransformSemantics_getRotationSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 521: flag=_wrap_TransformSemantics_getPositionSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 522: flag=_wrap_TransformSemantics_setRotationSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 523: flag=_wrap_TransformSemantics_setPositionSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 524: flag=_wrap_TransformSemantics_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 525: flag=_wrap_TransformSemantics_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 526: flag=_wrap_new_Transform(resc,resv,argc,(mxArray**)(argv)); break;
  case 527: flag=_wrap_delete_Transform(resc,resv,argc,(mxArray**)(argv)); break;
  case 528: flag=_wrap_Transform_getSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 529: flag=_wrap_Transform_getRotation(resc,resv,argc,(mxArray**)(argv)); break;
  case 530: flag=_wrap_Transform_getPosition(resc,resv,argc,(mxArray**)(argv)); break;
  case 531: flag=_wrap_Transform_setRotation(resc,resv,argc,(mxArray**)(argv)); break;
  case 532: flag=_wrap_Transform_setPosition(resc,resv,argc,(mxArray**)(argv)); break;
  case 533: flag=_wrap_Transform_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 534: flag=_wrap_Transform_inverse2(resc,resv,argc,(mxArray**)(argv)); break;
  case 535: flag=_wrap_Transform_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 536: flag=_wrap_Transform_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 537: flag=_wrap_Transform_Identity(resc,resv,argc,(mxArray**)(argv)); break;
  case 538: flag=_wrap_Transform_asHomogeneousTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 539: flag=_wrap_Transform_asAdjointTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 540: flag=_wrap_Transform_asAdjointTransformWrench(resc,resv,argc,(mxArray**)(argv)); break;
  case 541: flag=_wrap_Transform_log(resc,resv,argc,(mxArray**)(argv)); break;
  case 542: flag=_wrap_Transform_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 543: flag=_wrap_Transform_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 544: flag=_wrap_LINK_INVALID_INDEX_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 545: flag=_wrap_LINK_INVALID_INDEX_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 546: flag=_wrap_LINK_INVALID_NAME_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 547: flag=_wrap_LINK_INVALID_NAME_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 548: flag=_wrap_JOINT_INVALID_INDEX_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 549: flag=_wrap_JOINT_INVALID_INDEX_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 550: flag=_wrap_JOINT_INVALID_NAME_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 551: flag=_wrap_JOINT_INVALID_NAME_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 552: flag=_wrap_FRAME_INVALID_INDEX_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 553: flag=_wrap_FRAME_INVALID_INDEX_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 554: flag=_wrap_FRAME_INVALID_NAME_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 555: flag=_wrap_FRAME_INVALID_NAME_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 556: flag=_wrap_new_LinkPositions(resc,resv,argc,(mxArray**)(argv)); break;
  case 557: flag=_wrap_LinkPositions_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 558: flag=_wrap_LinkPositions_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 559: flag=_wrap_delete_LinkPositions(resc,resv,argc,(mxArray**)(argv)); break;
  case 560: flag=_wrap_new_LinkWrenches(resc,resv,argc,(mxArray**)(argv)); break;
  case 561: flag=_wrap_LinkWrenches_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 562: flag=_wrap_LinkWrenches_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 563: flag=_wrap_delete_LinkWrenches(resc,resv,argc,(mxArray**)(argv)); break;
  case 564: flag=_wrap_new_LinkInertias(resc,resv,argc,(mxArray**)(argv)); break;
  case 565: flag=_wrap_LinkInertias_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 566: flag=_wrap_LinkInertias_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 567: flag=_wrap_delete_LinkInertias(resc,resv,argc,(mxArray**)(argv)); break;
  case 568: flag=_wrap_new_LinkArticulatedBodyInertias(resc,resv,argc,(mxArray**)(argv)); break;
  case 569: flag=_wrap_LinkArticulatedBodyInertias_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 570: flag=_wrap_LinkArticulatedBodyInertias_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 571: flag=_wrap_delete_LinkArticulatedBodyInertias(resc,resv,argc,(mxArray**)(argv)); break;
  case 572: flag=_wrap_new_LinkVelArray(resc,resv,argc,(mxArray**)(argv)); break;
  case 573: flag=_wrap_LinkVelArray_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 574: flag=_wrap_LinkVelArray_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 575: flag=_wrap_delete_LinkVelArray(resc,resv,argc,(mxArray**)(argv)); break;
  case 576: flag=_wrap_new_LinkAccArray(resc,resv,argc,(mxArray**)(argv)); break;
  case 577: flag=_wrap_LinkAccArray_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 578: flag=_wrap_LinkAccArray_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 579: flag=_wrap_LinkAccArray_getNrOfLinks(resc,resv,argc,(mxArray**)(argv)); break;
  case 580: flag=_wrap_delete_LinkAccArray(resc,resv,argc,(mxArray**)(argv)); break;
  case 581: flag=_wrap_new_Link(resc,resv,argc,(mxArray**)(argv)); break;
  case 582: flag=_wrap_delete_Link(resc,resv,argc,(mxArray**)(argv)); break;
  case 583: flag=_wrap_Link_setInertia(resc,resv,argc,(mxArray**)(argv)); break;
  case 584: flag=_wrap_Link_getInertia(resc,resv,argc,(mxArray**)(argv)); break;
  case 585: flag=_wrap_Link_setIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 586: flag=_wrap_Link_getIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 587: flag=_wrap_delete_IJoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 588: flag=_wrap_IJoint_clone(resc,resv,argc,(mxArray**)(argv)); break;
  case 589: flag=_wrap_IJoint_getNrOfPosCoords(resc,resv,argc,(mxArray**)(argv)); break;
  case 590: flag=_wrap_IJoint_getNrOfDOFs(resc,resv,argc,(mxArray**)(argv)); break;
  case 591: flag=_wrap_IJoint_setAttachedLinks(resc,resv,argc,(mxArray**)(argv)); break;
  case 592: flag=_wrap_IJoint_setRestTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 593: flag=_wrap_IJoint_getFirstAttachedLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 594: flag=_wrap_IJoint_getSecondAttachedLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 595: flag=_wrap_IJoint_getRestTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 596: flag=_wrap_IJoint_getTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 597: flag=_wrap_IJoint_getMotionSubspaceVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 598: flag=_wrap_IJoint_computeChildPosVelAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 599: flag=_wrap_IJoint_computeChildVelAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 600: flag=_wrap_IJoint_computeJointTorque(resc,resv,argc,(mxArray**)(argv)); break;
  case 601: flag=_wrap_IJoint_setIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 602: flag=_wrap_IJoint_getIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 603: flag=_wrap_IJoint_setPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 604: flag=_wrap_IJoint_getPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 605: flag=_wrap_IJoint_setDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 606: flag=_wrap_IJoint_getDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 607: flag=_wrap_new_FixedJoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 608: flag=_wrap_delete_FixedJoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 609: flag=_wrap_FixedJoint_clone(resc,resv,argc,(mxArray**)(argv)); break;
  case 610: flag=_wrap_FixedJoint_getNrOfPosCoords(resc,resv,argc,(mxArray**)(argv)); break;
  case 611: flag=_wrap_FixedJoint_getNrOfDOFs(resc,resv,argc,(mxArray**)(argv)); break;
  case 612: flag=_wrap_FixedJoint_setAttachedLinks(resc,resv,argc,(mxArray**)(argv)); break;
  case 613: flag=_wrap_FixedJoint_setRestTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 614: flag=_wrap_FixedJoint_getFirstAttachedLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 615: flag=_wrap_FixedJoint_getSecondAttachedLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 616: flag=_wrap_FixedJoint_getRestTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 617: flag=_wrap_FixedJoint_getTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 618: flag=_wrap_FixedJoint_getMotionSubspaceVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 619: flag=_wrap_FixedJoint_computeChildPosVelAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 620: flag=_wrap_FixedJoint_computeChildVelAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 621: flag=_wrap_FixedJoint_computeJointTorque(resc,resv,argc,(mxArray**)(argv)); break;
  case 622: flag=_wrap_FixedJoint_setIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 623: flag=_wrap_FixedJoint_getIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 624: flag=_wrap_FixedJoint_setPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 625: flag=_wrap_FixedJoint_getPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 626: flag=_wrap_FixedJoint_setDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 627: flag=_wrap_FixedJoint_getDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 628: flag=_wrap_delete_MovableJointImpl1(resc,resv,argc,(mxArray**)(argv)); break;
  case 629: flag=_wrap_MovableJointImpl1_getNrOfPosCoords(resc,resv,argc,(mxArray**)(argv)); break;
  case 630: flag=_wrap_MovableJointImpl1_getNrOfDOFs(resc,resv,argc,(mxArray**)(argv)); break;
  case 631: flag=_wrap_MovableJointImpl1_setIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 632: flag=_wrap_MovableJointImpl1_getIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 633: flag=_wrap_MovableJointImpl1_setPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 634: flag=_wrap_MovableJointImpl1_getPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 635: flag=_wrap_MovableJointImpl1_setDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 636: flag=_wrap_MovableJointImpl1_getDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 637: flag=_wrap_delete_MovableJointImpl2(resc,resv,argc,(mxArray**)(argv)); break;
  case 638: flag=_wrap_MovableJointImpl2_getNrOfPosCoords(resc,resv,argc,(mxArray**)(argv)); break;
  case 639: flag=_wrap_MovableJointImpl2_getNrOfDOFs(resc,resv,argc,(mxArray**)(argv)); break;
  case 640: flag=_wrap_MovableJointImpl2_setIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 641: flag=_wrap_MovableJointImpl2_getIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 642: flag=_wrap_MovableJointImpl2_setPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 643: flag=_wrap_MovableJointImpl2_getPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 644: flag=_wrap_MovableJointImpl2_setDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 645: flag=_wrap_MovableJointImpl2_getDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 646: flag=_wrap_delete_MovableJointImpl3(resc,resv,argc,(mxArray**)(argv)); break;
  case 647: flag=_wrap_MovableJointImpl3_getNrOfPosCoords(resc,resv,argc,(mxArray**)(argv)); break;
  case 648: flag=_wrap_MovableJointImpl3_getNrOfDOFs(resc,resv,argc,(mxArray**)(argv)); break;
  case 649: flag=_wrap_MovableJointImpl3_setIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 650: flag=_wrap_MovableJointImpl3_getIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 651: flag=_wrap_MovableJointImpl3_setPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 652: flag=_wrap_MovableJointImpl3_getPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 653: flag=_wrap_MovableJointImpl3_setDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 654: flag=_wrap_MovableJointImpl3_getDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 655: flag=_wrap_delete_MovableJointImpl4(resc,resv,argc,(mxArray**)(argv)); break;
  case 656: flag=_wrap_MovableJointImpl4_getNrOfPosCoords(resc,resv,argc,(mxArray**)(argv)); break;
  case 657: flag=_wrap_MovableJointImpl4_getNrOfDOFs(resc,resv,argc,(mxArray**)(argv)); break;
  case 658: flag=_wrap_MovableJointImpl4_setIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 659: flag=_wrap_MovableJointImpl4_getIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 660: flag=_wrap_MovableJointImpl4_setPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 661: flag=_wrap_MovableJointImpl4_getPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 662: flag=_wrap_MovableJointImpl4_setDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 663: flag=_wrap_MovableJointImpl4_getDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 664: flag=_wrap_delete_MovableJointImpl5(resc,resv,argc,(mxArray**)(argv)); break;
  case 665: flag=_wrap_MovableJointImpl5_getNrOfPosCoords(resc,resv,argc,(mxArray**)(argv)); break;
  case 666: flag=_wrap_MovableJointImpl5_getNrOfDOFs(resc,resv,argc,(mxArray**)(argv)); break;
  case 667: flag=_wrap_MovableJointImpl5_setIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 668: flag=_wrap_MovableJointImpl5_getIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 669: flag=_wrap_MovableJointImpl5_setPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 670: flag=_wrap_MovableJointImpl5_getPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 671: flag=_wrap_MovableJointImpl5_setDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 672: flag=_wrap_MovableJointImpl5_getDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 673: flag=_wrap_delete_MovableJointImpl6(resc,resv,argc,(mxArray**)(argv)); break;
  case 674: flag=_wrap_MovableJointImpl6_getNrOfPosCoords(resc,resv,argc,(mxArray**)(argv)); break;
  case 675: flag=_wrap_MovableJointImpl6_getNrOfDOFs(resc,resv,argc,(mxArray**)(argv)); break;
  case 676: flag=_wrap_MovableJointImpl6_setIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 677: flag=_wrap_MovableJointImpl6_getIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 678: flag=_wrap_MovableJointImpl6_setPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 679: flag=_wrap_MovableJointImpl6_getPosCoordsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 680: flag=_wrap_MovableJointImpl6_setDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 681: flag=_wrap_MovableJointImpl6_getDOFsOffset(resc,resv,argc,(mxArray**)(argv)); break;
  case 682: flag=_wrap_new_RevoluteJoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 683: flag=_wrap_delete_RevoluteJoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 684: flag=_wrap_RevoluteJoint_clone(resc,resv,argc,(mxArray**)(argv)); break;
  case 685: flag=_wrap_RevoluteJoint_setAttachedLinks(resc,resv,argc,(mxArray**)(argv)); break;
  case 686: flag=_wrap_RevoluteJoint_setRestTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 687: flag=_wrap_RevoluteJoint_setAxis(resc,resv,argc,(mxArray**)(argv)); break;
  case 688: flag=_wrap_RevoluteJoint_getFirstAttachedLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 689: flag=_wrap_RevoluteJoint_getSecondAttachedLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 690: flag=_wrap_RevoluteJoint_getAxis(resc,resv,argc,(mxArray**)(argv)); break;
  case 691: flag=_wrap_RevoluteJoint_getRestTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 692: flag=_wrap_RevoluteJoint_getTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 693: flag=_wrap_RevoluteJoint_getMotionSubspaceVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 694: flag=_wrap_RevoluteJoint_computeChildPosVelAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 695: flag=_wrap_RevoluteJoint_computeChildVelAcc(resc,resv,argc,(mxArray**)(argv)); break;
  case 696: flag=_wrap_RevoluteJoint_computeJointTorque(resc,resv,argc,(mxArray**)(argv)); break;
  case 697: flag=_wrap_new_Traversal(resc,resv,argc,(mxArray**)(argv)); break;
  case 698: flag=_wrap_delete_Traversal(resc,resv,argc,(mxArray**)(argv)); break;
  case 699: flag=_wrap_Traversal_getNrOfVisitedLinks(resc,resv,argc,(mxArray**)(argv)); break;
  case 700: flag=_wrap_Traversal_getLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 701: flag=_wrap_Traversal_getParentLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 702: flag=_wrap_Traversal_getParentJoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 703: flag=_wrap_Traversal_getParentLinkFromLinkIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 704: flag=_wrap_Traversal_getParentJointFromLinkIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 705: flag=_wrap_Traversal_reset(resc,resv,argc,(mxArray**)(argv)); break;
  case 706: flag=_wrap_Traversal_setTraversalElement(resc,resv,argc,(mxArray**)(argv)); break;
  case 707: flag=_wrap_Neighbor_neighborLink_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 708: flag=_wrap_Neighbor_neighborLink_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 709: flag=_wrap_Neighbor_neighborJoint_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 710: flag=_wrap_Neighbor_neighborJoint_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 711: flag=_wrap_new_Neighbor(resc,resv,argc,(mxArray**)(argv)); break;
  case 712: flag=_wrap_delete_Neighbor(resc,resv,argc,(mxArray**)(argv)); break;
  case 713: flag=_wrap_new_Model(resc,resv,argc,(mxArray**)(argv)); break;
  case 714: flag=_wrap_delete_Model(resc,resv,argc,(mxArray**)(argv)); break;
  case 715: flag=_wrap_Model_getNrOfLinks(resc,resv,argc,(mxArray**)(argv)); break;
  case 716: flag=_wrap_Model_getLinkName(resc,resv,argc,(mxArray**)(argv)); break;
  case 717: flag=_wrap_Model_getLinkIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 718: flag=_wrap_Model_addLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 719: flag=_wrap_Model_getNrOfJoints(resc,resv,argc,(mxArray**)(argv)); break;
  case 720: flag=_wrap_Model_getJointName(resc,resv,argc,(mxArray**)(argv)); break;
  case 721: flag=_wrap_Model_getJointIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 722: flag=_wrap_Model_addJoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 723: flag=_wrap_Model_getNrOfPosCoords(resc,resv,argc,(mxArray**)(argv)); break;
  case 724: flag=_wrap_Model_getNrOfDOFs(resc,resv,argc,(mxArray**)(argv)); break;
  case 725: flag=_wrap_Model_getNrOfFrames(resc,resv,argc,(mxArray**)(argv)); break;
  case 726: flag=_wrap_Model_addAdditionalFrameToLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 727: flag=_wrap_Model_getFrameName(resc,resv,argc,(mxArray**)(argv)); break;
  case 728: flag=_wrap_Model_getFrameIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 729: flag=_wrap_Model_getFrameTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 730: flag=_wrap_Model_getFrameLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 731: flag=_wrap_Model_getNrOfNeighbors(resc,resv,argc,(mxArray**)(argv)); break;
  case 732: flag=_wrap_Model_getNeighbor(resc,resv,argc,(mxArray**)(argv)); break;
  case 733: flag=_wrap_Model_setDefaultBaseLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 734: flag=_wrap_Model_getDefaultBaseLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 735: flag=_wrap_Model_computeFullTreeTraversal(resc,resv,argc,(mxArray**)(argv)); break;
  case 736: flag=_wrap_modelFromURDF(resc,resv,argc,(mxArray**)(argv)); break;
  case 737: flag=_wrap_modelFromURDFString(resc,resv,argc,(mxArray**)(argv)); break;
  case 738: flag=_wrap_NR_OF_SENSOR_TYPES_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 739: flag=_wrap_delete_Sensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 740: flag=_wrap_Sensor_getName(resc,resv,argc,(mxArray**)(argv)); break;
  case 741: flag=_wrap_Sensor_getSensorType(resc,resv,argc,(mxArray**)(argv)); break;
  case 742: flag=_wrap_Sensor_getParent(resc,resv,argc,(mxArray**)(argv)); break;
  case 743: flag=_wrap_Sensor_getParentIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 744: flag=_wrap_Sensor_isValid(resc,resv,argc,(mxArray**)(argv)); break;
  case 745: flag=_wrap_Sensor_setName(resc,resv,argc,(mxArray**)(argv)); break;
  case 746: flag=_wrap_Sensor_setParent(resc,resv,argc,(mxArray**)(argv)); break;
  case 747: flag=_wrap_Sensor_setParentIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 748: flag=_wrap_Sensor_clone(resc,resv,argc,(mxArray**)(argv)); break;
  case 749: flag=_wrap_new_SensorsList(resc,resv,argc,(mxArray**)(argv)); break;
  case 750: flag=_wrap_delete_SensorsList(resc,resv,argc,(mxArray**)(argv)); break;
  case 751: flag=_wrap_SensorsList_addSensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 752: flag=_wrap_SensorsList_getNrOfSensors(resc,resv,argc,(mxArray**)(argv)); break;
  case 753: flag=_wrap_SensorsList_getSensorIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 754: flag=_wrap_SensorsList_getSensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 755: flag=_wrap_SensorsList_getSixAxisForceTorqueSensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 756: flag=_wrap_new_SensorsMeasurements(resc,resv,argc,(mxArray**)(argv)); break;
  case 757: flag=_wrap_delete_SensorsMeasurements(resc,resv,argc,(mxArray**)(argv)); break;
  case 758: flag=_wrap_SensorsMeasurements_setNrOfSensors(resc,resv,argc,(mxArray**)(argv)); break;
  case 759: flag=_wrap_SensorsMeasurements_getNrOfSensors(resc,resv,argc,(mxArray**)(argv)); break;
  case 760: flag=_wrap_SensorsMeasurements_setMeasurement(resc,resv,argc,(mxArray**)(argv)); break;
  case 761: flag=_wrap_SensorsMeasurements_getMeasurement(resc,resv,argc,(mxArray**)(argv)); break;
  case 762: flag=_wrap_new_SixAxisForceTorqueSensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 763: flag=_wrap_delete_SixAxisForceTorqueSensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 764: flag=_wrap_SixAxisForceTorqueSensor_setName(resc,resv,argc,(mxArray**)(argv)); break;
  case 765: flag=_wrap_SixAxisForceTorqueSensor_setFirstLinkSensorTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 766: flag=_wrap_SixAxisForceTorqueSensor_setSecondLinkSensorTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 767: flag=_wrap_SixAxisForceTorqueSensor_getFirstLinkIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 768: flag=_wrap_SixAxisForceTorqueSensor_getSecondLinkIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 769: flag=_wrap_SixAxisForceTorqueSensor_setFirstLinkName(resc,resv,argc,(mxArray**)(argv)); break;
  case 770: flag=_wrap_SixAxisForceTorqueSensor_setSecondLinkName(resc,resv,argc,(mxArray**)(argv)); break;
  case 771: flag=_wrap_SixAxisForceTorqueSensor_getFirstLinkName(resc,resv,argc,(mxArray**)(argv)); break;
  case 772: flag=_wrap_SixAxisForceTorqueSensor_getSecondLinkName(resc,resv,argc,(mxArray**)(argv)); break;
  case 773: flag=_wrap_SixAxisForceTorqueSensor_setParent(resc,resv,argc,(mxArray**)(argv)); break;
  case 774: flag=_wrap_SixAxisForceTorqueSensor_setParentIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 775: flag=_wrap_SixAxisForceTorqueSensor_setAppliedWrenchLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 776: flag=_wrap_SixAxisForceTorqueSensor_getName(resc,resv,argc,(mxArray**)(argv)); break;
  case 777: flag=_wrap_SixAxisForceTorqueSensor_getSensorType(resc,resv,argc,(mxArray**)(argv)); break;
  case 778: flag=_wrap_SixAxisForceTorqueSensor_getParent(resc,resv,argc,(mxArray**)(argv)); break;
  case 779: flag=_wrap_SixAxisForceTorqueSensor_getParentIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 780: flag=_wrap_SixAxisForceTorqueSensor_isValid(resc,resv,argc,(mxArray**)(argv)); break;
  case 781: flag=_wrap_SixAxisForceTorqueSensor_clone(resc,resv,argc,(mxArray**)(argv)); break;
  case 782: flag=_wrap_SixAxisForceTorqueSensor_getAppliedWrenchLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 783: flag=_wrap_SixAxisForceTorqueSensor_isLinkAttachedToSensor(resc,resv,argc,(mxArray**)(argv)); break;
  case 784: flag=_wrap_SixAxisForceTorqueSensor_getLinkSensorTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 785: flag=_wrap_SixAxisForceTorqueSensor_getWrenchAppliedOnLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 786: flag=_wrap_new_Accelerometer(resc,resv,argc,(mxArray**)(argv)); break;
  case 787: flag=_wrap_delete_Accelerometer(resc,resv,argc,(mxArray**)(argv)); break;
  case 788: flag=_wrap_Accelerometer_setName(resc,resv,argc,(mxArray**)(argv)); break;
  case 789: flag=_wrap_Accelerometer_setLinkSensorTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 790: flag=_wrap_Accelerometer_getParentLinkIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 791: flag=_wrap_Accelerometer_setParentLinkName(resc,resv,argc,(mxArray**)(argv)); break;
  case 792: flag=_wrap_Accelerometer_getParentLinkName(resc,resv,argc,(mxArray**)(argv)); break;
  case 793: flag=_wrap_Accelerometer_setParent(resc,resv,argc,(mxArray**)(argv)); break;
  case 794: flag=_wrap_Accelerometer_setParentIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 795: flag=_wrap_Accelerometer_getLinkIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 796: flag=_wrap_Accelerometer_getName(resc,resv,argc,(mxArray**)(argv)); break;
  case 797: flag=_wrap_Accelerometer_getSensorType(resc,resv,argc,(mxArray**)(argv)); break;
  case 798: flag=_wrap_Accelerometer_getParent(resc,resv,argc,(mxArray**)(argv)); break;
  case 799: flag=_wrap_Accelerometer_getParentIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 800: flag=_wrap_Accelerometer_isValid(resc,resv,argc,(mxArray**)(argv)); break;
  case 801: flag=_wrap_Accelerometer_clone(resc,resv,argc,(mxArray**)(argv)); break;
  case 802: flag=_wrap_Accelerometer_getLinkSensorTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 803: flag=_wrap_Accelerometer_predictMeasurement(resc,resv,argc,(mxArray**)(argv)); break;
  case 804: flag=_wrap_new_Gyroscope(resc,resv,argc,(mxArray**)(argv)); break;
  case 805: flag=_wrap_delete_Gyroscope(resc,resv,argc,(mxArray**)(argv)); break;
  case 806: flag=_wrap_Gyroscope_setName(resc,resv,argc,(mxArray**)(argv)); break;
  case 807: flag=_wrap_Gyroscope_setLinkSensorTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 808: flag=_wrap_Gyroscope_setParent(resc,resv,argc,(mxArray**)(argv)); break;
  case 809: flag=_wrap_Gyroscope_setParentIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 810: flag=_wrap_Gyroscope_getName(resc,resv,argc,(mxArray**)(argv)); break;
  case 811: flag=_wrap_Gyroscope_getSensorType(resc,resv,argc,(mxArray**)(argv)); break;
  case 812: flag=_wrap_Gyroscope_getParent(resc,resv,argc,(mxArray**)(argv)); break;
  case 813: flag=_wrap_Gyroscope_getParentIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 814: flag=_wrap_Gyroscope_isValid(resc,resv,argc,(mxArray**)(argv)); break;
  case 815: flag=_wrap_Gyroscope_clone(resc,resv,argc,(mxArray**)(argv)); break;
  case 816: flag=_wrap_Gyroscope_getLinkSensorTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 817: flag=_wrap_Gyroscope_predictMeasurement(resc,resv,argc,(mxArray**)(argv)); break;
  case 818: flag=_wrap_new_PredictSensorsMeasurements(resc,resv,argc,(mxArray**)(argv)); break;
  case 819: flag=_wrap_PredictSensorsMeasurements_makePrediction(resc,resv,argc,(mxArray**)(argv)); break;
  case 820: flag=_wrap_delete_PredictSensorsMeasurements(resc,resv,argc,(mxArray**)(argv)); break;
  case 821: flag=_wrap_sensorsListFromURDF(resc,resv,argc,(mxArray**)(argv)); break;
  case 822: flag=_wrap_sensorsListFromURDFString(resc,resv,argc,(mxArray**)(argv)); break;
  case 823: flag=_wrap_DynamicsRegressorParameter_category_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 824: flag=_wrap_DynamicsRegressorParameter_category_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 825: flag=_wrap_DynamicsRegressorParameter_elemIndex_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 826: flag=_wrap_DynamicsRegressorParameter_elemIndex_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 827: flag=_wrap_DynamicsRegressorParameter_type_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 828: flag=_wrap_DynamicsRegressorParameter_type_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 829: flag=_wrap_DynamicsRegressorParameter_lt(resc,resv,argc,(mxArray**)(argv)); break;
  case 830: flag=_wrap_DynamicsRegressorParameter_eq(resc,resv,argc,(mxArray**)(argv)); break;
  case 831: flag=_wrap_DynamicsRegressorParameter_ne(resc,resv,argc,(mxArray**)(argv)); break;
  case 832: flag=_wrap_new_DynamicsRegressorParameter(resc,resv,argc,(mxArray**)(argv)); break;
  case 833: flag=_wrap_delete_DynamicsRegressorParameter(resc,resv,argc,(mxArray**)(argv)); break;
  case 834: flag=_wrap_DynamicsRegressorParametersList_parameters_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 835: flag=_wrap_DynamicsRegressorParametersList_parameters_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 836: flag=_wrap_DynamicsRegressorParametersList_getDescriptionOfParameter(resc,resv,argc,(mxArray**)(argv)); break;
  case 837: flag=_wrap_DynamicsRegressorParametersList_addParam(resc,resv,argc,(mxArray**)(argv)); break;
  case 838: flag=_wrap_DynamicsRegressorParametersList_addList(resc,resv,argc,(mxArray**)(argv)); break;
  case 839: flag=_wrap_DynamicsRegressorParametersList_findParam(resc,resv,argc,(mxArray**)(argv)); break;
  case 840: flag=_wrap_DynamicsRegressorParametersList_getNrOfParameters(resc,resv,argc,(mxArray**)(argv)); break;
  case 841: flag=_wrap_new_DynamicsRegressorParametersList(resc,resv,argc,(mxArray**)(argv)); break;
  case 842: flag=_wrap_delete_DynamicsRegressorParametersList(resc,resv,argc,(mxArray**)(argv)); break;
  case 843: flag=_wrap_new_DynamicsRegressorGenerator(resc,resv,argc,(mxArray**)(argv)); break;
  case 844: flag=_wrap_delete_DynamicsRegressorGenerator(resc,resv,argc,(mxArray**)(argv)); break;
  case 845: flag=_wrap_DynamicsRegressorGenerator_loadRobotAndSensorsModelFromFile(resc,resv,argc,(mxArray**)(argv)); break;
  case 846: flag=_wrap_DynamicsRegressorGenerator_loadRobotAndSensorsModelFromString(resc,resv,argc,(mxArray**)(argv)); break;
  case 847: flag=_wrap_DynamicsRegressorGenerator_loadRegressorStructureFromFile(resc,resv,argc,(mxArray**)(argv)); break;
  case 848: flag=_wrap_DynamicsRegressorGenerator_loadRegressorStructureFromString(resc,resv,argc,(mxArray**)(argv)); break;
  case 849: flag=_wrap_DynamicsRegressorGenerator_isValid(resc,resv,argc,(mxArray**)(argv)); break;
  case 850: flag=_wrap_DynamicsRegressorGenerator_getNrOfParameters(resc,resv,argc,(mxArray**)(argv)); break;
  case 851: flag=_wrap_DynamicsRegressorGenerator_getNrOfOutputs(resc,resv,argc,(mxArray**)(argv)); break;
  case 852: flag=_wrap_DynamicsRegressorGenerator_getNrOfDegreesOfFreedom(resc,resv,argc,(mxArray**)(argv)); break;
  case 853: flag=_wrap_DynamicsRegressorGenerator_getDescriptionOfParameter(resc,resv,argc,(mxArray**)(argv)); break;
  case 854: flag=_wrap_DynamicsRegressorGenerator_getDescriptionOfParameters(resc,resv,argc,(mxArray**)(argv)); break;
  case 855: flag=_wrap_DynamicsRegressorGenerator_getDescriptionOfOutput(resc,resv,argc,(mxArray**)(argv)); break;
  case 856: flag=_wrap_DynamicsRegressorGenerator_getDescriptionOfOutputs(resc,resv,argc,(mxArray**)(argv)); break;
  case 857: flag=_wrap_DynamicsRegressorGenerator_getDescriptionOfDegreeOfFreedom(resc,resv,argc,(mxArray**)(argv)); break;
  case 858: flag=_wrap_DynamicsRegressorGenerator_getDescriptionOfDegreesOfFreedom(resc,resv,argc,(mxArray**)(argv)); break;
  case 859: flag=_wrap_DynamicsRegressorGenerator_getBaseLinkName(resc,resv,argc,(mxArray**)(argv)); break;
  case 860: flag=_wrap_DynamicsRegressorGenerator_getSensorsModel(resc,resv,argc,(mxArray**)(argv)); break;
  case 861: flag=_wrap_DynamicsRegressorGenerator_setRobotState(resc,resv,argc,(mxArray**)(argv)); break;
  case 862: flag=_wrap_DynamicsRegressorGenerator_getSensorsMeasurements(resc,resv,argc,(mxArray**)(argv)); break;
  case 863: flag=_wrap_DynamicsRegressorGenerator_computeRegressor(resc,resv,argc,(mxArray**)(argv)); break;
  case 864: flag=_wrap_DynamicsRegressorGenerator_getModelParameters(resc,resv,argc,(mxArray**)(argv)); break;
  case 865: flag=_wrap_DynamicsRegressorGenerator_computeFloatingBaseIdentifiableSubspace(resc,resv,argc,(mxArray**)(argv)); break;
  case 866: flag=_wrap_DynamicsRegressorGenerator_computeFixedBaseIdentifiableSubspace(resc,resv,argc,(mxArray**)(argv)); break;
  case 867: flag=_wrap_new_DynamicsComputations(resc,resv,argc,(mxArray**)(argv)); break;
  case 868: flag=_wrap_delete_DynamicsComputations(resc,resv,argc,(mxArray**)(argv)); break;
  case 869: flag=_wrap_DynamicsComputations_loadRobotModelFromFile(resc,resv,argc,(mxArray**)(argv)); break;
  case 870: flag=_wrap_DynamicsComputations_loadRobotModelFromString(resc,resv,argc,(mxArray**)(argv)); break;
  case 871: flag=_wrap_DynamicsComputations_isValid(resc,resv,argc,(mxArray**)(argv)); break;
  case 872: flag=_wrap_DynamicsComputations_getNrOfDegreesOfFreedom(resc,resv,argc,(mxArray**)(argv)); break;
  case 873: flag=_wrap_DynamicsComputations_getDescriptionOfDegreeOfFreedom(resc,resv,argc,(mxArray**)(argv)); break;
  case 874: flag=_wrap_DynamicsComputations_getDescriptionOfDegreesOfFreedom(resc,resv,argc,(mxArray**)(argv)); break;
  case 875: flag=_wrap_DynamicsComputations_getNrOfLinks(resc,resv,argc,(mxArray**)(argv)); break;
  case 876: flag=_wrap_DynamicsComputations_getNrOfFrames(resc,resv,argc,(mxArray**)(argv)); break;
  case 877: flag=_wrap_DynamicsComputations_getFloatingBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 878: flag=_wrap_DynamicsComputations_setFloatingBase(resc,resv,argc,(mxArray**)(argv)); break;
  case 879: flag=_wrap_DynamicsComputations_setRobotState(resc,resv,argc,(mxArray**)(argv)); break;
  case 880: flag=_wrap_DynamicsComputations_getWorldBaseTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 881: flag=_wrap_DynamicsComputations_getBaseTwist(resc,resv,argc,(mxArray**)(argv)); break;
  case 882: flag=_wrap_DynamicsComputations_getJointPos(resc,resv,argc,(mxArray**)(argv)); break;
  case 883: flag=_wrap_DynamicsComputations_getJointVel(resc,resv,argc,(mxArray**)(argv)); break;
  case 884: flag=_wrap_DynamicsComputations_getFrameIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 885: flag=_wrap_DynamicsComputations_getFrameName(resc,resv,argc,(mxArray**)(argv)); break;
  case 886: flag=_wrap_DynamicsComputations_getWorldTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 887: flag=_wrap_DynamicsComputations_getRelativeTransform(resc,resv,argc,(mxArray**)(argv)); break;
  case 888: flag=_wrap_DynamicsComputations_getFrameTwist(resc,resv,argc,(mxArray**)(argv)); break;
  case 889: flag=_wrap_DynamicsComputations_getFrameTwistInWorldOrient(resc,resv,argc,(mxArray**)(argv)); break;
  case 890: flag=_wrap_DynamicsComputations_getFrameProperSpatialAcceleration(resc,resv,argc,(mxArray**)(argv)); break;
  case 891: flag=_wrap_DynamicsComputations_getLinkIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 892: flag=_wrap_DynamicsComputations_getLinkInertia(resc,resv,argc,(mxArray**)(argv)); break;
  case 893: flag=_wrap_DynamicsComputations_inverseDynamics(resc,resv,argc,(mxArray**)(argv)); break;
  case 894: flag=_wrap_DynamicsComputations_getFrameJacobian(resc,resv,argc,(mxArray**)(argv)); break;
  case 895: flag=_wrap_DynamicsComputations_getDynamicsRegressor(resc,resv,argc,(mxArray**)(argv)); break;
  case 896: flag=_wrap_DynamicsComputations_getModelDynamicsParameters(resc,resv,argc,(mxArray**)(argv)); break;
  default: flag=1, SWIG_Error(SWIG_RuntimeError, "No function id %d.", fcn_id);
  }
  if (flag) {
    mexErrMsgIdAndTxt(SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  }
}
